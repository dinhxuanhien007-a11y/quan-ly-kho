--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddAllowedUserModal.jsx ---
// src/components/AddAllowedUserModal.jsx
import React, { useState } from 'react';
import { getFunctions, httpsCallable } from "firebase/functions";
import { toast } from 'react-toastify';
import { z } from 'zod';

const allowlistSchema = z.object({
  email: z.string().email({ message: "Địa chỉ email không hợp lệ." }),
});

const AddAllowedUserModal = ({ onClose, onUserAdded }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState('med');
  const [isSaving, setIsSaving] = useState(false);

  const handleAddUser = async () => {
    const validationResult = allowlistSchema.safeParse({ email });
    if (!validationResult.success) {
      toast.warn(validationResult.error.issues[0].message);
      return;
    }

    setIsSaving(true);
    try {
      const functions = getFunctions();
      const addUserFunc = httpsCallable(functions, 'addUserToAllowlist');
      await addUserFunc({ email: email.trim(), role: role });
      toast.success(`Đã thêm ${email} vào danh sách được phép!`);
      onUserAdded(); // Gọi lại hàm để làm mới danh sách
      onClose(); // Đóng modal
    } catch (error) {
      console.error("Lỗi khi thêm user vào allowlist:", error);
      toast.error(error.message);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '500px'}}>
        <h2>Thêm Email vào Danh sách</h2>
        <div className="form-group">
            <label>Email của User (*)</label>
            <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} autoFocus />
        </div>
        <div className="form-group">
            <label>Chọn vai trò (*)</label>
            <select value={role} onChange={(e) => setRole(e.target.value)}>
                <option value="med">med</option>
                <option value="bio">bio</option>
                <option value="admin">admin</option>
            </select>
        </div>
        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
          <button type="button" onClick={handleAddUser} className="btn-primary" disabled={isSaving}>
            {isSaving ? 'Đang thêm...' : 'Thêm và Cấp quyền'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default AddAllowedUserModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddNewLotModal.jsx ---
// src/components/AddNewLotModal.jsx
import React, { useState } from 'react';
import { formatExpiryDate, parseDateString } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD

// <-- ĐỊNH NGHĨA SCHEMA -->
const newLotSchema = z.object({
    expiryDate: z.string().refine(val => parseDateString(val) !== null, {
        message: "Vui lòng nhập Hạn Sử Dụng hợp lệ (dd/mm/yyyy)."
    })
});

const AddNewLotModal = ({ productId, productName, lotNumber, onClose, onSave }) => {
    const [expiryDate, setExpiryDate] = useState('');

    const handleSave = () => {
        // <-- SỬ DỤNG SCHEMA ĐỂ XÁC THỰC -->
        const validationResult = newLotSchema.safeParse({ expiryDate });
        
        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        // Chỉ gọi onSave khi dữ liệu đã hợp lệ
        onSave(expiryDate);
    };

    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };
    
    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSave();
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <h2>Khai Báo Lô Hàng Mới</h2>
                <div className="form-group">
                    <label>Mã hàng</label>
                    <input type="text" value={`${productId} - ${productName}`} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Số lô mới</label>
                    <input type="text" value={lotNumber} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Hạn Sử Dụng (dd/mm/yyyy) (*)</label>
                    <input
                        type="text"
                        value={expiryDate}
                        onChange={(e) => setExpiryDate(e.target.value)}
                        onBlur={handleExpiryDateBlur}
                        onKeyDown={handleKeyDown}
                        placeholder="Nhập HSD cho lô mới..."
                        autoFocus
                    />
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary">Hủy</button>
                    <button type="button" onClick={handleSave} className="btn-primary">Xác nhận</button>
                </div>
            </div>
        </div>
    );
};

export default AddNewLotModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddNewProductAndLotModal.jsx ---
// src/components/AddNewProductAndLotModal.jsx

import React, { useState, useRef } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod';
import { TEMP_OPTIONS, MANUFACTURER_OPTIONS, UNIT_OPTIONS } from '../constants';
import { formatExpiryDate } from '../utils/dateUtils';
import { addProduct } from '../services/productService';

const productAndLotSchema = z.object({
  productName: z.string().min(1, { message: "Tên hàng không được để trống." }),
  lotNumber: z.string().min(1, { message: "Số lô không được để trống." }),
  unit: z.string().min(1, { message: "Đơn vị tính không được để trống." }),
  team: z.string().min(1, { message: "Bạn phải chọn một team." }),
});

const AddNewProductAndLotModal = ({ productId, onClose, onSave }) => {
    const [productName, setProductName] = useState('');
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('');
    const [isSaving, setIsSaving] = useState(false);
    const formRef = useRef(null);

    const handleSubmit = async (e) => {
        if (e) e.preventDefault();

        const formData = { productName, lotNumber, unit, team };
        const validationResult = productAndLotSchema.safeParse(formData);

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        setIsSaving(true);
        const newProductData = {
            productName, unit, packaging, storageTemp, manufacturer, team,
        };

        try {
            await addProduct(productId, newProductData);
            onSave({
                ...newProductData,
                productId,
                lotNumber,
                expiryDate,
                quantity: '',
                notes: '',
            });
            toast.success("Tạo sản phẩm và lô hàng mới thành công!");
        } catch (error) {
            console.error("Lỗi khi tạo sản phẩm mới: ", error);
            toast.error('Đã xảy ra lỗi khi tạo sản phẩm.');
        } finally {
            setIsSaving(false);
        }
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{width: '600px'}}>
                <h2>Tạo Nhanh Sản Phẩm Mới</h2>
                <p>Mã hàng <strong>{productId}</strong> chưa tồn tại. Vui lòng cung cấp thông tin chi tiết.</p>
                
                <div className="modal-body">
                  <form ref={formRef} onSubmit={handleSubmit}>
                      <div className="form-group">
                          <label>Mã hàng (ID)</label>
                          <input type="text" value={productId} readOnly disabled />
                      </div>
                      <div className="form-row">
                          <div className="form-group">
                              <label>Tên hàng (*)</label>
                              <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} autoFocus/>
                          </div>
                          <div className="form-group">
                              <label>Team (*)</label>
                              <select value={team} onChange={(e) => setTeam(e.target.value)}>
                                  <option value="" disabled>-- Chọn team --</option>
                                  <option value="MED">MED</option>
                                  <option value="BIO">BIO</option>
                                  <option value="Spare Part">Spare Part</option>
                              </select>
                          </div>
                      </div>
                      <div className="form-row">
                          <div className="form-group">
                            <label>Số lô (*)</label>
                            <input type="text" value={lotNumber} onChange={(e) => setLotNumber(e.target.value)} />
                        </div>
                         <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={(e) => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                     </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Đơn vị tính (*)</label>
                            <input
                                type="text" // <-- THÊM type="text"
                                list="unit-options"
                                value={unit}
                                onChange={(e) => setUnit(e.target.value)}
                                placeholder="Chọn hoặc nhập ĐVT..."
                            />
                            <datalist id="unit-options">
                                {UNIT_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>Quy cách đóng gói</label>
                            <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Nhiệt độ bảo quản</label>
                            <input
                                type="text" // <-- THÊM type="text"
                                list="temp-options"
                                value={storageTemp}
                                onChange={(e) => setStorageTemp(e.target.value)}
                                placeholder="Chọn hoặc nhập nhiệt độ..."
                            />
                            <datalist id="temp-options">
                                {TEMP_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>Hãng sản xuất</label>
                            <input
                                type="text" // <-- THÊM type="text"
                                list="manufacturer-options"
                                value={manufacturer}
                                onChange={(e) => setManufacturer(e.target.value)}
                                placeholder="Chọn hoặc nhập hãng SX..."
                            />
                            <datalist id="manufacturer-options">
                                {MANUFACTURER_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                    </div>
                  </form>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
                    <button 
                        type="button" 
                        onClick={() => formRef.current.requestSubmit()}
                        className="btn-primary" 
                        disabled={isSaving}
                    >
                        {isSaving ? 'Đang lưu...' : 'Lưu và Chọn'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default AddNewProductAndLotModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddPartnerModal.jsx ---
// src/components/AddPartnerModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- BƯỚC 1: IMPORT ZOD
import { addPartner } from '../services/partnerService';
import { normalizeString } from '../utils/stringUtils'; // <-- THÊM DÒNG NÀY

// <-- BƯỚC 2: ĐỊNH NGHĨA SCHEMA -->
const partnerSchema = z.object({
  partnerId: z.string().trim().min(1, { message: "Mã Đối tác không được để trống." }),
  partnerName: z.string().trim().min(1, { message: "Tên Đối tác không được để trống." }),
  partnerType: z.enum(['supplier', 'customer']),
});


const AddPartnerModal = ({ onClose, onPartnerAdded }) => {
    const [partnerId, setPartnerId] = useState('');
    const [partnerName, setPartnerName] = useState('');
    const [partnerType, setPartnerType] = useState('supplier');
    const [isSaving, setIsSaving] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        // <-- BƯỚC 3: SỬ DỤNG SCHEMA ĐỂ XÁC THỰC -->
        const validationResult = partnerSchema.safeParse({
            partnerId: partnerId,
            partnerName: partnerName,
            partnerType: partnerType,
        });

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }

        setIsSaving(true);
        try {
            const { partnerId: validatedId, ...newPartnerData } = validationResult.data;
            // THÊM DÒNG NÀY ĐỂ TẠO TRƯỜNG CHUẨN HÓA
        newPartnerData.partnerNameNormalized = normalizeString(newPartnerData.partnerName);
        newPartnerData.searchKeywords = generateKeywords(newPartnerData.partnerName);
            await addPartner(validatedId.toUpperCase(), newPartnerData);
            
            toast.success('Thêm đối tác mới thành công!');
            onPartnerAdded();
        } catch (error) {
            console.error("Lỗi khi thêm đối tác: ", error);
            toast.error('Đã xảy ra lỗi khi thêm đối tác.');
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Thêm Đối Tác Mới</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Mã Đối Tác (ID) (*)</label>
                        <input type="text" value={partnerId} onChange={(e) => setPartnerId(e.target.value)} required autoFocus/>
                    </div>
                    <div className="form-group">
                        <label>Tên Đối Tác (*)</label>
                        <input type="text" value={partnerName} onChange={(e) => setPartnerName(e.target.value)} required />
                    </div>
                    <div className="form-group">
                        <label>Phân Loại</label>
                        <select value={partnerType} onChange={(e) => setPartnerType(e.target.value)}>
                            <option value="supplier">Nhà Cung Cấp</option>
                            <option value="customer">Khách Hàng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Đang lưu...' : 'Lưu'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddPartnerModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddProductModal.jsx ---
// src/components/AddProductModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod';
import { TEMP_OPTIONS, MANUFACTURER_OPTIONS, UNIT_OPTIONS } from '../constants';

// Import hàm service thay vì các hàm của firestore
import { addProduct } from '../services/productService';

const productSchema = z.object({
  productId: z.string().min(1, { message: 'Mã hàng (ID) không được để trống.' }),
  productName: z.string().min(1, { message: 'Tên hàng không được để trống.' }),
  unit: z.string().min(1, { message: 'Đơn vị tính không được để trống.' }),
  packaging: z.string().optional(),
  storageTemp: z.string().optional(),
  manufacturer: z.string().optional(),
  team: z.string(),
});

const AddProductModal = ({ onClose, onProductAdded }) => {
  const [productId, setProductId] = useState('');
  const [productName, setProductName] = useState('');
  const [unit, setUnit] = useState('');
  const [packaging, setPackaging] = useState('');
  const [storageTemp, setStorageTemp] = useState('');
  const [manufacturer, setManufacturer] = useState('');
  const [team, setTeam] = useState('MED');
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);

    const formData = {
      productId: productId.trim().toUpperCase(),
      productName: productName.trim(),
      unit: unit.trim(),
      packaging: packaging.trim(),
      storageTemp: storageTemp.trim(),
      manufacturer: manufacturer.trim(),
      team,
    };
    
    const validationResult = productSchema.safeParse(formData);

    if (!validationResult.success) {
      toast.warn(validationResult.error.issues[0].message);
      setIsSaving(false);
      return;
    }

    try {
      const { productId, ...newProductData } = validationResult.data;
      // Gọi hàm service để thêm sản phẩm
      await addProduct(productId, newProductData);

      toast.success('Thêm sản phẩm mới thành công!');
      onProductAdded();
    } catch (error) {
      console.error("Lỗi khi thêm sản phẩm: ", error);
      toast.error('Đã xảy ra lỗi khi thêm sản phẩm.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>Thêm sản phẩm mới</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-row">
            <div className="form-group">
              <label>Mã hàng (ID) (*)</label>
              <input type="text" value={productId} onChange={(e) => setProductId(e.target.value.toUpperCase())} autoFocus />
            </div>
            <div className="form-group">
              <label>Tên hàng (*)</label>
              <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Đơn vị tính (*)</label>
              <input
                list="unit-options-add"
                value={unit}
                onChange={(e) => setUnit(e.target.value)}
                placeholder="Chọn hoặc nhập ĐVT..."
              />
              <datalist id="unit-options-add">
                {UNIT_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>Quy cách đóng gói</label>
              <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiệt độ bảo quản</label>
              <input
                list="temp-options-add"
                value={storageTemp}
                onChange={(e) => setStorageTemp(e.target.value)}
                placeholder="Chọn hoặc nhập nhiệt độ..."
              />
              <datalist id="temp-options-add">
                  {TEMP_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>Hãng sản xuất</label>
              <input
                list="manufacturer-options-add"
                value={manufacturer}
                onChange={(e) => setManufacturer(e.target.value)}
                placeholder="Chọn hoặc nhập hãng SX..."
              />
              <datalist id="manufacturer-options-add">
                  {MANUFACTURER_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select value={team} onChange={(e) => setTeam(e.target.value)}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Đang lưu...' : 'Lưu'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProductModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddUnlistedItemModal.jsx ---
// src/components/AddUnlistedItemModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import { z } from 'zod';

// Định nghĩa Schema với logic .refine() đã được sửa lỗi
const unlistedItemSchema = z.object({
    productId: z.string().trim().min(1, "Mã hàng là bắt buộc."),
    productName: z.string(), 
    countedQty: z.preprocess(
        val => Number(val),
        z.number({ required_error: "Số lượng đếm là bắt buộc.", invalid_type_error: "Số lượng đếm phải là một con số." })
         .gt(0, "Số lượng đếm phải lớn hơn 0.")
    )
}).refine((data, ctx) => { // <-- SỬA LỖI 1: Thêm (data, ctx) để nhận context
    // Nếu isNewProduct là true (được truyền vào context), thì productName phải có giá trị
    if (ctx.isNewProduct) { // <-- SỬA LỖI 2: Sử dụng ctx.isNewProduct thay vì this.isNewProduct
        return data.productName.trim().length > 0;
    }
    return true; // Nếu không phải sản phẩm mới thì không cần check
}, {
    message: "Tên hàng là bắt buộc đối với sản phẩm mới.",
    path: ["productName"], // Báo lỗi cho trường productName
});

const AddUnlistedItemModal = ({ onClose, onAddItem }) => {
    const [productId, setProductId] = useState('');
    const [productName, setProductName] = useState('');
    const [isNewProduct, setIsNewProduct] = useState(false);
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [countedQty, setCountedQty] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('');

    const handleProductSearch = async () => {
        if (!productId) return;
        const productRef = doc(db, 'products', productId.trim().toUpperCase());
        const productSnap = await getDoc(productRef);

        if (productSnap.exists()) {
            const data = productSnap.data();
            setProductName(data.productName);
            setUnit(data.unit);
            setPackaging(data.packaging);
            setStorageTemp(data.storageTemp || '');
            setManufacturer(data.manufacturer || '');
            setTeam(data.team || '');
            setIsNewProduct(false);
        } else {
            setProductName('');
            setUnit('');
            setPackaging('');
            setStorageTemp('');
            setManufacturer('');
            setTeam('');
            setIsNewProduct(true);
            toast.warn("Mã hàng này không tồn tại. Vui lòng nhập Tên hàng mới.");
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // Sử dụng schema để xác thực
        const validationResult = unlistedItemSchema.safeParse({
            productId: productId,
            productName: productName,
            countedQty: countedQty,
        }, {
            // Truyền trạng thái isNewProduct vào context của Zod
            context: { isNewProduct }
        });

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        onAddItem({
            productId: validationResult.data.productId.trim().toUpperCase(),
            productName: productName,
            lotNumber: lotNumber.trim() || 'N/A',
            expiryDate: expiryDate,
            unit: unit,
            packaging: packaging,
            systemQty: 0,
            countedQty: validationResult.data.countedQty,
            lotId: `new_${validationResult.data.productId.trim().toUpperCase()}_${lotNumber.trim() || Date.now()}`,
            isNew: true,
            storageTemp: storageTemp,
            manufacturer: manufacturer,
            team: team,
        });
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Thêm Hàng Ngoài Danh Sách</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Mã hàng (*)</label>
                        <input type="text" value={productId} onChange={e => setProductId(e.target.value)} onBlur={handleProductSearch} required autoFocus />
                    </div>
                    <div className="form-group">
                        <label>Tên hàng {isNewProduct && '(*)'}</label>
                        <input type="text" value={productName} onChange={e => setProductName(e.target.value)} readOnly={!isNewProduct} required={isNewProduct} />
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Số lô</label>
                            <input type="text" value={lotNumber} onChange={e => setLotNumber(e.target.value)} />
                        </div>
                        <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={e => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                    </div>
                    <div className="form-group">
                        <label>Số lượng đếm thực tế (*)</label>
                        <input type="number" value={countedQty} onChange={e => setCountedQty(e.target.value)} required />
                    </div>
                    
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary">Hủy</button>
                        <button type="submit" className="btn-primary">Thêm vào Phiếu</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddUnlistedItemModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddUserModal.jsx ---
// src/components/AddUserModal.jsx

import React, { useState } from 'react';
import { getFunctions, httpsCallable } from "firebase/functions";
import { toast } from 'react-toastify';
import { z } from 'zod';

const inviteSchema = z.object({
  email: z.string().email({ message: "Địa chỉ email không hợp lệ." }),
});

const AddUserModal = ({ onClose, onUserAdded }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState('med');
  const [isSaving, setIsSaving] = useState(false);

  // MỚI: State để lưu trữ link sau khi tạo thành công
  const [generatedLink, setGeneratedLink] = useState(null);

  const handleInvite = async () => {
    const validationResult = inviteSchema.safeParse({ email });
    if (!validationResult.success) {
      toast.warn(validationResult.error.issues[0].message);
      return;
    }

    setIsSaving(true);
    try {
      const functions = getFunctions();
      const inviteUser = httpsCallable(functions, 'inviteUser');
      
      const result = await inviteUser({ 
        email: email.trim(), 
        role: role 
      });

      if (result.data.success) {
        toast.success("Tạo user và link mời thành công!");
        setGeneratedLink(result.data.link); // Lưu link để hiển thị
      }
    } catch (error) {
      console.error("Lỗi khi gọi Cloud Function: ", error);
      toast.error(error.message);
      setIsSaving(false);
    }
    // Không tắt isSaving ở đây để giữ modal hiển thị link
  };

  // MỚI: Hàm để đóng modal và refresh danh sách
  const handleCloseAndRefresh = () => {
      onUserAdded();
      onClose();
  }

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '500px'}}>

        {/* --- Giao diện hiển thị link sau khi thành công --- */}
        {generatedLink ? (
          <div>
            <h2>Gửi lời mời thành công!</h2>
            <p>Vui lòng sao chép và gửi đường link dưới đây cho người dùng <strong>{email}</strong>. Link này sẽ giúp họ tự đặt mật khẩu đầu tiên.</p>
            <div className="form-group">
                <textarea
                    readOnly
                    value={generatedLink}
                    rows={4}
                    style={{backgroundColor: '#f8f9fa', cursor: 'pointer'}}
                    onClick={(e) => e.target.select()}
                />
            </div>
            <div className="modal-actions">
                <button type="button" onClick={handleCloseAndRefresh} className="btn-primary">Hoàn tất</button>
            </div>
          </div>
        ) : (
        
        // --- Giao diện mời user ban đầu ---
          <div>
            <h2>Mời User Mới</h2>
            <div className="form-group">
                <label>Email của User (*)</label>
                <input 
                    type="email"
                    value={email} 
                    onChange={(e) => setEmail(e.target.value)} 
                    placeholder="Nhập email của người dùng mới..."
                    autoFocus
                />
            </div>
            <div className="form-group">
                <label>Chọn vai trò (*)</label>
                <select value={role} onChange={(e) => setRole(e.target.value)}>
                    <option value="med">med</option>
                    <option value="bio">bio</option>
                    <option value="admin">admin</option>
                </select>
            </div>

            <div className="modal-actions">
              <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
              <button type="button" onClick={handleInvite} className="btn-primary" disabled={isSaving}>
                {isSaving ? 'Đang xử lý...' : 'Tạo và Lấy Link Mời'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AddUserModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AdminLayout.jsx ---
// src/components/AdminLayout.jsx

import React, { useState } from 'react';
import Navbar from './Navbar';
import { Routes, Route, useLocation } from 'react-router-dom';
import DashboardPage from '../pages/DashboardPage';
import ProductsPage from '../pages/ProductsPage';
import PartnersPage from '../pages/PartnersPage';
import NewImportPage from '../pages/NewImportPage';
import ImportListPage from '../pages/ImportListPage';
import NewExportPage from '../pages/NewExportPage';
import ExportListPage from '../pages/ExportListPage';
import StocktakeListPage from '../pages/StocktakeListPage';
import StocktakeSessionPage from '../pages/StocktakeSessionPage';
import LotTracePage from '../pages/LotTracePage';
import DataImportPage from '../pages/DataImportPage';
import UsersPage from '../pages/UsersPage';
import FloatingCalculator from './FloatingCalculator';
import { MdCalculate } from 'react-icons/md';
import ExpiryNotificationBanner from './ExpiryNotificationBanner';
import ImportSlipCounter from './ImportSlipCounter';
import ExportSlipCounter from './ExportSlipCounter';
import ViewerLayout from './ViewerLayout'; // <-- THÊM DÒNG NÀY

const AdminLayout = () => {
  const location = useLocation();
  const [isCalculatorVisible, setIsCalculatorVisible] = useState(false);

  return (
    <div className="admin-layout-horizontal">
      <Navbar />
      <main className="main-content">
        <ExpiryNotificationBanner />
        
        {location.pathname === '/new-export' && <ExportSlipCounter />}
        {location.pathname === '/new-import' && <ImportSlipCounter />}

        <Routes>
          {/* NÂNG CẤP: Route /view giờ sẽ trỏ đến ViewerLayout */}
          <Route path="/view" element={<ViewerLayout />} />

          {/* CÁC ROUTE CÒN LẠI GIỮ NGUYÊN */}
          <Route path="/" element={<DashboardPage />} />
          <Route path="/products" element={<ProductsPage />} />
          <Route path="/partners" element={<PartnersPage />} />
          <Route path="/new-import" element={<NewImportPage />} />
          <Route path="/new-export" element={<NewExportPage />} />
          <Route path="/imports" element={<ImportListPage />} />
          <Route path="/exports" element={<ExportListPage />} />
          <Route path="/stocktakes" element={<StocktakeListPage />} />
          <Route path="/stocktakes/:sessionId" element={<StocktakeSessionPage />} />
          <Route path="/lot-trace" element={<LotTracePage />} />
          <Route path="/import-data" element={<DataImportPage />} />
          <Route path="/users" element={<UsersPage />} />
        </Routes>
      </main>

      <button 
        className="floating-toggle-btn" 
        onClick={() => setIsCalculatorVisible(true)}
        title="Mở máy tính (Có thể dùng bàn phím)"
      >
        <MdCalculate />
      </button>

      {isCalculatorVisible && <FloatingCalculator onClose={() => setIsCalculatorVisible(false)} />}
    </div>
  );
};

export default AdminLayout;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Autocomplete.module.css ---
/* src/components/Autocomplete.module.css */
.autocompleteContainer {
    position: relative;
    width: 100%;
}

/* MỚI: Style cho icon mũi tên */
.arrowIcon {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #888;
    pointer-events: none; /* Để có thể click xuyên qua icon */
}

.suggestionsList {
    position: fixed; 
    background-color: white;
    border: 1px solid #ccc;
    list-style: none;
    margin: 2px 0 0 0;
    padding: 0;
    max-height: 220px;
    overflow-y: auto;
    z-index: 9999;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    border-radius: 4px;
}

.suggestionsList li {
    padding: 10px 12px;
    cursor: pointer;
    font-size: 14px;
}

.suggestionsList li:hover {
    background-color: #f0f0f0;
}

.suggestionsList li span {
    color: #666;
    margin-left: 8px;
}

/* MỚI: Style cho các dòng thông báo (tải, lỗi...) */
.feedback {
    padding: 10px 12px;
    color: #888;
    font-style: italic;
    cursor: default !important;
    background-color: #fff !important;
}

/* Thêm vào cuối file Autocomplete.module.css */
.activeSuggestion {
    background-color: #007bff !important;
    color: white;
}

.activeSuggestion span {
    color: #f0f0f0;
}

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ConfirmationModal.jsx ---
// src/components/ConfirmationModal.jsx
import React from 'react'; // <-- Thêm import React
import { FiAlertTriangle } from 'react-icons/fi';

const ConfirmationModal = ({ isOpen, title, message, onConfirm, onCancel, confirmText = 'Xác nhận', cancelText = 'Hủy' }) => {
    if (!isOpen) return null;

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                    <div style={{ color: '#f59e0b', fontSize: '32px' }}>
                         <FiAlertTriangle />
                    </div>
                    <div>
                        <h2 style={{ marginTop: 0, marginBottom: '10px' }}>{title}</h2>
                        <p style={{ margin: 0 }}>{message}</p>
                    </div>
                </div>
                <div className="modal-actions" style={{ marginTop: '25px' }}>
                    <button type="button" onClick={onCancel} className="btn-secondary">{cancelText}</button>
                    <button type="button" onClick={onConfirm} className="btn-primary" style={{ backgroundColor: '#dc3545' }}>{confirmText}</button>
                </div>
            </div>
        </div>
    );
};

// <-- BỌC COMPONENT TRONG React.memo ĐỂ TỐI ƯU HIỆU NĂNG -->
export default React.memo(ConfirmationModal);

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ConfirmationModal.test.jsx ---
// src/components/ConfirmationModal.test.jsx

import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import ConfirmationModal from './ConfirmationModal.jsx';
import React from 'react';

// Nhóm các bài test cho ConfirmationModal
describe('Component: ConfirmationModal', () => {

    it('không render gì cả khi prop "isOpen" là false', () => {
        // Render modal với isOpen={false}
        render(
            <ConfirmationModal
                isOpen={false}
                title="Test Title"
                message="Test Message"
                onConfirm={() => {}}
                onCancel={() => {}}
            />
        );
        
        // Sử dụng queryByText vì nó sẽ trả về null nếu không tìm thấy (thay vì báo lỗi)
        const titleElement = screen.queryByText('Test Title');
        expect(titleElement).toBeNull();
    });

    it('hiển thị đúng title và message khi "isOpen" là true', () => {
        render(
            <ConfirmationModal
                isOpen={true}
                title="Tiêu đề xác nhận"
                message="Bạn có chắc không?"
                onConfirm={() => {}}
                onCancel={() => {}}
            />
        );

        // Kiểm tra title và message có xuất hiện trên màn hình không
        expect(screen.getByText('Tiêu đề xác nhận')).toBeInTheDocument();
        expect(screen.getByText('Bạn có chắc không?')).toBeInTheDocument();
    });

    it('gọi hàm onConfirm khi nút xác nhận được click', () => {
        // Tạo một hàm giả (mock function) cho onConfirm
        const handleConfirm = vi.fn();
        
        render(
            <ConfirmationModal
                isOpen={true}
                title="Test"
                message="Test"
                onConfirm={handleConfirm}
                onCancel={() => {}}
                confirmText="Đồng ý"
            />
        );
        
        // Tìm nút xác nhận dựa vào text của nó
        const confirmButton = screen.getByRole('button', { name: /Đồng ý/i });
        
        // Mô phỏng hành động click
        fireEvent.click(confirmButton);
        
        // Kiểm tra xem hàm giả đã được gọi đúng 1 lần chưa
        expect(handleConfirm).toHaveBeenCalledTimes(1);
    });

    it('gọi hàm onCancel khi nút hủy được click', () => {
        // Tạo hàm giả cho onCancel
        const handleCancel = vi.fn();
        
        render(
            <ConfirmationModal
                isOpen={true}
                title="Test"
                message="Test"
                onConfirm={() => {}}
                onCancel={handleCancel}
                cancelText="Bỏ qua"
            />
        );

        const cancelButton = screen.getByRole('button', { name: /Bỏ qua/i });
        fireEvent.click(cancelButton);
        
        expect(handleCancel).toHaveBeenCalledTimes(1);
    });
});

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\CreateStocktakeModal.jsx ---
// src/components/CreateStocktakeModal.jsx
import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD

// <-- ĐỊNH NGHĨA SCHEMA -->
const stocktakeSchema = z.object({
    sessionName: z.string().trim().min(1, { message: "Vui lòng đặt tên cho phiên kiểm kê." })
});

const CreateStocktakeModal = ({ onClose, onCreate, isCreating }) => {
    const [sessionName, setSessionName] = useState('');
    const [scope, setScope] = useState('all');

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // <-- SỬ DỤNG SCHEMA ĐỂ XÁC THỰC -->
        const validationResult = stocktakeSchema.safeParse({ sessionName });

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        onCreate({ sessionName, scope });
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Tạo Phiên Kiểm Kê Mới</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Tên Phiên Kiểm Kê (*)</label>
                        <input
                            type="text"
                            value={sessionName}
                            onChange={(e) => setSessionName(e.target.value)}
                            placeholder="Ví dụ: Kiểm kê cuối năm 2025"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Phạm vi kiểm kê</label>
                        <select value={scope} onChange={(e) => setScope(e.target.value)}>
                            <option value="all">Toàn bộ kho</option>
                            <option value="MED">Chỉ Team MED</option>
                            <option value="BIO">Chỉ Team BIO</option>
                            <option value="Spare Part">Chỉ Team Spare Part</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isCreating}>Hủy</button>
                        <button type="submit" className="btn-primary" disabled={isCreating}>
                            {isCreating ? 'Đang tạo...' : 'Bắt Đầu'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default CreateStocktakeModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditAllowedUserModal.jsx ---
// src/components/EditAllowedUserModal.jsx
import React, { useState } from 'react';
import { getFunctions, httpsCallable } from "firebase/functions";
import { toast } from 'react-toastify';

const EditAllowedUserModal = ({ onClose, onUserUpdated, userToEdit }) => {
  const [newRole, setNewRole] = useState(userToEdit.role);
  const [isSaving, setIsSaving] = useState(false);

  const handleUpdate = async () => {
    if (newRole === userToEdit.role) {
        onClose();
        return;
    }
    setIsSaving(true);
    try {
      const functions = getFunctions();
      const updateRoleFunc = httpsCallable(functions, 'updateAllowlistRole');
      await updateRoleFunc({ email: userToEdit.email, newRole: newRole });
      toast.success(`Đã cập nhật vai trò cho ${userToEdit.email}!`);
      onUserUpdated();
      onClose();
    } catch (error) {
      console.error("Lỗi khi cập nhật vai trò:", error);
      toast.error(error.message);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '500px'}}>
        <h2>Chỉnh sửa vai trò</h2>
        <div className="form-group">
            <label>Email của User</label>
            <input type="email" value={userToEdit.email} readOnly disabled />
        </div>
        <div className="form-group">
            <label>Chọn vai trò mới (*)</label>
            <select value={newRole} onChange={(e) => setNewRole(e.target.value)}>
                <option value="med">med</option>
                <option value="bio">bio</option>
                <option value="admin">admin</option>
            </select>
        </div>
        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
          <button type="button" onClick={handleUpdate} className="btn-primary" disabled={isSaving}>
            {isSaving ? 'Đang lưu...' : 'Lưu thay đổi'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditAllowedUserModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditExportSlipModal.jsx ---
// src/components/EditExportSlipModal.jsx

import React, { useState } from 'react';
import { FiXCircle } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD

// <-- ĐỊNH NGHĨA SCHEMA XÁC THỰC -->
const exportItemSchema = z.object({
  quantityToExport: z.preprocess(
      val => Number(String(val).trim()),
      z.number({ invalid_type_error: "Số lượng xuất phải là một con số." })
       .gt(0, { message: "Số lượng xuất phải lớn hơn 0." })
  ),
  // Giữ lại các trường khác để có thể truyền nguyên object item vào validate
  // và để thông báo lỗi được rõ ràng hơn
  productId: z.string(),
  lotNumber: z.string(),
});

const EditExportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });

  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    if (field === 'quantityToExport') {
      const numericValue = Number(value);
      const originalExportedQty = slip.items[index].quantityToExport || slip.items[index].quantityExported;
      const availableStock = updatedItems[index].quantityRemaining + originalExportedQty;
      
      if (numericValue < 0) return; 
      
      if (numericValue > availableStock) {
        toast.warn(`Số lượng xuất (${numericValue}) không thể vượt quá tồn kho hiện có (${availableStock}).`);
        updatedItems[index][field] = availableStock;
      } else {
        updatedItems[index][field] = value;
      }
    } else {
      updatedItems[index][field] = value;
    }
    
    setSlipData({ ...slipData, items: updatedItems });
  };

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    // Lọc ra các dòng có productId và số lượng > 0 trước khi validate
    const itemsToValidate = slipData.items.filter(item => item.productId && Number(item.quantityToExport) > 0);
    
    if (itemsToValidate.length === 0) {
        toast.warn("Phiếu xuất phải có ít nhất một mặt hàng với số lượng lớn hơn 0.");
        onSave({ ...slipData, items: [] }); // Gửi mảng rỗng để xóa hết
        return;
    }

    // <-- SỬ DỤNG SCHEMA ĐỂ XÁC THỰC -->
    // Dùng .safeParse trên từng item và kiểm tra
    for (let i = 0; i < itemsToValidate.length; i++) {
        const item = itemsToValidate[i];
        const validationResult = exportItemSchema.safeParse(item);
        if (!validationResult.success) {
            // Xác định dòng lỗi dựa trên index trong mảng gốc để thông báo chính xác
            const originalIndex = slipData.items.findIndex(originalItem => originalItem.id === item.id);
            const errorMessage = `Lỗi ở dòng ${originalIndex + 1} (Mã: ${item.productId}): ${validationResult.error.issues[0].message}`;
            toast.warn(errorMessage);
            return;
        }
    }

    const finalSlipData = {
        ...slipData,
        items: itemsToValidate // Chỉ gửi đi những dòng hợp lệ
    };
    onSave(finalSlipData);
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chỉnh sửa Phiếu Xuất Kho (ID: {slipData.id})</h2>

        <h3>Chi tiết hàng hóa</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 1.5fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          <div className="grid-header">Mã hàng</div>
          <div className="grid-header">Tên hàng</div>
          <div className="grid-header">Số lô</div>
          <div className="grid-header">ĐVT</div>
          <div className="grid-header">Quy cách</div>
          <div className="grid-header">SL Xuất (*)</div>
          <div className="grid-header">Ghi chú</div>
          <div className="grid-header">Thao tác</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={item.id || index}>
              <div className="grid-cell"><input type="text" value={item.productId} readOnly title="Không thể sửa Mã hàng ở đây" /></div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} readOnly title="Không thể sửa Lô hàng ở đây" /></div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell">
                <input 
                  type="number" 
                  value={item.quantityToExport} 
                  onChange={e => handleItemChange(index, 'quantityToExport', e.target.value)} 
                />
              </div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">Đóng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">Lưu thay đổi</button>
        </div>
      </div>
    </div>
  );
};

export default EditExportSlipModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditImportSlipModal.jsx ---
// src/components/EditImportSlipModal.jsx
import React, { useState, useRef, useEffect } from 'react';
import { FiPlusCircle, FiXCircle } from 'react-icons/fi';
import { formatExpiryDate, parseDateString } from '../utils/dateUtils';
import { toast } from 'react-toastify'; 
import { z } from 'zod'; // <-- IMPORT ZOD

// <-- ĐỊNH NGHĨA SCHEMA XÁC THỰC -->
const importItemSchema = z.object({
  productId: z.string().trim().min(1, { message: "Mã hàng không được để trống." }),
  productName: z.string(), // Tên hàng là readOnly nên không cần check
  lotNumber: z.string().trim().min(1, { message: "Số lô không được để trống." }),
  expiryDate: z.string().refine(val => parseDateString(val) !== null, {
      message: "HSD có định dạng không hợp lệ (cần là dd/mm/yyyy)."
  }),
  quantity: z.preprocess(
      val => Number(String(val).trim()), // Chuyển đổi giá trị sang số
      z.number({ invalid_type_error: "Số lượng phải là một con số." })
       .gt(0, { message: "Số lượng phải lớn hơn 0." })
  ),
  // Các trường khác là tùy chọn hoặc readOnly
  unit: z.string().optional(),
  packaging: z.string().optional(),
  notes: z.string().optional(),
  storageTemp: z.string().optional(),
  team: z.string().optional(),
});

const importSlipSchema = z.object({
    items: z.array(importItemSchema).min(1, { message: "Phiếu nhập phải có ít nhất một mặt hàng hợp lệ." })
});


const EditImportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });
  const lastInputRef = useRef(null);

  useEffect(() => {
    if (lastInputRef.current) {
        lastInputRef.current.focus();
    }
  }, [slipData.items.length]);

  const handleExpiryDateBlur = (index, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index].expiryDate = formatExpiryDate(value);
    setSlipData({ ...slipData, items: updatedItems });
  };

  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index][field] = value;
    setSlipData({ ...slipData, items: updatedItems });
  };

  const addNewRow = () => {
    const newItems = [
      ...slipData.items,
      {
        id: Date.now(),
        productId: '', productName: '', lotNumber: '', expiryDate: '',
        unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: ''
      }
    ];
    setSlipData({ ...slipData, items: newItems });
  };

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    // <-- SỬ DỤNG SCHEMA ĐỂ XÁC THỰC -->
    const itemsToValidate = slipData.items.filter(item => item.productId); // Chỉ validate những dòng có mã hàng
    const validationResult = importSlipSchema.safeParse({ items: itemsToValidate });

    if (!validationResult.success) {
        const firstError = validationResult.error.issues[0];
        const errorPath = firstError.path; // ví dụ: ['items', 0, 'lotNumber']
        const errorIndex = errorPath[1];
        const errorMessage = `Lỗi ở Dòng ${errorIndex + 1}: ${firstError.message}`;
        
        toast.warn(errorMessage);
        return;
    }

    // Nếu hợp lệ, chỉ gửi đi dữ liệu đã được validate
    onSave({ ...slipData, items: validationResult.data.items });
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chỉnh sửa Phiếu Nhập Kho (ID: {slipData.id})</h2>
        <h3>Chi tiết hàng hóa</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          <div className="grid-header">Mã hàng (*)</div>
          <div className="grid-header">Tên hàng</div>
          <div className="grid-header">Số lô (*)</div>
          <div className="grid-header">HSD (*)</div>
          <div className="grid-header">ĐVT</div>
          <div className="grid-header">Quy cách</div>
          <div className="grid-header">Số lượng (*)</div>
          <div className="grid-header">Ghi chú</div>
          <div className="grid-header">Thao tác</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={index}>
              <div className="grid-cell">
                <input 
                    type="text" 
                    value={item.productId} 
                    onChange={e => handleItemChange(index, 'productId', e.target.value)} 
                    ref={index === slipData.items.length - 1 ? lastInputRef : null}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} onChange={e => handleItemChange(index, 'lotNumber', e.target.value)} /></div>
              <div className="grid-cell">
                <input 
                    type="text" 
                    placeholder="dd/mm/yyyy" 
                    value={item.expiryDate} 
                    onChange={e => handleItemChange(index, 'expiryDate', e.target.value)} 
                    onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell"><input type="number" value={item.quantity} onChange={e => handleItemChange(index, 'quantity', e.target.value)} /></div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <button type="button" onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>
          <FiPlusCircle style={{ marginRight: '5px' }} />
          Thêm dòng
        </button>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">Đóng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">Lưu thay đổi</button>
        </div>
      </div>
    </div>
  );
};

export default EditImportSlipModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditPartnerModal.jsx ---
// src/components/EditPartnerModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD
import { updatePartner } from '../services/partnerService';
import { normalizeString } from '../utils/stringUtils'; // <-- THÊM DÒNG NÀY

// <-- ĐỊNH NGHĨA SCHEMA -->
const partnerSchema = z.object({
  partnerName: z.string().trim().min(1, { message: "Tên Đối tác không được để trống." }),
  partnerType: z.enum(['supplier', 'customer']),
});


const EditPartnerModal = ({ onClose, onPartnerUpdated, partnerToEdit }) => {
    const [partnerData, setPartnerData] = useState({ ...partnerToEdit });
    const [isSaving, setIsSaving] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setPartnerData(prevData => ({ ...prevData, [name]: value }));
    };

    const handleSubmit = async (e) => {
    e.preventDefault();

    const validationResult = partnerSchema.safeParse({
        partnerName: partnerData.partnerName,
        partnerType: partnerData.partnerType,
    });

    if (!validationResult.success) {
        toast.warn(validationResult.error.issues[0].message);
        return;
    }

    setIsSaving(true);
    try {
        // Lấy dữ liệu đã được validate
        const dataToUpdate = validationResult.data;

        // THÊM DÒNG NÀY: Tạo trường đã được chuẩn hóa
        dataToUpdate.partnerNameNormalized = normalizeString(dataToUpdate.partnerName);
        dataToUpdate.searchKeywords = generateKeywords(dataToUpdate.partnerName);

        // Gửi dữ liệu mới (bao gồm cả trường đã chuẩn hóa) lên service
        await updatePartner(partnerToEdit.id, dataToUpdate);

        toast.success('Cập nhật thông tin đối tác thành công!');
        onPartnerUpdated();
    } catch (error) {
        console.error("Lỗi khi cập nhật đối tác: ", error);
        toast.error('Đã xảy ra lỗi khi cập nhật.');
    } finally {
        setIsSaving(false);
    }
};

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Sửa Thông Tin Đối Tác</h2>
                <p><strong>Mã Đối Tác:</strong> {partnerToEdit.id}</p>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>Tên Đối Tác (*)</label>
                        <input type="text" name="partnerName" value={partnerData.partnerName || ''} onChange={handleChange} required autoFocus />
                    </div>
                    <div className="form-group">
                        <label>Phân Loại</label>
                        <select name="partnerType" value={partnerData.partnerType} onChange={handleChange}>
                            <option value="supplier">Nhà Cung Cấp</option>
                            <option value="customer">Khách Hàng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Đang lưu...' : 'Lưu thay đổi'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default EditPartnerModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditProductModal.jsx ---
// src/components/EditProductModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD
import { updateProduct } from '../services/productService';

// <-- ĐỊNH NGHĨA SCHEMA -->
const productSchema = z.object({
  productName: z.string().trim().min(1, { message: 'Tên hàng không được để trống.' }),
  unit: z.string().trim().min(1, { message: 'Đơn vị tính không được để trống.' }),
  packaging: z.string().optional(),
  storageTemp: z.string().optional(),
  manufacturer: z.string().optional(),
  team: z.string(),
});

const EditProductModal = ({ onClose, onProductUpdated, productToEdit }) => {
  const [productData, setProductData] = useState({ ...productToEdit });
  const [isSaving, setIsSaving] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProductData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // <-- SỬ DỤNG SCHEMA ĐỂ XÁC THỰC -->
    const validationResult = productSchema.safeParse(productData);
    
    if (!validationResult.success) {
        toast.warn(validationResult.error.issues[0].message);
        return;
    }

    setIsSaving(true);
    try {
      // Gửi dữ liệu đã được validate lên service
      await updateProduct(productToEdit.id, validationResult.data);
      
      toast.success('Cập nhật sản phẩm thành công!');
      onProductUpdated();
    } catch (error) { // <--- Xóa dấu } thừa
  console.error("Lỗi khi cập nhật sản phẩm: ", error);
  toast.error('Đã xảy ra lỗi khi cập nhật sản phẩm.');
} finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>Sửa thông tin sản phẩm</h2>
        <p><strong>Mã hàng:</strong> {productToEdit.id}</p>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Tên hàng (*)</label>
            <input type="text" name="productName" value={productData.productName || ''} onChange={handleChange} required autoFocus />
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Đơn vị tính (*)</label>
              <input type="text" name="unit" value={productData.unit || ''} onChange={handleChange} required />
            </div>
            <div className="form-group">
              <label>Quy cách đóng gói</label>
              <input type="text" name="packaging" value={productData.packaging || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiệt độ bảo quản</label>
              <input type="text" name="storageTemp" value={productData.storageTemp || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>Hãng sản xuất</label>
              <input type="text" name="manufacturer" value={productData.manufacturer || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select name="team" value={productData.team} onChange={handleChange}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Đang lưu...' : 'Lưu thay đổi'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditProductModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditUserRoleModal.jsx ---
// src/components/EditUserRoleModal.jsx

import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const EditUserRoleModal = ({ user, onClose, onRoleUpdated }) => {
  // State để lưu vai trò mới được chọn trong dropdown
  const [newRole, setNewRole] = useState(user.role);
  const [isSaving, setIsSaving] = useState(false);

  const handleSave = async () => {
    if (newRole === user.role) {
      onClose(); // Nếu không có gì thay đổi thì chỉ cần đóng lại
      return;
    }
    setIsSaving(true);
    try {
      const userRef = doc(db, 'users', user.uid);
      await updateDoc(userRef, {
        role: newRole
      });
      toast.success(`Cập nhật vai trò cho user ${user.uid} thành công!`);
      onRoleUpdated(); // Gọi hàm callback để tải lại danh sách và đóng modal
    } catch (error) {
      console.error("Lỗi khi cập nhật vai trò: ", error);
      toast.error("Đã xảy ra lỗi khi cập nhật vai trò.");
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '450px'}}>
        <h2>Thay đổi vai trò</h2>
        <div className="form-group">
            <label>User ID (UID)</label>
            <p><strong>{user.uid}</strong></p>
        </div>
        <div className="form-group">
            <label>Vai trò hiện tại</label>
            <p><em>{user.role}</em></p>
        </div>
        <div className="form-group">
            <label>Chọn vai trò mới</label>
            <select value={newRole} onChange={(e) => setNewRole(e.target.value)}>
                <option value="admin">admin</option>
                <option value="med">med</option>
                <option value="bio">bio</option>
                {/* Không cho phép đổi vai trò thành 'owner' trực tiếp từ giao diện */}
            </select>
        </div>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Hủy</button>
          <button type="button" onClick={handleSave} className="btn-primary" disabled={isSaving}>
            {isSaving ? 'Đang lưu...' : 'Lưu thay đổi'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditUserRoleModal;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ErrorBoundary.jsx ---
// src/components/ErrorBoundary.jsx
import React from 'react';
import * as Sentry from "@sentry/react"; // <-- THÊM DÒNG NÀY

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error: error };
  }

  componentDidCatch(error, errorInfo) {
    // Thay vì chỉ log ra console, chúng ta gửi lỗi đến Sentry
    console.error("Uncaught error:", error, errorInfo);
    Sentry.captureException(error, { extra: errorInfo }); // <-- THAY ĐỔI Ở ĐÂY
  }

  render() {
    if (this.state.hasError) {
      // Giao diện dự phòng khi có lỗi
      return (
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <h1>Rất tiếc, đã có lỗi xảy ra.</h1>
          <p>Đã có sự cố không mong muốn trong ứng dụng.</p>
          <p>Vui lòng thử tải lại trang hoặc liên hệ với quản trị viên.</p>
          <details style={{ whiteSpace: 'pre-wrap', marginTop: '20px' }}>
            <summary>Chi tiết lỗi (dành cho nhà phát triển)</summary>
            {this.state.error && this.state.error.toString()}
          </details>
        </div>
      );
    }

    // Nếu không có lỗi, render các component con bình thường
    return this.props.children;
  }
}

export default ErrorBoundary;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ExpiryNotificationBanner.jsx ---
// src/components/ExpiryNotificationBanner.jsx

import React, { useState, useEffect } from 'react';
import { db, auth } from '../firebaseConfig'; // Đảm bảo bạn đã export auth
import { collection, query, where, onSnapshot } from 'firebase/firestore';
import { getFunctions, httpsCallable } from 'firebase/functions';
import { toast } from 'react-toastify';
import { FiAlertTriangle, FiCheckCircle } from 'react-icons/fi';
import '../styles/ExpiryNotificationBanner.css'; // Sẽ tạo file CSS ở bước sau

const ExpiryNotificationBanner = () => {
    const [notifications, setNotifications] = useState([]);
    const [isProcessing, setIsProcessing] = useState(null); // Lưu ID của notif đang xử lý

    useEffect(() => {
        // Chỉ lắng nghe khi user đã đăng nhập
        const unsubscribeAuth = auth.onAuthStateChanged(user => {
            if (user) {
                const q = query(collection(db, "notifications"), where("status", "==", "UNCONFIRMED"));
                
                const unsubscribeSnapshot = onSnapshot(q, (querySnapshot) => {
                    const activeNotifs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    setNotifications(activeNotifs);
                }, (error) => {
                    console.error("Lỗi khi lắng nghe cảnh báo: ", error);
                    toast.error("Không thể tải danh sách cảnh báo.");
                });

                // Trả về hàm dọn dẹp cho snapshot listener
                return () => unsubscribeSnapshot();
            } else {
                setNotifications([]); // Xóa cảnh báo nếu user đăng xuất
            }
        });

        // Trả về hàm dọn dẹp cho auth listener
        return () => unsubscribeAuth();
    }, []);

    const handleConfirm = async (notificationId, lotId) => {
        setIsProcessing(notificationId);
        const functions = getFunctions();
        const confirmAction = httpsCallable(functions, 'confirmExpiryNotification');
        
        try {
            const result = await confirmAction({ notificationId, lotId });
            toast.success(result.data.message || "Đã xác nhận xử lý lô hàng!");
            // Giao diện sẽ tự động cập nhật nhờ onSnapshot, không cần làm gì thêm
        } catch (error) {
            console.error("Lỗi khi xác nhận: ", error);
            toast.error(error.message);
        } finally {
            setIsProcessing(null); // Hoàn tất xử lý
        }
    };

    if (notifications.length === 0) {
        return null;
    }

    return (
        <div className="expiry-notification-banner">
            <div className="banner-header">
                <FiAlertTriangle />
                <h4>CẢNH BÁO: CÓ {notifications.length} LÔ HÀNG ĐÃ HẾT HẠN SỬ DỤNG!</h4>
            </div>
            <p>Vui lòng di dời các lô hàng này vào khu vực hàng hết date và xác nhận bên dưới.</p>
            <ul className="notification-list">
                {notifications.map(notif => (
                    <li key={notif.id} className={isProcessing === notif.id ? 'processing' : ''}>
                        <span className="message">{notif.message}</span>
                        <button 
                            onClick={() => handleConfirm(notif.id, notif.lotId)}
                            disabled={isProcessing === notif.id}
                            className="confirm-button"
                        >
                            {isProcessing === notif.id ? 'Đang xử lý...' : <><FiCheckCircle /> Xác nhận</>}
                        </button>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default ExpiryNotificationBanner;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ExportSlipCounter.jsx ---
// src/components/ExportSlipCounter.jsx

import React from 'react';
import useExportSlipStore from '../stores/exportSlipStore';

const ExportSlipCounter = () => {
    // Component này chỉ "đăng ký" lắng nghe sự thay đổi của `items`
    const items = useExportSlipStore(state => state.items);
    
    // Chỉ lấy những item đã có thông tin
    const itemCount = items.filter(item => item.productId).length;

    if (itemCount === 0) {
        return null; // Không hiển thị gì nếu chưa có item nào
    }
    
    return (
        <span style={{ 
            marginLeft: '15px', 
            padding: '5px 10px', 
            backgroundColor: '#007bff', 
            color: 'white', 
            borderRadius: '15px',
            fontSize: '12px',
            fontWeight: 'bold'
        }}>
            Phiếu xuất: {itemCount} mặt hàng
        </span>
    );
};

export default ExportSlipCounter;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\FloatingCalculator.jsx ---
// src/components/FloatingCalculator.jsx
import React, { useState, useEffect, useCallback } from 'react';
import styles from './FloatingCalculator.module.css';
import { FiX } from 'react-icons/fi';

const FloatingCalculator = ({ onClose }) => {
    const [displayValue, setDisplayValue] = useState('0');
    const [prevValue, setPrevValue] = useState(null);
    const [operator, setOperator] = useState(null);
    const [waitingForOperand, setWaitingForOperand] = useState(true);
    const [calculationString, setCalculationString] = useState('');

    const calculate = (val1, op, val2) => {
        const num1 = parseFloat(val1);
        const num2 = parseFloat(val2);
        switch (op) {
            case '+': return num1 + num2;
            case '-': return num1 - num2;
            case '*': return num1 * num2;
            case '/': return num1 / num2;
            default: return num2;
        }
    };

    const inputDigit = (digit) => {
        if (operator === '=') {
            setCalculationString('');
            setOperator(null);
        }
        if (waitingForOperand) {
            setDisplayValue(String(digit));
            setWaitingForOperand(false);
        } else {
            setDisplayValue(displayValue === '0' ? String(digit) : displayValue + digit);
        }
    };
    
    const inputDecimal = () => {
        if (operator === '=') {
            setCalculationString('');
            setOperator(null);
        }
        if (waitingForOperand) {
            setDisplayValue('0.');
            setWaitingForOperand(false);
        } else if (displayValue.indexOf('.') === -1) {
            setDisplayValue(displayValue + '.');
        }
    };

    const clearAll = useCallback(() => {
        setDisplayValue('0');
        setPrevValue(null);
        setOperator(null);
        setWaitingForOperand(true);
        setCalculationString('');
    }, []);

    const inputBackspace = useCallback(() => {
        if (waitingForOperand || operator === '=') return;
        const newValue = displayValue.slice(0, -1);
        setDisplayValue(newValue || '0');
    }, [displayValue, waitingForOperand, operator]);

    const performOperation = (nextOperator) => {
        const inputValue = parseFloat(displayValue);
        if (prevValue == null) {
            setPrevValue(inputValue);
            if (nextOperator !== '=') {
                setCalculationString(`${displayValue} ${nextOperator}`);
            }
        } else if (operator) {
            const result = calculate(prevValue, operator, inputValue);
            setDisplayValue(String(result));
            setPrevValue(result);
            if (nextOperator === '=') {
                setCalculationString(`${prevValue} ${operator} ${inputValue} =`);
            } else {
                setCalculationString(`${result} ${nextOperator}`);
            }
        }
        setWaitingForOperand(true);
        setOperator(nextOperator);
    };

    useEffect(() => {
        const handleKeyDown = (event) => {
            const { key } = event;
            if (/\d/.test(key)) { event.preventDefault(); inputDigit(parseInt(key, 10)); }
            else if (key === '.') { event.preventDefault(); inputDecimal(); }
            else if (['+', '-', '*', '/'].includes(key)) { event.preventDefault(); performOperation(key); }
            else if (key === 'Enter' || key === '=') { event.preventDefault(); performOperation('='); }
            else if (key === 'Delete' || key.toLowerCase() === 'c') { event.preventDefault(); clearAll(); }
            else if (key === 'Backspace') { event.preventDefault(); inputBackspace(); }
            else if (key === 'Escape') { event.preventDefault(); onClose(); }
        };
        window.addEventListener('keydown', handleKeyDown);
        return () => window.removeEventListener('keydown', handleKeyDown);
    }, [displayValue, prevValue, operator, waitingForOperand, clearAll, onClose, inputBackspace]);

    return (
        <div className={styles.calculatorContainer}>
            <div className={styles.calculator}>
                <button className={styles.closeButton} onClick={onClose}><FiX /></button>
                
                {/* THAY ĐỔI: Gộp 2 màn hình vào trong 1 div 'screen' */}
                <div className={styles.screen}>
                    <div className={styles.calculationDisplay}>{calculationString}</div>
                    <div className={styles.display}>{displayValue}</div>
                </div>

                <div className={styles.keypad}>
                    <button onClick={() => clearAll()}>C</button>
                    <button disabled>%</button>
                    <button disabled>±</button>
                    <button className={`${styles.operator} ${operator === '/' ? styles.active : ''}`} onClick={() => performOperation('/')}>÷</button>
                    <button onClick={() => inputDigit(7)}>7</button>
                    <button onClick={() => inputDigit(8)}>8</button>
                    <button onClick={() => inputDigit(9)}>9</button>
                    <button className={`${styles.operator} ${operator === '*' ? styles.active : ''}`} onClick={() => performOperation('*')}>×</button>
                    <button onClick={() => inputDigit(4)}>4</button>
                    <button onClick={() => inputDigit(5)}>5</button>
                    <button onClick={() => inputDigit(6)}>6</button>
                    <button className={`${styles.operator} ${operator === '-' ? styles.active : ''}`} onClick={() => performOperation('-')}>-</button>
                    <button onClick={() => inputDigit(1)}>1</button>
                    <button onClick={() => inputDigit(2)}>2</button>
                    <button onClick={() => inputDigit(3)}>3</button>
                    <button className={`${styles.operator} ${operator === '+' ? styles.active : ''}`} onClick={() => performOperation('+')}>+</button>
                    <button className={styles.zero} onClick={() => inputDigit(0)}>0</button>
                    <button onClick={() => inputDecimal()}>.</button>
                    <button className={`${styles.equals} ${operator === '=' ? styles.active : ''}`} onClick={() => performOperation('=')}>=</button>
                </div>
            </div>
        </div>
    );
};

export default FloatingCalculator;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\FloatingCalculator.module.css ---
/* src/components/FloatingCalculator.module.css */

:root {
    --bg-color: #f0f3f7;
    --screen-bg-color: #e6eaf0;
    --display-color: #2d3e50;
    --key-bg-color: #ffffff;
    --key-text-color: #2d3e50;
    --key-hover-bg: #e8ebee;
    --operator-bg: #d9e4f1;
    --operator-text: #005a9e;
    --equals-bg: #0078d4;
    --equals-hover-bg: #005a9e;
}

.calculatorContainer {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.4);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2000;
  backdrop-filter: blur(4px);
}

.calculator {
  width: 330px;
  border-radius: 16px;
  background-color: var(--bg-color);
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
  padding: 20px;
  position: relative;
}

.closeButton {
  position: absolute;
  /* THAY ĐỔI: Di chuyển nút X sang trái */
  top: 20px;
  left: 20px;
  background: none;
  border: none;
  color: #aaa;
  font-size: 20px;
  cursor: pointer;
}
.closeButton:hover {
  color: #333;
}

/* MỚI: Style cho khu vực màn hình chung */
.screen {
    background-color: var(--screen-bg-color);
    border-radius: 10px;
    padding: 10px 15px;
    margin-bottom: 20px;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
    min-height: 120px;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}

.calculationDisplay {
    color: #8899a6;
    font-size: 18px;
    font-weight: 500;
    height: 25px;
    text-align: right;
    width: 100%;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    margin-bottom: 5px;
}

.display {
  color: var(--display-color);
  font-size: 52px;
  font-weight: 300;
  text-align: right;
  width: 100%;
  line-height: 1.2;
}

.keypad {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 12px;
}

.keypad button {
  height: 60px;
  border-radius: 8px;
  border: none;
  background-color: var(--key-bg-color);
  color: var(--key-text-color);
  font-size: 20px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.keypad button:hover {
  background-color: var(--key-hover-bg);
}

.keypad button:active {
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  transform: translateY(1px);
}

.operator {
  background-color: var(--operator-bg);
  color: var(--operator-text);
}

.equals {
  background-color: var(--equals-bg);
  color: #fff;
}
.equals:hover {
  background-color: var(--equals-hover-bg);
}

.active {
    background-color: #0078d4 !important;
    color: #fff !important;
}

.keypad .zero {
  grid-column: span 2;
}

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\HomePage.jsx ---
// src/components/HomePage.jsx

import React from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';

function HomePage({ user }) {
  // THAY THẾ CONSOLE.LOG CŨ BẰNG 4 DÒNG NÀY
  console.log('--- DEBUGGING HOMEPAGE ---');
  console.log('Toàn bộ object user:', user);
  console.log('Giá trị của user.email là:', user?.email);
  console.log('Kiểu dữ liệu của user.email là:', typeof user?.email);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      console.log('Đăng xuất thành công!');
    } catch (error) {
      console.error('Lỗi đăng xuất:', error);
    }
  };

  return (
    <div className="homepage-container">
      <h1>Chào mừng trở lại, {user?.email}!</h1>
      <p>Đây là trang quản trị kho của bạn.</p>
      <button onClick={handleLogout} className="logout-button">
        Đăng xuất
      </button>
    </div>
  );
}

export default HomePage;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ImportSlipCounter.jsx ---
// src/components/ImportSlipCounter.jsx

import React from 'react';
import useImportSlipStore from '../stores/importSlipStore';

const ImportSlipCounter = () => {
    // Component này chỉ "lắng nghe" sự thay đổi của `items` trong store.
    const items = useImportSlipStore(state => state.items);
    
    // Chỉ đếm những item đã có thông tin mã hàng.
    const itemCount = items.filter(item => item.productId && item.productId.trim() !== '').length;

    // Không hiển thị gì nếu chưa có item nào.
    if (itemCount === 0) {
        return null;
    }
    
    return (
        <span style={{ 
            marginLeft: '15px', 
            padding: '5px 10px', 
            backgroundColor: '#28a745', // Màu xanh lá cho phiếu nhập
            color: 'white', 
            borderRadius: '15px',
            fontSize: '12px',
            fontWeight: 'bold'
        }}>
            Phiếu nhập: {itemCount} mặt hàng
        </span>
    );
};

export default ImportSlipCounter;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\InventoryFilters.jsx ---
// src/components/InventoryFilters.jsx
import React from 'react';

const InventoryFilters = ({ userRole, onFilterChange, activeFilters }) => {
    
  const handleTeamFilter = (team) => {
    if (activeFilters.team === team) {
      onFilterChange('team', 'all');
    } else {
      onFilterChange('team', team);
    }
  };

  const handleDateFilter = (status) => {
    if (activeFilters.dateStatus === status) {
      onFilterChange('dateStatus', 'all');
    } else {
      onFilterChange('dateStatus', status);
    }
  };

  return (
    <div className="filters-container">
      {/* Bộ lọc theo Team */}
      {/* Chỉ hiển thị bộ lọc team nếu là admin, owner, hoặc bio */}
      {(userRole === 'admin' || userRole === 'owner' || userRole === 'bio') && (
        <div className="filter-group">
          {/* Chỉ admin/owner mới thấy nút lọc MED và BIO */}
          {(userRole === 'admin' || userRole === 'owner') && (
            <>
              <button
                className={activeFilters.team === 'MED' ? 'active' : ''}
                onClick={() => handleTeamFilter('MED')}
              >
                Lọc hàng MED
              </button>
              <button
                className={activeFilters.team === 'BIO' ? 'active' : ''}
                onClick={() => handleTeamFilter('BIO')}
              >
                 Lọc hàng BIO
              </button>
            </>
          )}
          
          {/* Admin/owner và bio đều thấy nút này */}
          <button
            className={activeFilters.team === 'Spare Part' ? 'active' : ''}
            onClick={() => handleTeamFilter('Spare Part')}
          >
            Lọc hàng Spare Part
          </button>
        </div>
      )}
      
      {/* Bộ lọc theo HSD */}
      <div className="filter-group">
        <button
          className={activeFilters.dateStatus === 'near_expiry' ? 'active' : ''}
          onClick={() => handleDateFilter('near_expiry')}
        >
          Lọc hàng cận date (&lt;120 ngày)
        </button>
        <button
          className={activeFilters.dateStatus === 'expired' ? 'active' : ''}
          onClick={() => handleDateFilter('expired')}
        >
          Lọc hàng đã hết HSD
        </button>
      </div>
    </div>
  );
};

export default React.memo(InventoryFilters);

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LoginPage.jsx ---
// src/components/LoginPage.jsx
import React, { useState } from 'react';
import { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';
import { auth } from '../firebaseConfig';
import { toast } from 'react-toastify';
import { getFunctions, httpsCallable } from 'firebase/functions';
import styles from './LoginPage.module.css';
import { FcGoogle } from 'react-icons/fc';

function LoginPage() {
  const [isLoading, setIsLoading] = useState(false);

  const handleGoogleLogin = async () => {
    setIsLoading(true);
    const provider = new GoogleAuthProvider();
    try {
      // 1. Mở cửa sổ popup để đăng nhập bằng Google
      const result = await signInWithPopup(auth, provider);
      
      toast.info("Xác thực Google thành công. Đang khởi tạo vai trò...");
      
      // 2. Gọi Cloud Function để xử lý và cấp quyền
      const functions = getFunctions();
      const processUser = httpsCallable(functions, 'processNewGoogleUser');
      await processUser();

      // === THAY ĐỔI QUAN TRỌNG NHẤT NẰM Ở ĐÂY ===
      // 3. Ép buộc trình duyệt lấy lại token mới nhất (có chứa "con dấu" owner)
      await result.user.getIdToken(true); 
      
      toast.success("Đăng nhập và cấp quyền thành công!");

      // 4. Tải lại trang để đảm bảo toàn bộ ứng dụng sử dụng quyền mới
      // Thay vì để navigate tự động, chúng ta tải lại một cách triệt để
      window.location.reload();

    } catch (error) {
      let errorMessage = "Đã xảy ra lỗi. Vui lòng thử lại.";
      if (error.code === 'auth/popup-closed-by-user') {
          errorMessage = "Cửa sổ đăng nhập đã bị đóng.";
      } else if (error.message.includes("permission-denied")) {
          errorMessage = "Tài khoản của bạn không được phép truy cập hệ thống này.";
          await auth.signOut();
      }
      
      console.error("Lỗi đăng nhập Google:", error);
      toast.error(errorMessage);
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.loginContainer}>
      <h2>Hệ thống Quản lý Kho</h2>
      <p style={{textAlign: 'center', color: '#666', marginTop: '-10px', marginBottom: '30px'}}>
        Vui lòng đăng nhập bằng tài khoản Google đã được cấp phép.
      </p>
      <button 
        className={styles.googleLoginButton} 
        onClick={handleGoogleLogin}
        disabled={isLoading}
      >
        <FcGoogle />
        <span>{isLoading ? "Đang xử lý..." : "Đăng nhập bằng Google"}</span>
      </button>
    </div>
  );
}

export default LoginPage;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LoginPage.module.css ---
/* src/components/LoginPage.module.css */

.loginPageWrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.loginContainer {
  padding: 40px;
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 350px;
}

.loginContainer h2 {
  text-align: center;
  margin-bottom: 24px;
  color: #333;
}

/* Nút bấm trong form đăng nhập */
.loginContainer button {
  width: 100%;
  padding: 12px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  font-size: 16px;
  cursor: pointer;
  margin-top: 10px;
}

.loginContainer button:hover {
  background-color: #0056b3;
}

/* Thêm vào cuối file LoginPage.module.css */
.googleLoginButton {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  background-color: #fff !important;
  color: #444 !important;
  border: 1px solid #ddd !important;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.googleLoginButton:hover {
  background-color: #f8f8f8 !important;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

.googleLoginButton svg {
  font-size: 22px;
}

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LotJourneyExplorer.jsx ---
// src/components/LotJourneyExplorer.jsx

import React, { useMemo } from 'react';
import ReactFlow, { Background, Controls } from 'reactflow';
import 'reactflow/dist/style.css';

const processDataForFlow = (importRecords, exportHistory) => {
    const initialNodes = [];
    const initialEdges = [];

    if (importRecords.length === 0) {
        return { initialNodes, initialEdges };
    }

    const masterInfo = importRecords[0];
    const totalImported = importRecords.reduce((sum, rec) => sum + rec.quantityImported, 0);

    const supplierName = masterInfo.supplier || 'Không rõ';
    initialNodes.push({
        id: 'supplier-node',
        data: { label: `Nhà Cung Cấp: ${supplierName}`, type: 'supplier', name: supplierName },
        position: { x: 0, y: 150 },
        style: { background: '#fde68a', borderColor: '#ca8a04', whiteSpace: 'pre-wrap' },
    });

    initialNodes.push({
        id: 'lot-node',
        data: { label: `Lô: ${masterInfo.lotNumber}\nTổng nhập: ${totalImported}`, type: 'lot' },
        position: { x: 300, y: 150 },
        style: { background: '#a5b4fc', borderColor: '#4338ca', width: 180, whiteSpace: 'pre-wrap' },
    });
    
    initialEdges.push({
        id: 'edge-supplier-lot',
        source: 'supplier-node',
        target: 'lot-node',
        animated: true,
        label: `${totalImported} ${masterInfo.unit}`,
    });

    const customerNodes = {};
    exportHistory.forEach(exp => {
        if (!customerNodes[exp.customer]) {
            customerNodes[exp.customer] = { name: exp.customer, total: 0 };
        }
        customerNodes[exp.customer].total += exp.quantityExported;
    });

    const outputNodes = Object.values(customerNodes);
    const totalRemaining = totalImported - exportHistory.reduce((sum, rec) => sum + rec.quantityExported, 0);
    if (totalRemaining > 0) {
        outputNodes.push({ name: 'Tồn Kho', total: totalRemaining });
    }
    
    outputNodes.forEach((nodeItem, index) => {
        const yPos = index * 120;
        const nodeId = nodeItem.name.replace(/\s+/g, '-').toLowerCase();

        initialNodes.push({
            id: nodeId,
            data: { 
                label: `${nodeItem.name}\nSố lượng: ${nodeItem.total}`, 
                type: nodeItem.name === 'Tồn Kho' ? 'stock' : 'customer',
                name: nodeItem.name
            },
            position: { x: 600, y: yPos },
            style: { 
                background: nodeItem.name === 'Tồn Kho' ? '#d1d5db' : '#6ee7b7',
                borderColor: nodeItem.name === 'Tồn Kho' ? '#4b5563' : '#047857',
                whiteSpace: 'pre-wrap'
            },
        });

        initialEdges.push({
            id: `edge-lot-${nodeId}`,
            source: 'lot-node',
            target: nodeId,
            label: `${nodeItem.total} ${masterInfo.unit}`,
        });
    });

    return { initialNodes, initialEdges };
};

const LotJourneyExplorer = ({ importRecords, exportHistory, onNodeClick, onPaneClick }) => {
    const { initialNodes, initialEdges } = useMemo(
        () => processDataForFlow(importRecords, exportHistory),
        [importRecords, exportHistory]
    );

    if (initialNodes.length === 0) {
        return null;
    }
    
    return (
        <div style={{ height: '500px', border: '1px solid #eee', borderRadius: '8px' }}>
            <ReactFlow
                nodes={initialNodes}
                edges={initialEdges}
                fitView
                onNodeClick={onNodeClick}
                onPaneClick={onPaneClick}
            >
                <Background />
                <Controls /> 
            </ReactFlow>
        </div>
    );
};

export default LotJourneyExplorer;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Navbar.jsx ---
// src/components/Navbar.jsx

import React from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';
import { toast } from 'react-toastify';
import { 
    FiGrid, 
    FiArchive, 
    FiFilePlus,
    FiFileMinus,
    FiClipboard, 
    FiFileText, 
    FiShare2, 
    FiCheckSquare,
    FiUsers,
    FiUpload,
    FiSettings,
    FiLogOut,
    FiBookOpen
} from 'react-icons/fi';
import '../styles/AdminLayout.css';
import { useAuth } from '../hooks/useAuth';

const Navbar = () => {
    const navigate = useNavigate();
    const { role } = useAuth();

    const handleLogout = async () => {
        try {
            await signOut(auth);
            toast.success('Đăng xuất thành công!');
            navigate('/login');
        } catch (error) {
            toast.error('Đã xảy ra lỗi khi đăng xuất.');
            console.error("Lỗi đăng xuất:", error);
        }
    };
    
    const hasRole = (roles) => roles.includes(role);

    return (
        <nav className="top-navbar">
            <div className="navbar-brand">
                <h3>Kho PT Biomed</h3>
            </div>
            <ul className="nav-items">
                {/* === Icon thứ 1: Sổ cái Tồn kho (Mọi người đều thấy) === */}
                <li>
                  <NavLink to="/view" title="Xem Sổ Cái Tồn Kho">
                    <FiBookOpen className="nav-icon" />
                  </NavLink>
                </li>
                
                {/* === Icon thứ 2: Bảng điều khiển (Đã di chuyển, chỉ owner & admin thấy) === */}
                {hasRole(['owner', 'admin']) && (
                    <li>
                        <NavLink to="/" title="Bảng điều khiển">
                            <FiGrid className="nav-icon" />
                        </NavLink>
                    </li>
                )}

                {/* === Icon thứ 3: Danh mục sản phẩm (Mọi người đều thấy) === */}
                <li>
                    <NavLink to="/products" title="Quản lý hàng hóa (Danh mục)">
                        <FiArchive className="nav-icon" />
                    </NavLink>
                </li>

                {/* === Các icon còn lại giữ nguyên thứ tự === */}
                <li>
                    <NavLink to="/new-import" title="Tạo Phiếu Nhập">
                        <FiFilePlus className="nav-icon" />
                    </NavLink>
                </li>
                <li>
                    <NavLink to="/new-export" title="Tạo Phiếu Xuất">
                        <FiFileMinus className="nav-icon" />
                    </NavLink>
                </li>
                 <li>
                    <NavLink to="/lot-trace" title="Truy vết lô hàng">
                        <FiShare2 className="nav-icon" />
                    </NavLink>
                </li>
                
                {hasRole(['owner', 'admin']) && (
                    <>
                        <li>
                            <NavLink to="/imports" title="Danh sách Phiếu Nhập">
                                <FiClipboard className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/exports" title="Danh sách Phiếu Xuất">
                                <FiFileText className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/partners" title="Quản lý Đối tác">
                                <FiUsers className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/stocktakes" title="Kiểm Kê Kho">
                                <FiCheckSquare className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/users" title="Quản lý User">
                                <FiSettings className="nav-icon" />
                            </NavLink>
                        </li>
                    </>
                )}

                {hasRole(['owner']) && (
                    <li>
                        <NavLink to="/import-data" title="Import Dữ Liệu">
                            <FiUpload className="nav-icon" />
                        </NavLink>
                    </li>
                )}
                
                <li>
                    <a href="#" onClick={handleLogout} title="Đăng xuất">
                        <FiLogOut className="nav-icon" />
                    </a>
                </li>
            </ul>
        </nav>
    );
};

export default React.memo(Navbar);

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\NewDataNotification.jsx ---
// src/components/NewDataNotification.jsx
import React from 'react';

const NewDataNotification = ({ isVisible, onRefresh, message }) => {
    if (!isVisible) {
        return null;
    }

    return (
        <div className="new-data-notification">
            <p>{message}</p>
            <button onClick={onRefresh} className="btn-primary">Tải lại danh sách</button>
        </div>
    );
};

export default NewDataNotification;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ProductAutocomplete.jsx ---
// src/components/ProductAutocomplete.jsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { createPortal } from 'react-dom';
import { collection, getDocs, query, orderBy, documentId } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import styles from './Autocomplete.module.css';
import { FiChevronDown } from 'react-icons/fi';

const ProductAutocomplete = ({ value, onSelect, onChange, onBlur }) => {
    const [suggestions, setSuggestions] = useState([]);
    const [allProducts, setAllProducts] = useState([]);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0, width: 0 });
    
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // MỚI: State để theo dõi mục đang được chọn bằng bàn phím
    const [activeIndex, setActiveIndex] = useState(-1);
    
    const containerRef = useRef(null);
    const inputRef = useRef(null);
    const suggestionsRef = useRef(null); // Ref cho danh sách ul

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                setIsLoading(true);
                const productsQuery = query(collection(db, 'products'), orderBy(documentId()));
                const querySnapshot = await getDocs(productsQuery);
                const productList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                setAllProducts(productList);
                setError(null);
            } catch (err) {
                console.error("Lỗi khi tải danh sách sản phẩm:", err);
                setError("Không thể tải danh sách sản phẩm.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchProducts();
    }, []);

    useEffect(() => {
        if (showSuggestions && inputRef.current) {
            const rect = inputRef.current.getBoundingClientRect();
            setDropdownPosition({
                top: rect.bottom + window.scrollY,
                left: rect.left + window.scrollX,
                width: rect.width,
            });
        }
    }, [showSuggestions, suggestions]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (containerRef.current && !containerRef.current.contains(event.target)) {
                setShowSuggestions(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    // MỚI: Logic xử lý bàn phím
    const handleKeyDown = useCallback((e) => {
        if (showSuggestions && suggestions.length > 0) {
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                setActiveIndex(prevIndex => (prevIndex + 1) % suggestions.length);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                setActiveIndex(prevIndex => (prevIndex - 1 + suggestions.length) % suggestions.length);
            } else if (e.key === 'Enter') {
                e.preventDefault();
                if (activeIndex >= 0) {
                    handleSuggestionClick(suggestions[activeIndex]);
                }
            } else if (e.key === 'Escape') {
                setShowSuggestions(false);
            }
        }
    }, [activeIndex, suggestions, showSuggestions]);

    useEffect(() => {
        if (suggestionsRef.current && activeIndex >= 0) {
            const activeItem = suggestionsRef.current.children[activeIndex];
            if (activeItem) {
                activeItem.scrollIntoView({ block: 'nearest' });
            }
        }
    }, [activeIndex]);

    const handleInputChange = (e) => {
        const inputValue = e.target.value.toUpperCase();
        onChange(inputValue);
        setActiveIndex(-1); // Reset active index khi gõ

        if (inputValue.length > 0) {
            const filteredSuggestions = allProducts.filter(product =>
                product.id.toUpperCase().includes(inputValue)
            );
            setSuggestions(filteredSuggestions);
        } else {
            setSuggestions(allProducts.slice(0, 10)); // Hiển thị một vài gợi ý khi trống
        }
        setShowSuggestions(true);
    };

    const handleSuggestionClick = (product) => {
        onSelect(product);
        setShowSuggestions(false);
        setActiveIndex(-1);
    };

    const handleInputBlur = () => {
        setTimeout(() => {
            setShowSuggestions(false);
            if (onBlur) onBlur();
        }, 150); // Delay để sự kiện click trên suggestion kịp xử lý
    };
    
    const SuggestionsPortal = () => createPortal(
        <ul
            ref={suggestionsRef}
            className={styles.suggestionsList}
            style={{
                top: `${dropdownPosition.top}px`,
                left: `${dropdownPosition.left}px`,
                width: `${dropdownPosition.width}px`,
            }}
        >
            {isLoading && <li className={styles.feedback}>Đang tải...</li>}
            {error && <li className={styles.feedback}>{error}</li>}
            {!isLoading && !error && suggestions.length === 0 && <li className={styles.feedback}>Không tìm thấy kết quả</li>}
            
            {!isLoading && !error && suggestions.map((product, index) => (
                <li 
                    key={product.id} 
                    className={index === activeIndex ? styles.activeSuggestion : ''}
                    onMouseDown={(e) => { e.preventDefault(); handleSuggestionClick(product); }} // Dùng onMouseDown để tránh xung đột với onBlur
                >
                    <strong>{product.id}</strong> - <span>{product.productName}</span>
                </li>
            ))}
        </ul>,
        document.body
    );

    return (
        <div className={styles.autocompleteContainer} ref={containerRef}>
            <input
                ref={inputRef}
                type="text"
                value={value}
                onChange={handleInputChange}
                onBlur={handleInputBlur}
                onKeyDown={handleKeyDown} // <-- MỚI: Gắn sự kiện bàn phím
                placeholder="Nhập Mã hàng..."
                onFocus={handleInputChange}
            />
            <FiChevronDown className={styles.arrowIcon} />
            {showSuggestions && <SuggestionsPortal />}
        </div>
    );
};

export default ProductAutocomplete;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Sidebar.jsx ---
// src/components/Sidebar.jsx

import React, { useState } from 'react';
// CẬP NHẬT: Thay đổi bộ icon cho phù hợp
import { FiHome, FiArchive, FiPlusCircle, FiMinusCircle, FiFileText, FiChevronsLeft, FiChevronsRight } from 'react-icons/fi';
import { NavLink } from 'react-router-dom';
import '../styles/AdminLayout.css';

const Sidebar = () => {
  const [collapsed, setCollapsed] = useState(false);

  return (
    <div className={collapsed ? "sidebar collapsed" : "sidebar"}>
      <div className="sidebar-header">
        <h2 className="logo">{collapsed ? "K" : "Kho PT Biomed"}</h2>
        <button className="toggle-btn" onClick={() => setCollapsed(!collapsed)}>
          {collapsed ? <FiChevronsRight /> : <FiChevronsLeft />}
        </button>
      </div>
      <ul className="menu-items">
        <li>
          <NavLink to="/">
            <FiHome className="menu-icon" />
            <span className="menu-text">Bảng điều khiển</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/products">
            <FiArchive className="menu-icon" />
            <span className="menu-text">Quản lý hàng hóa</span>
          </NavLink>
        </li>
        {/* CẬP NHẬT: Đổi icon thành FiPlusCircle */}
        <li>
          <NavLink to="/new-import">
            <FiPlusCircle className="menu-icon" />
            <span className="menu-text">Tạo Phiếu Nhập</span>
          </NavLink>
        </li>
        {/* CẬP NHẬT: Đổi icon thành FiMinusCircle */}
        <li>
          <NavLink to="/new-export">
            <FiMinusCircle className="menu-icon" />
            <span className="menu-text">Tạo Phiếu Xuất</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/imports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiếu Nhập</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/exports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiếu Xuất</span>
          </NavLink>
        </li>
      </ul>
    </div>
  );
};

export default Sidebar;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Spinner.jsx ---
// src/components/Spinner.jsx
import React from 'react';
import styles from './Spinner.module.css'; // Cập nhật import

const Spinner = ({ forTable = false }) => {
    if (forTable) {
        return (
            <tr className={styles.spinnerTableRow}>
                <td colSpan="100%">
                    <div className={styles.spinner}></div>
                </td>
            </tr>
        );
    }

    return (
        <div className={styles.spinnerContainer}>
            <div className={styles.spinner}></div>
        </div>
    );
};

export default Spinner;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Spinner.module.css ---
/* src/components/Spinner.module.css */
.spinnerContainer {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 40px;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    /* Light grey */
    border-top: 5px solid #007bff; /* Primary color */
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Dùng cho spinner bên trong bảng */
.spinnerTableRow td {
    text-align: center;
    padding: 40px;
    border: none;
}

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\StatusBadge.jsx ---
// src/components/StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
    let text = status;
    let className = `status-badge status-${status}`;

    switch (status) {
        case 'pending':
            text = 'Đang chờ';
            break;
        case 'completed':
            text = 'Hoàn thành';
            break;
        case 'cancelled':
            text = 'Đã hủy';
            break;
        case 'in_progress':
            text = 'Đang thực hiện';
            className = 'status-badge status-pending'; // Tái sử dụng style màu vàng
            break;
        case 'adjusted':
            text = 'Đã điều chỉnh';
            className = 'status-badge status-adjusted'; // Style màu tím mới
            break;
        default:
            text = status;
    }

    return <span className={className}>{text}</span>;
};

// <-- NÂNG CẤP: Bọc component trong React.memo để tối ưu hiệu năng,
// tránh việc re-render không cần thiết khi props không thay đổi.
export default React.memo(StatusBadge);


--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\StatusBadge.test.jsx ---
// src/components/StatusBadge.test.jsx

import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import StatusBadge from './StatusBadge';
import React from 'react';

// Nhóm các bài test cho component StatusBadge
describe('Component: StatusBadge', () => {

    it('hiển thị đúng text và class cho trạng thái "pending"', () => {
        // B1: Render component với props cần test
        render(<StatusBadge status="pending" />);
        
        // B2: Tìm element trong DOM ảo dựa trên nội dung text của nó
        const badgeElement = screen.getByText('Đang chờ');
        
        // B3: Kiểm tra (Assert) xem element có tồn tại không và có đúng class CSS không
        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-badge');
        expect(badgeElement).toHaveClass('status-pending');
    });

    it('hiển thị đúng text và class cho trạng thái "completed"', () => {
        render(<StatusBadge status="completed" />);
        const badgeElement = screen.getByText('Hoàn thành');
        
        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-completed');
    });

    it('hiển thị đúng text và class cho trạng thái "cancelled"', () => {
        render(<StatusBadge status="cancelled" />);
        const badgeElement = screen.getByText('Đã hủy');

        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-cancelled');
    });
    
    it('hiển thị đúng text và class cho trạng thái "in_progress"', () => {
        render(<StatusBadge status="in_progress" />);
        const badgeElement = screen.getByText('Đang thực hiện');

        expect(badgeElement).toBeInTheDocument();
        // Tái sử dụng style của pending
        expect(badgeElement).toHaveClass('status-pending');
    });
    
    it('hiển thị đúng text và class cho trạng thái "adjusted"', () => {
        render(<StatusBadge status="adjusted" />);
        const badgeElement = screen.getByText('Đã điều chỉnh');

        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-adjusted');
    });

    it('hiển thị chính giá trị status nếu không khớp với case nào', () => {
        const randomStatus = "unknown_status";
        render(<StatusBadge status={randomStatus} />);
        const badgeElement = screen.getByText(randomStatus);

        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass(`status-${randomStatus}`);
    });
});

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\TeamBadge.jsx ---
// src/components/TeamBadge.jsx
import React from 'react';

const TeamBadge = ({ team }) => {
  let className = 'team-badge';
  switch (team) {
    case 'MED':
      className += ' team-med';
      break;
    case 'BIO':
      className += ' team-bio';
      break;
    case 'Spare Part':
      className += ' team-sparepart';
      break;
    default:
      break;
  }

  return <span className={className}>{team}</span>;
};

// <-- NÂNG CẤP: Bọc component trong React.memo để tối ưu hiệu năng.
export default React.memo(TeamBadge);


--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\TempBadge.jsx ---
// src/components/TempBadge.jsx
import React from 'react';

const TempBadge = ({ temperature }) => {
  let className = 'temp-badge';
  const tempString = temperature?.toLowerCase() || '';

  if (tempString.includes('2') && tempString.includes('8')) {
    className += ' temp-cool'; // 2 -> 8°C
  } else if (tempString.includes('-15') || tempString.includes('-25')) {
    className += ' temp-frozen'; // -25 -> -15°C
  } else if (tempString.includes('phòng')) {
    className += ' temp-room'; // Nhiệt độ phòng
  } else {
    className += ' temp-other'; // Các loại khác
  }

  return <span className={className}>{temperature}</span>;
};

// <-- NÂNG CẤP: Bọc component trong React.memo để tối ưu hiệu năng.
export default React.memo(TempBadge);


--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewerLayout.jsx ---
// src/components/ViewerLayout.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import InventoryPage from '../pages/InventoryPage';
import InventorySummaryPage from '../pages/InventorySummaryPage';
import { useAuth } from '../hooks/useAuth';
import { useResponsive } from '../hooks/useResponsive'; // <-- THÊM DÒNG NÀY
import FloatingCalculator from './FloatingCalculator';
import { MdCalculate } from 'react-icons/md';

const ViewerLayout = () => {
  const { role: userRole } = useAuth();
  const isMobile = useResponsive(); // <-- SỬ DỤNG HOOK MỚI
  
  const canViewDetail = userRole === 'admin' || userRole === 'owner';
  const [viewMode, setViewMode] = useState('summary');
  const [isCalculatorVisible, setIsCalculatorVisible] = useState(false);
  
  const pageTitle = "Sổ Cái Tồn Kho";

  useEffect(() => {
    document.title = pageTitle;
  }, [pageTitle]);
  
  // Tự động chuyển về 'summary' nếu user không có quyền
  useEffect(() => {
    if (!canViewDetail) {
      setViewMode('summary');
    }
  }, [canViewDetail]);

  // --- LOGIC QUAN TRỌNG NHẤT ---
  // Nếu là di động, chỉ hiển thị chế độ tổng hợp
  if (isMobile) {
    return (
      <div style={{ padding: '10px' }}>
        <div className="page-header" style={{ marginBottom: '15px' }}>
          <h1>{pageTitle}</h1>
        </div>
        <InventorySummaryPage />
      </div>
    );
  }

  // --- Giao diện cho máy tính (giữ nguyên như cũ) ---
  return (
    <div style={{ padding: '20px' }}>
      {userRole === 'owner' && (
        <div style={{ marginBottom: '20px' }}>
            <Link to="/" className="btn-secondary" style={{ textDecoration: 'none' }}>
                &larr; Quay lại Trang Quản Trị
            </Link>
        </div>
      )}

      <div className="page-header" style={{ marginBottom: '20px' }}>
        <h1>{pageTitle}</h1>
      </div>

      {/* Nút chuyển đổi chế độ xem chỉ owner và admin mới thấy */}
      {canViewDetail && (
        <div className="view-toggle" style={{ marginBottom: '20px', display: 'flex', gap: '10px' }}>
          <button onClick={() => setViewMode('summary')} className={viewMode === 'summary' ? 'btn-primary' : 'btn-secondary'} style={{width: 'auto'}}>
            Xem Tổng Hợp
          </button>
          <button onClick={() => setViewMode('detail')} className={viewMode === 'detail' ? 'btn-primary' : 'btn-secondary'} style={{width: 'auto'}}>
            Xem Chi Tiết
          </button>
        </div>
      )}

      {/* Hiển thị component tương ứng với chế độ xem và quyền của user */}
      {(viewMode === 'detail' && canViewDetail) 
        ? <InventoryPage /> 
        : <InventorySummaryPage />
      }

      <button 
        className="floating-toggle-btn" 
        onClick={() => setIsCalculatorVisible(true)}
        title="Mở máy tính (Có thể dùng bàn phím)"
      >
        <MdCalculate />
      </button>

      {isCalculatorVisible && <FloatingCalculator onClose={() => setIsCalculatorVisible(false)} />}
    </div>
  );
};

export default ViewerLayout;

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewExportSlipModal.jsx ---
// src/components/ViewExportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from './StatusBadge';

const ViewExportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;
    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');
    const handlePrint = () => {
        window.print();
    };
    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area export-slip" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiết Phiếu Xuất Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiếu</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>Khách hàng</label><p><strong>{slip.customer}</strong></p></div>
                    <div><label>Ngày tạo</label>
                        <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Trạng thái</label><p><StatusBadge status={slip.status} /></p></div>
                    <div className="info-description"><label>Diễn giải</label><p><em>{slip.description || '(Không có)'}</em></p></div>
                </div>
                
 
                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiết hàng hóa</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>Mã hàng</th>
                                    <th>Tên hàng</th>
                                    <th>Số lô</th>
                                    <th>HSD</th>
                                    <th>ĐVT</th>
                                    <th>Quy cách</th>
                                    <th>SL xuất</th>
                                    <th>Nhiệt độ BQ</th>
                                    {hasNotes && <th>Ghi chú</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        <td>{item.quantityToExport || item.quantityExported}</td>
                                        <td>{item.storageTemp}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiếu</button>
                    <button type="button" onClick={onClose} className="btn-primary">Đóng</button>
                </div>
            </div>
        </div>
    );
};

export default React.memo(ViewExportSlipModal);

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewImportSlipModal.jsx ---
// src/components/ViewImportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from './StatusBadge';

const ViewImportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;
    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');
    const handlePrint = () => {
        window.print();
    };
    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area import-slip" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiết Phiếu Nhập Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiếu</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>Nhà cung cấp</label><p><strong>{slip.supplier}</strong></p></div>
                    <div><label>Ngày tạo</label>
                      <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Trạng thái</label><p><StatusBadge status={slip.status} /></p></div>
                    <div className="info-description"><label>Diễn giải</label><p><em>{slip.description || '(Không có)'}</em></p></div>
                </div>

                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiết hàng hóa</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>Mã hàng</th>
                                    <th>Tên hàng</th>
                                    <th>Số lô</th>
                                    <th>HSD</th>
                                    <th>Số lượng</th>
                                    <th>ĐVT</th>
                                    <th>Quy cách</th>
                                    {hasNotes && <th>Ghi chú</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.quantity}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiếu</button>
                    <button type="button" onClick={onClose} className="btn-primary">Đóng</button>
                </div>
            </div>
        </div>
    );
};

export default React.memo(ViewImportSlipModal);

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\context\UserContext.jsx ---
// src/context/UserContext.jsx
import React, { createContext, useState, useEffect, useContext } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth, db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import Spinner from '../components/Spinner'; // <-- THÊM IMPORT

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [userRole, setUserRole] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                const userDocRef = doc(db, 'users', currentUser.uid);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    setUserRole(userDocSnap.data().role);
                } else {
                    setUserRole(null);
                }
                setUser(currentUser);
            } else {
                setUser(null);
                setUserRole(null);
            }
            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    const value = {
        user,
        userRole,
        loading,
    };

    // Khi đang xác thực, hiển thị spinner toàn trang
    if (loading) {
        return <Spinner />;
    }

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\hooks\useAuth.js ---
// src/hooks/useAuth.js

import { useState, useEffect } from 'react';
import { auth } from '../firebaseConfig';
import { onAuthStateChanged } from 'firebase/auth';

export const useAuth = () => {
    const [user, setUser] = useState(null);
    const [role, setRole] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                // Lấy token chứa custom claims (vai trò) để xác thực quyền
                const idTokenResult = await currentUser.getIdTokenResult();
                setUser(currentUser);
                setRole(idTokenResult.claims.role || null); // Gán vai trò từ token
            } else {
                setUser(null);
                setRole(null);
            }
            setLoading(false);
        });

        // Dọn dẹp listener khi component unmount
        return () => unsubscribe();
    }, []);

    return { user, role, loading };
};

--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\hooks\useFirestorePagination.js ---
