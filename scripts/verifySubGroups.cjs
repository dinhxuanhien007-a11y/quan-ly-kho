// File: verifySubGroups.js
const path = require('path');
const admin = require('firebase-admin');

// --- C·∫§U H√åNH ---
const SERVICE_ACCOUNT_KEY_PATH = path.join(__dirname, 'serviceAccountKey.json');
const PRODUCTS_COLLECTION = 'products';
const LOTS_COLLECTION = 'inventory_lots';
// --- K·∫æT TH√öC C·∫§U H√åNH ---

console.log('--- B·∫Øt ƒë·∫ßu script KI·ªÇM TRA s·ª± ƒë·ªìng b·ªô "subGroup" ---');

// 1. Kh·ªüi t·∫°o Firebase Admin
try {
    const serviceAccount = require(SERVICE_ACCOUNT_KEY_PATH);
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    console.log('‚úÖ Kh·ªüi t·∫°o Firebase Admin th√†nh c√¥ng.');
} catch (error) {
    console.error('‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y ho·∫∑c file serviceAccountKey.json kh√¥ng h·ª£p l·ªá.');
    process.exit(1);
}

const db = admin.firestore();

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y script
async function verifySubGroups() {
    try {
        // 2. ƒê·ªçc to√†n b·ªô collection 'products' ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì tra c·ª©u
        console.log(`\n‚ñ∂Ô∏è ƒêang ƒë·ªçc d·ªØ li·ªáu g·ªëc t·ª´ collection "${PRODUCTS_COLLECTION}"...`);
        const productsSnapshot = await db.collection(PRODUCTS_COLLECTION).get();
        
        const productSubGroupMap = new Map();
        productsSnapshot.forEach(doc => {
            const productData = doc.data();
            if (productData.subGroup) {
                productSubGroupMap.set(doc.id, productData.subGroup);
            }
        });

        if (productSubGroupMap.size === 0) {
            console.error('\n‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ tr∆∞·ªùng "subGroup" trong collection "products".');
            return;
        }
        console.log(`‚úîÔ∏è ƒê√£ t·∫°o b·∫£n ƒë·ªì tra c·ª©u cho ${productSubGroupMap.size} s·∫£n ph·∫©m.`);

        // 3. L·∫•y to√†n b·ªô c√°c l√¥ h√†ng trong 'inventory_lots'
        console.log(`\n‚ñ∂Ô∏è ƒêang l·∫•y danh s√°ch t·∫•t c·∫£ c√°c l√¥ h√†ng t·ª´ collection "${LOTS_COLLECTION}"...`);
        const lotsSnapshot = await db.collection(LOTS_COLLECTION).get();

        if (lotsSnapshot.empty) {
            console.log('\n‚èπÔ∏è Kh√¥ng t√¨m th·∫•y l√¥ h√†ng n√†o trong kho. K·∫øt th√∫c script.');
            return;
        }
        console.log(`‚úîÔ∏è T√¨m th·∫•y t·ªïng c·ªông ${lotsSnapshot.size} l√¥ h√†ng ƒë·ªÉ ki·ªÉm tra.`);

        // 4. B·∫Øt ƒë·∫ßu qu√° tr√¨nh ki·ªÉm tra v√† b√°o c√°o
        console.log('\n‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu so s√°nh d·ªØ li·ªáu...');
        
        const discrepancies = [];

        for (const lotDoc of lotsSnapshot.docs) {
            const lotData = lotDoc.data();
            const lotId = lotDoc.id;
            const productId = lotData.productId;
            const currentSubGroup = lotData.subGroup;

            // T√¨m subGroup ch√≠nh x√°c t·ª´ b·∫£n ƒë·ªì
            const correctSubGroup = productSubGroupMap.get(productId);

            // So s√°nh
            if (correctSubGroup && currentSubGroup !== correctSubGroup) {
                discrepancies.push({
                    lotId: lotId,
                    productId: productId,
                    lotNumber: lotData.lotNumber || '(Kh√¥ng c√≥)',
                    currentSubGroup: currentSubGroup || '(Tr·ªëng)',
                    correctSubGroup: correctSubGroup
                });
            } else if (!correctSubGroup && currentSubGroup) {
                // Tr∆∞·ªùng h·ª£p l√¥ h√†ng c√≥ subGroup nh∆∞ng s·∫£n ph·∫©m g·ªëc l·∫°i kh√¥ng c√≥
                 discrepancies.push({
                    lotId: lotId,
                    productId: productId,
                    lotNumber: lotData.lotNumber || '(Kh√¥ng c√≥)',
                    currentSubGroup: currentSubGroup,
                    correctSubGroup: '(S·∫£n ph·∫©m g·ªëc kh√¥ng c√≥ subGroup)'
                });
            }
        }

        // 5. In k·∫øt qu·∫£
        if (discrepancies.length === 0) {
            console.log('\n‚úÖ TUY·ªÜT V·ªúI! T·∫•t c·∫£ l√¥ h√†ng ƒë·ªÅu c√≥ th√¥ng tin "subGroup" ch√≠nh x√°c.');
        } else {
            console.warn(`\n‚ö†Ô∏è PH√ÅT HI·ªÜN ${discrepancies.length} L√î H√ÄNG C√ì TH√îNG TIN "subGroup" B·ªä SAI L·ªÜCH:`);
            console.table(discrepancies);
            console.warn('\nüí° G·ª£i √Ω: B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script "syncSubGroups.js" ƒë·ªÉ kh·∫Øc ph·ª•c c√°c sai l·ªách n√†y.');
        }

    } catch (error) {
        console.error('\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:', error);
    }
}

// Ch·∫°y h√†m ch√≠nh
verifySubGroups();