// File: findKhac.js
const path = require('path');
const admin = require('firebase-admin');

// --- C·∫§U H√åNH ---
const SERVICE_ACCOUNT_KEY_PATH = path.join(__dirname, 'serviceAccountKey.json');
const COLLECTION_NAME = 'products';
const SUBGROUP_TO_FIND = 'KH√ÅC';
// --- K·∫æT TH√öC C·∫§U H√åNH ---

console.log(`--- B·∫Øt ƒë·∫ßu script t√¨m ki·∫øm s·∫£n ph·∫©m c√≥ subGroup l√† "${SUBGROUP_TO_FIND}" ---`);

// 1. Kh·ªüi t·∫°o Firebase Admin
try {
    const serviceAccount = require(SERVICE_ACCOUNT_KEY_PATH);
    // Ki·ªÉm tra xem app ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a ƒë·ªÉ tr√°nh l·ªói
    if (!admin.apps.length) {
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
    }
    console.log('‚úÖ Kh·ªüi t·∫°o Firebase Admin th√†nh c√¥ng.');
} catch (error) {
    console.error('‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y ho·∫∑c file serviceAccountKey.json kh√¥ng h·ª£p l·ªá.');
    process.exit(1);
}

const db = admin.firestore();

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y script
async function findProductsBySubGroup() {
    try {
        // 2. T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ subGroup tr√πng kh·ªõp
        console.log(`\n‚ñ∂Ô∏è ƒêang truy v·∫•n c√°c s·∫£n ph·∫©m trong collection "${COLLECTION_NAME}"...`);
        const productsRef = db.collection(COLLECTION_NAME);
        const q = productsRef.where('subGroup', '==', SUBGROUP_TO_FIND);
        
        const snapshot = await q.get();

        if (snapshot.empty) {
            console.log(`\n‚úÖ Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ subGroup l√† "${SUBGROUP_TO_FIND}".`);
            return;
        }

        const foundProducts = snapshot.docs.map(doc => ({
            productId: doc.id,
            productName: doc.data().productName || '(Kh√¥ng c√≥ t√™n)',
            currentSubGroup: doc.data().subGroup
        }));
        
        console.log(`\n‚úÖ ƒê√£ t√¨m th·∫•y ${foundProducts.length} s·∫£n ph·∫©m c√≥ subGroup l√† "${SUBGROUP_TO_FIND}":`);
        
        // In ra k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng b·∫£ng cho d·ªÖ nh√¨n
        console.table(foundProducts);

    } catch (error) {
        console.error('\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:', error);
        // G·ª£i √Ω n·∫øu l·ªói li√™n quan ƒë·∫øn index
        if (error.message.includes('requires an index')) {
            console.error('\nüí° G·ª£i √Ω: L·ªói n√†y th∆∞·ªùng do b·∫°n ch∆∞a t·∫°o ch·ªâ m·ª•c (index) trong Firestore. Vui l√≤ng truy c·∫≠p v√†o ƒë∆∞·ªùng link trong th√¥ng b√°o l·ªói (n·∫øu c√≥) ƒë·ªÉ t·∫°o ch·ªâ m·ª•c t·ª± ƒë·ªông, sau ƒë√≥ ch·ªù v√†i ph√∫t v√† ch·∫°y l·∫°i script.');
        }
    }
}

// Ch·∫°y h√†m ch√≠nh
findProductsBySubGroup();