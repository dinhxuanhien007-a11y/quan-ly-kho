// File: scripts/fixMissingLotInfo.js - S·ª≠a l·ªói d·ªØ li·ªáu b·ªã thi·∫øu trong inventory_lots (ƒê√£ th√™m diagnostic)

const admin = require('firebase-admin');
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n t·ªõi key l√† ch√≠nh x√°c
const serviceAccount = require('./serviceAccountKey.json'); 

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

const PRODUCTS_COLLECTION = 'products';
const LOTS_COLLECTION = 'inventory_lots'; 

const FIELD_TO_FIX = 'subGroup'; 

/**
 * H√†m ch√≠nh ƒë·ªÉ qu√©t, tra c·ª©u v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu.
 */
async function fixMissingSubGroupData() {
    console.log(`\n================================================================`);
    console.log(`| B·∫ÆT ƒê·∫¶U QU√Å TR√åNH S·ª¨A L·ªñI T·ª∞ ƒê·ªòNG FIELD: ${FIELD_TO_FIX} |`);
    console.log(`================================================================\n`);
    
    let lotsToFix = [];
    
    try {
        // 1. T·∫£i TO√ÄN B·ªò collection Lots v√† l·ªçc c·ª•c b·ªô c√°c l√¥ h√†ng b·ªã thi·∫øu 'subGroup'
        const snapshot = await db.collection(LOTS_COLLECTION).get();
        
        lotsToFix = snapshot.docs.map(doc => ({
            id: doc.id,
            productId: doc.data().productId,
            lotNumber: doc.data().lotNumber,
            data: doc.data()
        })).filter(lot => {
            const value = lot.data[FIELD_TO_FIX];
            return value === null || value === undefined || (typeof value === 'string' && value.trim() === '');
        });

        if (lotsToFix.length === 0) {
            console.log(`‚úÖ Tuy·ªát v·ªùi! Kh√¥ng t√¨m th·∫•y l√¥ h√†ng n√†o b·ªã thi·∫øu tr∆∞·ªùng '${FIELD_TO_FIX}'.`);
            return;
        }

        console.log(`ƒê√£ t√¨m th·∫•y ${lotsToFix.length} l√¥ h√†ng c·∫ßn s·ª≠a l·ªói (Missing ${FIELD_TO_FIX}).`);

    } catch (error) {
        console.error("L·ªñI KHI T·∫¢I V√Ä L·ªåC L√î H√ÄNG THI·∫æU:", error.message);
        return;
    }

    // 2. Tra c·ª©u th√¥ng tin 'subGroup' t·ª´ collection 'products'
    const productIds = [...new Set(lotsToFix.map(lot => lot.productId))];
    const productsMap = new Map(); 
    
    if (productIds.length > 0) {
        console.log(`\nƒêang tra c·ª©u th√¥ng tin S·∫£n ph·∫©m cho ${productIds.length} M√£ SP kh√°c nhau...`);
        
        const productsSnapshot = await db.collection(PRODUCTS_COLLECTION).get();
        productsSnapshot.forEach(doc => {
            const data = doc.data();
            // L∆ØU √ù: Ph·∫£i ƒë·∫£m b·∫£o 'productId' trong products ƒë∆∞·ª£c d√πng l√†m key trong map
            // Ch√∫ng ta √©p bu·ªôc t·∫•t c·∫£ productId v·ªÅ chu·ªói ƒë·ªÉ lo·∫°i tr·ª´ l·ªói ƒë·ªãnh d·∫°ng
            if (data.productId) { 
                const standardizedProductId = String(data.productId).trim();
                productsMap.set(standardizedProductId, data[FIELD_TO_FIX]);
            }
        });
    }

    // 3. Th·ª±c hi·ªán c·∫≠p nh·∫≠t l√¥ h√†ng v·ªõi logic ki·ªÉm tra m·∫°nh m·∫Ω h∆°n
    console.log(`\nB·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ${lotsToFix.length} l√¥ h√†ng...`);
    
    const batch = db.batch();
    let fixedCount = 0;
    
    lotsToFix.forEach(lot => {
        // √âp bu·ªôc productId c·ªßa l√¥ h√†ng v·ªÅ chu·ªói ƒë·ªÉ kh·ªõp v·ªõi productsMap
        const lotProductIdKey = String(lot.productId).trim(); 
        
        const productSubGroup = productsMap.get(lotProductIdKey);
        
        // Logic ki·ªÉm tra m·ªõi: Ch·ªâ c·∫ßn t·ªìn t·∫°i (kh√¥ng null/undefined)
        const existsInProduct = productSubGroup !== undefined && productSubGroup !== null; 

        if (existsInProduct) { 
            // √âp bu·ªôc gi√° tr·ªã v·ªÅ d·∫°ng String v√† trim ƒë·ªÉ chu·∫©n h√≥a
            const standardizedSubGroup = String(productSubGroup).trim(); 
            
            // Ki·ªÉm tra l·∫ßn cu·ªëi: ƒë·∫£m b·∫£o gi√° tr·ªã sau khi chu·∫©n h√≥a kh√¥ng r·ªóng.
            if (standardizedSubGroup.length > 0) {
                const lotRef = db.collection(LOTS_COLLECTION).doc(lot.id);
                
                const updateData = {
                    [FIELD_TO_FIX]: standardizedSubGroup
                };
                
                batch.update(lotRef, updateData);
                fixedCount++;
            } else {
                console.warn(`[L·ªñI D·ªÆ LI·ªÜU G·ªêC]: L√¥ ${lot.lotNumber} (M√£ SP: ${lot.productId}) kh√¥ng th·ªÉ s·ª≠a v√¨ 'subGroup' trong S·∫£n ph·∫©m g·ªëc l√† chu·ªói r·ªóng sau khi chu·∫©n h√≥a.`);
            }
        } else {
            // Tr∆∞·ªùng h·ª£p l·ªói KEY ho·∫∑c M√£ SP kh√¥ng t·ªìn t·∫°i
            console.error(`[L·ªñI KEY/KH√îNG T·ªíN T·∫†I] üö®: L√¥ ${lot.lotNumber} (M√£ SP: ${lot.productId}) kh√¥ng t√¨m th·∫•y trong productsMap.`);
            console.error(`-> KI·ªÇM TRA: M√£ SP '${lot.productId}' c√≥ t·ªìn t·∫°i ch√≠nh x√°c trong collection 'products' kh√¥ng?`);
        }
    });

    if (fixedCount > 0) {
        await batch.commit();
        console.log(`\n‚úÖ HO√ÄN T·∫§T! ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng ${fixedCount} l√¥ h√†ng b·ªã thi·∫øu '${FIELD_TO_FIX}'.`);
    } else {
        console.log("Kh√¥ng c√≥ l√¥ h√†ng n√†o ƒë∆∞·ª£c s·ª≠a. Vui l√≤ng ki·ªÉm tra l·ªói KEY ƒë∆∞·ª£c b√°o c√°o.");
    }
}

// Ch·∫°y h√†m ch√≠nh
fixMissingSubGroupData();