// File: diagnoseExpiry.js
const path = require('path');
const admin = require('firebase-admin');

// --- C·∫§U H√åNH ---
const SERVICE_ACCOUNT_KEY_PATH = path.join(__dirname, 'serviceAccountKey.json');
const PRODUCTS_COLLECTION = 'products';
const LOTS_COLLECTION = 'inventory_lots';
const SUMMARIES_COLLECTION = 'product_summaries';
// --- K·∫æT TH√öC C·∫§U H√åNH ---

console.log('--- B·∫Øt ƒë·∫ßu script ch·∫©n ƒëo√°n d·ªØ li·ªáu HSD ---');

// 1. Kh·ªüi t·∫°o Firebase Admin
try {
    const serviceAccount = require(SERVICE_ACCOUNT_KEY_PATH);
    if (!admin.apps.length) {
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
    }
    console.log('‚úÖ Kh·ªüi t·∫°o Firebase Admin th√†nh c√¥ng.');
} catch (error) {
    console.error('‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y ho·∫∑c file serviceAccountKey.json kh√¥ng h·ª£p l·ªá.');
    process.exit(1);
}

const db = admin.firestore();

// H√†m chuy·ªÉn ƒë·ªïi Timestamp sang ƒë·ªãnh d·∫°ng dd/mm/yyyy
const formatDate = (timestamp) => {
    if (!timestamp || !timestamp.toDate) return 'N/A';
    return timestamp.toDate().toLocaleDateString('vi-VN');
};

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y script
async function diagnoseExpiryData() {
    try {
        // 2. T√¨m t·∫•t c·∫£ c√°c l√¥ h√†ng ƒë√£ h·∫øt h·∫°n v√† c√≤n t·ªìn kho
        console.log(`\n‚ñ∂Ô∏è B∆∞·ªõc 1: T√¨m c√°c l√¥ h√†ng th·ª±c s·ª± ƒë√£ h·∫øt h·∫°n trong "${LOTS_COLLECTION}"...`);
        const lotsRef = db.collection(LOTS_COLLECTION);
        const expiredLotsQuery = lotsRef
            .where('expiryDate', '<', new Date())
            .where('quantityRemaining', '>', 0);
        
        const expiredLotsSnapshot = await expiredLotsQuery.get();

        if (expiredLotsSnapshot.empty) {
            console.log('\n‚úÖ KI·ªÇM TRA HO√ÄN T·∫§T: Kh√¥ng t√¨m th·∫•y l√¥ h√†ng n√†o ƒë√£ h·∫øt h·∫°n m√† v·∫´n c√≤n t·ªìn kho. D·ªØ li·ªáu c·ªßa b·∫°n c√≥ v·∫ª ch√≠nh x√°c.');
            return;
        }
        
        const expiredLots = expiredLotsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        console.log(`‚úîÔ∏è ƒê√£ t√¨m th·∫•y ${expiredLots.length} l√¥ h√†ng ƒë√£ h·∫øt h·∫°n v√† c√≤n t·ªìn kho.`);
        
        const productIdsWithExpiredLots = [...new Set(expiredLots.map(lot => lot.productId))];

        // 3. Ki·ªÉm tra c√°c document t∆∞∆°ng ·ª©ng trong product_summaries
        console.log(`\n‚ñ∂Ô∏è B∆∞·ªõc 2: Ki·ªÉm tra ch√©o v·ªõi collection "${SUMMARIES_COLLECTION}"...`);
        
        const summariesRef = db.collection(SUMMARIES_COLLECTION);
        const summariesSnapshot = await summariesRef.where(admin.firestore.FieldPath.documentId(), 'in', productIdsWithExpiredLots).get();

        const summariesMap = new Map();
        summariesSnapshot.forEach(doc => {
            summariesMap.set(doc.id, doc.data());
        });

        const discrepancies = [];

        for (const productId of productIdsWithExpiredLots) {
            const summaryData = summariesMap.get(productId);
            const nearestExpiredLot = expiredLots
                .filter(lot => lot.productId === productId)
                .sort((a, b) => a.expiryDate.toMillis() - b.expiryDate.toMillis())[0]; // T√¨m HSD c≈© nh·∫•t

            const nearestExpiryDateInSummary = summaryData ? summaryData.nearestExpiryDate : null;

            // N·∫øu HSD trong summary l√† null ho·∫∑c l√† m·ªôt ng√†y trong t∆∞∆°ng lai -> B√°o l·ªói
            if (!nearestExpiryDateInSummary || nearestExpiryDateInSummary.toMillis() > new Date().getTime()) {
                discrepancies.push({
                    productId: productId,
                    'HSD L√¥ H·∫øt H·∫°n (Th·ª±c t·∫ø)': formatDate(nearestExpiredLot.expiryDate),
                    'HSD G·∫ßn Nh·∫•t (Trong Summary)': formatDate(nearestExpiryDateInSummary),
                    'Ghi ch√∫': 'D·ªØ li·ªáu trong Summary B·ªä SAI. C·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫°i.'
                });
            }
        }
        
        // 4. In k·∫øt qu·∫£
        if (discrepancies.length === 0) {
            console.log('\n‚úÖ KI·ªÇM TRA HO√ÄN T·∫§T: D·ªØ li·ªáu "nearestExpiryDate" trong "product_summaries" c√≥ v·∫ª ch√≠nh x√°c. V·∫•n ƒë·ªÅ c√≥ th·ªÉ ph·ª©c t·∫°p h∆°n.');
        } else {
            console.warn(`\n‚ö†Ô∏è PH√ÅT HI·ªÜN ${discrepancies.length} S·∫¢N PH·∫®M C√ì D·ªÆ LI·ªÜU HSD B·ªä L·ªÜCH:`);
            console.table(discrepancies);
            console.warn('\nüí° K·∫øt lu·∫≠n: D·ªØ li·ªáu trong collection "product_summaries" c·ªßa b·∫°n ƒë√£ l·ªói th·ªùi. ƒêi·ªÅu n√†y gi·∫£i th√≠ch t·∫°i sao b·ªô l·ªçc kh√¥ng ho·∫°t ƒë·ªông. B·∫°n c·∫ßn ch·∫°y m·ªôt script ƒë·ªÉ ƒë·ªìng b·ªô l·∫°i d·ªØ li·ªáu n√†y.');
        }

    } catch (error) {
        console.error('\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:', error);
    }
}

// Ch·∫°y h√†m ch√≠nh
diagnoseExpiryData();