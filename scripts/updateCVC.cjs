// File: updateCVC.js
const path = require('path');
const admin = require('firebase-admin');

// --- C·∫§U H√åNH ---
const SERVICE_ACCOUNT_KEY_PATH = path.join(__dirname, 'serviceAccountKey.json');
const COLLECTION_NAME = 'products';
const MANUFACTURER_TO_FIND = 'Intra Special Catheters';
const NEW_SUBGROUP = 'CVC';
// --- K·∫æT TH√öC C·∫§U H√åNH ---

console.log(`--- B·∫Øt ƒë·∫ßu script c·∫≠p nh·∫≠t nh√≥m h√†ng cho h√£ng s·∫£n xu·∫•t: "${MANUFACTURER_TO_FIND}" ---`);

// 1. Kh·ªüi t·∫°o Firebase Admin
try {
    const serviceAccount = require(SERVICE_ACCOUNT_KEY_PATH);
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    console.log('‚úÖ Kh·ªüi t·∫°o Firebase Admin th√†nh c√¥ng.');
} catch (error) {
    console.error('‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng t√¨m th·∫•y ho·∫∑c file serviceAccountKey.json kh√¥ng h·ª£p l·ªá.');
    process.exit(1);
}

const db = admin.firestore();

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y script
async function updateProductsByManufacturer() {
    try {
        // 2. T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ h√£ng s·∫£n xu·∫•t tr√πng kh·ªõp
        console.log(`\n‚ñ∂Ô∏è ƒêang t√¨m ki·∫øm c√°c s·∫£n ph·∫©m c√≥ h√£ng s·∫£n xu·∫•t l√† "${MANUFACTURER_TO_FIND}"...`);
        const productsRef = db.collection(COLLECTION_NAME);
        const q = productsRef.where('manufacturer', '==', MANUFACTURER_TO_FIND);
        
        const snapshot = await q.get();

        if (snapshot.empty) {
            console.log('\n‚èπÔ∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p. Kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t. K·∫øt th√∫c script.');
            return;
        }

        const productsToUpdate = snapshot.docs;
        console.log(`‚úîÔ∏è ƒê√£ t√¨m th·∫•y ${productsToUpdate.length} s·∫£n ph·∫©m ph√π h·ª£p.`);

        // 3. Chu·∫©n b·ªã v√† th·ª±c thi c·∫≠p nh·∫≠t h√†ng lo·∫°t (Batched Write)
        console.log(`\n‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t tr∆∞·ªùng "subGroup" th√†nh "${NEW_SUBGROUP}"...`);
        
        // Firestore gi·ªõi h·∫°n 500 thao t√°c cho m·ªói batch
        const MAX_BATCH_SIZE = 500;
        let batch = db.batch();
        let operationCount = 0;
        let totalUpdated = 0;

        for (let i = 0; i < productsToUpdate.length; i++) {
            const productDoc = productsToUpdate[i];
            batch.update(productDoc.ref, { subGroup: NEW_SUBGROUP });
            operationCount++;

            // Khi batch ƒë·∫ßy ho·∫∑c ƒë√£ ƒë·∫øn s·∫£n ph·∫©m cu·ªëi c√πng, th·ª±c thi batch
            if (operationCount === MAX_BATCH_SIZE || i === productsToUpdate.length - 1) {
                await batch.commit();
                console.log(`   - ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng ${operationCount} s·∫£n ph·∫©m.`);
                totalUpdated += operationCount;

                // T·∫°o batch m·ªõi cho l·∫ßn l·∫∑p ti·∫øp theo (n·∫øu c·∫ßn)
                batch = db.batch();
                operationCount = 0;
            }
        }

        console.log('\n‚úÖ C·∫¨P NH·∫¨T HO√ÄN T·∫§T!');
        console.log(`   - T·ªïng c·ªông ${totalUpdated} s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);

    } catch (error) {
        console.error('\n‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:', error);
        // G·ª£i √Ω n·∫øu l·ªói li√™n quan ƒë·∫øn index
        if (error.message.includes('requires an index')) {
            console.error('\nüí° G·ª£i √Ω: L·ªói n√†y th∆∞·ªùng do b·∫°n ch∆∞a t·∫°o ch·ªâ m·ª•c (index) trong Firestore. Vui l√≤ng truy c·∫≠p v√†o ƒë∆∞·ªùng link trong th√¥ng b√°o l·ªói (n·∫øu c√≥) ƒë·ªÉ t·∫°o ch·ªâ m·ª•c t·ª± ƒë·ªông, sau ƒë√≥ ch·ªù v√†i ph√∫t v√† ch·∫°y l·∫°i script.');
        }
    }
}

// Ch·∫°y h√†m ch√≠nh
updateProductsByManufacturer();