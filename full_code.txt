--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddAllowedUserModal.jsx ---


// src/components/AddAllowedUserModal.jsx
import React, { useState } from 'react';
import { getFunctions, httpsCallable } from "firebase/functions";
import { toast } from 'react-toastify';
import { z } from 'zod';

const allowlistSchema = z.object({
  email: z.string().email({ message: "Äá»‹a chá»‰ email khÃ´ng há»£p lá»‡." }),
});

const AddAllowedUserModal = ({ onClose, onUserAdded }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState('med');
  const [isSaving, setIsSaving] = useState(false);

  const handleAddUser = async () => {
    const validationResult = allowlistSchema.safeParse({ email });
    if (!validationResult.success) {
      toast.warn(validationResult.error.issues[0].message);
      return;
    }

    setIsSaving(true);
    try {
      const functions = getFunctions();
      const addUserFunc = httpsCallable(functions, 'addUserToAllowlist');
      await addUserFunc({ email: email.trim(), role: role });
      toast.success(`ÄÃ£ thÃªm ${email} vÃ o danh sÃ¡ch Ä‘Æ°á»£c phÃ©p!`);
      onUserAdded(); // Gá»i láº¡i hÃ m Ä‘á»ƒ lÃ m má»›i danh sÃ¡ch
      onClose(); // ÄÃ³ng modal
    } catch (error) {
      console.error("Lá»—i khi thÃªm user vÃ o allowlist:", error);
      toast.error(error.message);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '500px'}}>
        <h2>ThÃªm Email vÃ o Danh sÃ¡ch</h2>
        <div className="form-group">
            <label>Email cá»§a User (*)</label>
            <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} autoFocus />
        </div>
        <div className="form-group">
            <label>Chá»n vai trÃ² (*)</label>
            <select value={role} onChange={(e) => setRole(e.target.value)}>
                <option value="med">med</option>
                <option value="bio">bio</option>
                <option value="admin">admin</option>
            </select>
        </div>
        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
          <button type="button" onClick={handleAddUser} className="btn-primary" disabled={isSaving}>
            {isSaving ? 'Äang thÃªm...' : 'ThÃªm vÃ  Cáº¥p quyá»n'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default AddAllowedUserModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddNewLotModal.jsx ---


// src/components/AddNewLotModal.jsx
import React, { useState } from 'react';
import { formatExpiryDate, parseDateString } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import { z } from 'zod';

// --- Báº®T Äáº¦U THAY Äá»”I 1: Cáº­p nháº­t Schema Validation ---
// Cho phÃ©p chuá»—i rá»—ng, chá»‰ validate khi cÃ³ giÃ¡ trá»‹
const newLotSchema = z.object({
    expiryDate: z.string().refine(val => val.trim() === '' || parseDateString(val) !== null, {
        message: "Háº¡n Sá»­ Dá»¥ng khÃ´ng há»£p lá»‡ (cáº§n Ä‘á»‹nh dáº¡ng dd/mm/yyyy)."
    })
});
// --- Káº¾T THÃšC THAY Äá»”I 1 ---

const AddNewLotModal = ({ productId, productName, lotNumber, onClose, onSave }) => {
    const [expiryDate, setExpiryDate] = useState('');

    const handleSave = () => {
        const validationResult = newLotSchema.safeParse({ expiryDate });
        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        // Chuyá»ƒn chuá»—i rá»—ng vá» cho component cha xá»­ lÃ½
        onSave(expiryDate);
        onClose();
    };

    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSave();
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <h2>Khai BÃ¡o LÃ´ HÃ ng Má»›i</h2>
                <div className="form-group">
                    <label>MÃ£ hÃ ng</label>
                    <input type="text" value={`${productId} - ${productName}`} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Sá»‘ lÃ´ má»›i</label>
                    <input type="text" value={lotNumber} readOnly disabled />
                </div>
                <div className="form-group">
                    {/* --- Báº®T Äáº¦U THAY Äá»”I 2: Bá» dáº¥u (*) á»Ÿ nhÃ£n --- */}
                    <label>Háº¡n Sá»­ Dá»¥ng (dd/mm/yyyy)</label>
                    {/* --- Káº¾T THÃšC THAY Äá»”I 2 --- */}
                    <input
                        type="text"
                        value={expiryDate}
                        onChange={(e) => setExpiryDate(e.target.value)}
                        onBlur={handleExpiryDateBlur}
                        onKeyDown={handleKeyDown}
                        placeholder="Nháº­p HSD cho lÃ´ má»›i..."
                        autoFocus
                    />
                </div>
                
                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                    <button type="button" onClick={handleSave} className="btn-primary">XÃ¡c nháº­n</button>
                </div>
            </div>
        </div>
    );
};

export default AddNewLotModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddNewProductAndLotModal.jsx ---


// src/components/AddNewProductAndLotModal.jsx

import React, { useState, useRef } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod';
import { TEMP_OPTIONS, MANUFACTURER_OPTIONS, UNIT_OPTIONS } from '../constants';
import { formatExpiryDate } from '../utils/dateUtils';
import { addProduct } from '../services/productService';

const productAndLotSchema = z.object({
  productName: z.string().min(1, { message: "TÃªn hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  lotNumber: z.string().min(1, { message: "Sá»‘ lÃ´ khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  unit: z.string().min(1, { message: "ÄÆ¡n vá»‹ tÃ­nh khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  team: z.string().min(1, { message: "Báº¡n pháº£i chá»n má»™t team." }),
});

const AddNewProductAndLotModal = ({ productId, onClose, onSave }) => {
    const [productName, setProductName] = useState('');
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('');
    const [isSaving, setIsSaving] = useState(false);
    const formRef = useRef(null);

    const handleSubmit = async (e) => {
        if (e) e.preventDefault();

        const formData = { productName, lotNumber, unit, team };
        const validationResult = productAndLotSchema.safeParse(formData);

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        setIsSaving(true);
        const newProductData = {
            productName, unit, packaging, storageTemp, manufacturer, team,
        };

        try {
            await addProduct(productId, newProductData);
            onSave({
                ...newProductData,
                productId,
                lotNumber,
                expiryDate,
                quantity: '',
                notes: '',
            });
            toast.success("Táº¡o sáº£n pháº©m vÃ  lÃ´ hÃ ng má»›i thÃ nh cÃ´ng!");
        } catch (error) {
            console.error("Lá»—i khi táº¡o sáº£n pháº©m má»›i: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi táº¡o sáº£n pháº©m.');
        } finally {
            setIsSaving(false);
        }
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{width: '600px'}}>
                <h2>Táº¡o Nhanh Sáº£n Pháº©m Má»›i</h2>
                <p>MÃ£ hÃ ng <strong>{productId}</strong> chÆ°a tá»“n táº¡i. Vui lÃ²ng cung cáº¥p thÃ´ng tin chi tiáº¿t.</p>
                
                <div className="modal-body">
                  <form ref={formRef} onSubmit={handleSubmit}>
                      <div className="form-group">
                          <label>MÃ£ hÃ ng (ID)</label>
                          <input type="text" value={productId} readOnly disabled />
                      </div>
                      <div className="form-row">
                          <div className="form-group">
                              <label>TÃªn hÃ ng (*)</label>
                              <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} autoFocus/>
                          </div>
                          <div className="form-group">
                              <label>Team (*)</label>
                              <select value={team} onChange={(e) => setTeam(e.target.value)}>
                                  <option value="" disabled>-- Chá»n team --</option>
                                  <option value="MED">MED</option>
                                  <option value="BIO">BIO</option>
                                  <option value="Spare Part">Spare Part</option>
                              </select>
                          </div>
                      </div>
                      <div className="form-row">
                          <div className="form-group">
                            <label>Sá»‘ lÃ´ (*)</label>
                            <input type="text" value={lotNumber} onChange={(e) => setLotNumber(e.target.value)} />
                        </div>
                         <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={(e) => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                     </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>ÄÆ¡n vá»‹ tÃ­nh (*)</label>
                            <input
                                type="text" // <-- THÃŠM type="text"
                                list="unit-options"
                                value={unit}
                                onChange={(e) => setUnit(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p ÄVT..."
                            />
                            <datalist id="unit-options">
                                {UNIT_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
                            <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
                            <input
                                type="text" // <-- THÃŠM type="text"
                                list="temp-options"
                                value={storageTemp}
                                onChange={(e) => setStorageTemp(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p nhiá»‡t Ä‘á»™..."
                            />
                            <datalist id="temp-options">
                                {TEMP_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>HÃ£ng sáº£n xuáº¥t</label>
                            <input
                                type="text" // <-- THÃŠM type="text"
                                list="manufacturer-options"
                                value={manufacturer}
                                onChange={(e) => setManufacturer(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p hÃ£ng SX..."
                            />
                            <datalist id="manufacturer-options">
                                {MANUFACTURER_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                    </div>
                  </form>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                    <button 
                        type="button" 
                        onClick={() => formRef.current.requestSubmit()}
                        className="btn-primary" 
                        disabled={isSaving}
                    >
                        {isSaving ? 'Äang lÆ°u...' : 'LÆ°u vÃ  Chá»n'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default AddNewProductAndLotModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddPartnerModal.jsx ---


// src/components/AddPartnerModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- BÆ¯á»šC 1: IMPORT ZOD
import { addPartner } from '../services/partnerService';
import { normalizeString, generateKeywords } from '../utils/stringUtils';

// <-- BÆ¯á»šC 2: Äá»ŠNH NGHÄ¨A SCHEMA -->
const partnerSchema = z.object({
  partnerId: z.string().trim().min(1, { message: "MÃ£ Äá»‘i tÃ¡c khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  partnerName: z.string().trim().min(1, { message: "TÃªn Äá»‘i tÃ¡c khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  partnerType: z.enum(['supplier', 'customer']),
});


const AddPartnerModal = ({ onClose, onPartnerAdded }) => {
    const [partnerId, setPartnerId] = useState('');
    const [partnerName, setPartnerName] = useState('');
    const [partnerType, setPartnerType] = useState('supplier');
    const [isSaving, setIsSaving] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        // <-- BÆ¯á»šC 3: Sá»¬ Dá»¤NG SCHEMA Äá»‚ XÃC THá»°C -->
        const validationResult = partnerSchema.safeParse({
            partnerId: partnerId,
            partnerName: partnerName,
            partnerType: partnerType,
        });

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }

        setIsSaving(true);
        try {
            const { partnerId: validatedId, ...newPartnerData } = validationResult.data;
            // THÃŠM DÃ’NG NÃ€Y Äá»‚ Táº O TRÆ¯á»œNG CHUáº¨N HÃ“A
        newPartnerData.partnerNameNormalized = normalizeString(newPartnerData.partnerName);
        newPartnerData.searchKeywords = generateKeywords(newPartnerData.partnerName);
            await addPartner(validatedId.toUpperCase(), newPartnerData);
            
            toast.success('ThÃªm Ä‘á»‘i tÃ¡c má»›i thÃ nh cÃ´ng!');
            onPartnerAdded();
        } catch (error) {
            console.error("Lá»—i khi thÃªm Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi thÃªm Ä‘á»‘i tÃ¡c.');
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>ThÃªm Äá»‘i TÃ¡c Má»›i</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ Äá»‘i TÃ¡c (ID) (*)</label>
                        <input type="text" value={partnerId} onChange={(e) => setPartnerId(e.target.value)} required autoFocus/>
                    </div>
                    <div className="form-group">
                        <label>TÃªn Äá»‘i TÃ¡c (*)</label>
                        <input type="text" value={partnerName} onChange={(e) => setPartnerName(e.target.value)} required />
                    </div>
                    <div className="form-group">
                        <label>PhÃ¢n Loáº¡i</label>
                        <select value={partnerType} onChange={(e) => setPartnerType(e.target.value)}>
                            <option value="supplier">NhÃ  Cung Cáº¥p</option>
                            <option value="customer">KhÃ¡ch HÃ ng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddPartnerModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddProductModal.jsx ---


// src/components/AddProductModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod';
import { TEMP_OPTIONS, MANUFACTURER_OPTIONS, UNIT_OPTIONS } from '../constants';

// Import hÃ m service thay vÃ¬ cÃ¡c hÃ m cá»§a firestore
import { addProduct } from '../services/productService';

const productSchema = z.object({
  productId: z.string().min(1, { message: 'MÃ£ hÃ ng (ID) khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.' }),
  productName: z.string().min(1, { message: 'TÃªn hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.' }),
  unit: z.string().min(1, { message: 'ÄÆ¡n vá»‹ tÃ­nh khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.' }),
  packaging: z.string().optional(),
  storageTemp: z.string().optional(),
  manufacturer: z.string().optional(),
  team: z.string(),
});

const AddProductModal = ({ onClose, onProductAdded }) => {
  const [productId, setProductId] = useState('');
  const [productName, setProductName] = useState('');
  const [unit, setUnit] = useState('');
  const [packaging, setPackaging] = useState('');
  const [storageTemp, setStorageTemp] = useState('');
  const [manufacturer, setManufacturer] = useState('');
  const [team, setTeam] = useState('MED');
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);

    const formData = {
      productId: productId.trim().toUpperCase(),
      productName: productName.trim(),
      unit: unit.trim(),
      packaging: packaging.trim(),
      storageTemp: storageTemp.trim(),
      manufacturer: manufacturer.trim(),
      team,
    };
    
    const validationResult = productSchema.safeParse(formData);

    if (!validationResult.success) {
      toast.warn(validationResult.error.issues[0].message);
      setIsSaving(false);
      return;
    }

    try {
      const { productId, ...newProductData } = validationResult.data;
      // Gá»i hÃ m service Ä‘á»ƒ thÃªm sáº£n pháº©m
      await addProduct(productId, newProductData);

      toast.success('ThÃªm sáº£n pháº©m má»›i thÃ nh cÃ´ng!');
      onProductAdded();
    } catch (error) {
      console.error("Lá»—i khi thÃªm sáº£n pháº©m: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi thÃªm sáº£n pháº©m.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>ThÃªm sáº£n pháº©m má»›i</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-row">
            <div className="form-group">
              <label>MÃ£ hÃ ng (ID) (*)</label>
              <input type="text" value={productId} onChange={(e) => setProductId(e.target.value.toUpperCase())} autoFocus />
            </div>
            <div className="form-group">
              <label>TÃªn hÃ ng (*)</label>
              <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>ÄÆ¡n vá»‹ tÃ­nh (*)</label>
              <input
                list="unit-options-add"
                value={unit}
                onChange={(e) => setUnit(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p ÄVT..."
              />
              <datalist id="unit-options-add">
                {UNIT_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
              <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
              <input
                list="temp-options-add"
                value={storageTemp}
                onChange={(e) => setStorageTemp(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p nhiá»‡t Ä‘á»™..."
              />
              <datalist id="temp-options-add">
                  {TEMP_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>HÃ£ng sáº£n xuáº¥t</label>
              <input
                list="manufacturer-options-add"
                value={manufacturer}
                onChange={(e) => setManufacturer(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p hÃ£ng SX..."
              />
              <datalist id="manufacturer-options-add">
                  {MANUFACTURER_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select value={team} onChange={(e) => setTeam(e.target.value)}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Äang lÆ°u...' : 'LÆ°u'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProductModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddUnlistedItemModal.jsx ---


// src/components/AddUnlistedItemModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import { z } from 'zod';

// Äá»‹nh nghÄ©a Schema vá»›i logic .refine() Ä‘Ã£ Ä‘Æ°á»£c sá»­a lá»—i
const unlistedItemSchema = z.object({
    productId: z.string().trim().min(1, "MÃ£ hÃ ng lÃ  báº¯t buá»™c."),
    productName: z.string(), 
    countedQty: z.preprocess(
        val => Number(val),
        z.number({ required_error: "Sá»‘ lÆ°á»£ng Ä‘áº¿m lÃ  báº¯t buá»™c.", invalid_type_error: "Sá»‘ lÆ°á»£ng Ä‘áº¿m pháº£i lÃ  má»™t con sá»‘." })
         .gt(0, "Sá»‘ lÆ°á»£ng Ä‘áº¿m pháº£i lá»›n hÆ¡n 0.")
    )
}).refine((data, ctx) => { // <-- Sá»¬A Lá»–I 1: ThÃªm (data, ctx) Ä‘á»ƒ nháº­n context
    // Náº¿u isNewProduct lÃ  true (Ä‘Æ°á»£c truyá»n vÃ o context), thÃ¬ productName pháº£i cÃ³ giÃ¡ trá»‹
    if (ctx.isNewProduct) { // <-- Sá»¬A Lá»–I 2: Sá»­ dá»¥ng ctx.isNewProduct thay vÃ¬ this.isNewProduct
        return data.productName.trim().length > 0;
    }
    return true; // Náº¿u khÃ´ng pháº£i sáº£n pháº©m má»›i thÃ¬ khÃ´ng cáº§n check
}, {
    message: "TÃªn hÃ ng lÃ  báº¯t buá»™c Ä‘á»‘i vá»›i sáº£n pháº©m má»›i.",
    path: ["productName"], // BÃ¡o lá»—i cho trÆ°á»ng productName
});

const AddUnlistedItemModal = ({ onClose, onAddItem }) => {
    const [productId, setProductId] = useState('');
    const [productName, setProductName] = useState('');
    const [isNewProduct, setIsNewProduct] = useState(false);
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [countedQty, setCountedQty] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('');

    const handleProductSearch = async () => {
        if (!productId) return;
        const productRef = doc(db, 'products', productId.trim().toUpperCase());
        const productSnap = await getDoc(productRef);

        if (productSnap.exists()) {
            const data = productSnap.data();
            setProductName(data.productName);
            setUnit(data.unit);
            setPackaging(data.packaging);
            setStorageTemp(data.storageTemp || '');
            setManufacturer(data.manufacturer || '');
            setTeam(data.team || '');
            setIsNewProduct(false);
        } else {
            setProductName('');
            setUnit('');
            setPackaging('');
            setStorageTemp('');
            setManufacturer('');
            setTeam('');
            setIsNewProduct(true);
            toast.warn("MÃ£ hÃ ng nÃ y khÃ´ng tá»“n táº¡i. Vui lÃ²ng nháº­p TÃªn hÃ ng má»›i.");
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // Sá»­ dá»¥ng schema Ä‘á»ƒ xÃ¡c thá»±c
        const validationResult = unlistedItemSchema.safeParse({
            productId: productId,
            productName: productName,
            countedQty: countedQty,
        }, {
            // Truyá»n tráº¡ng thÃ¡i isNewProduct vÃ o context cá»§a Zod
            context: { isNewProduct }
        });

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        onAddItem({
            productId: validationResult.data.productId.trim().toUpperCase(),
            productName: productName,
            lotNumber: lotNumber.trim() || 'N/A',
            expiryDate: expiryDate,
            unit: unit,
            packaging: packaging,
            systemQty: 0,
            countedQty: validationResult.data.countedQty,
            lotId: `new_${validationResult.data.productId.trim().toUpperCase()}_${lotNumber.trim() || Date.now()}`,
            isNew: true,
            storageTemp: storageTemp,
            manufacturer: manufacturer,
            team: team,
        });
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>ThÃªm HÃ ng NgoÃ i Danh SÃ¡ch</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ hÃ ng (*)</label>
                        <input type="text" value={productId} onChange={e => setProductId(e.target.value)} onBlur={handleProductSearch} required autoFocus />
                    </div>
                    <div className="form-group">
                        <label>TÃªn hÃ ng {isNewProduct && '(*)'}</label>
                        <input type="text" value={productName} onChange={e => setProductName(e.target.value)} readOnly={!isNewProduct} required={isNewProduct} />
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Sá»‘ lÃ´</label>
                            <input type="text" value={lotNumber} onChange={e => setLotNumber(e.target.value)} />
                        </div>
                        <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={e => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                    </div>
                    <div className="form-group">
                        <label>Sá»‘ lÆ°á»£ng Ä‘áº¿m thá»±c táº¿ (*)</label>
                        <input type="number" value={countedQty} onChange={e => setCountedQty(e.target.value)} required />
                    </div>
                    
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                        <button type="submit" className="btn-primary">ThÃªm vÃ o Phiáº¿u</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddUnlistedItemModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AddUserModal.jsx ---


// src/components/AddUserModal.jsx

import React, { useState } from 'react';
import { getFunctions, httpsCallable } from "firebase/functions";
import { toast } from 'react-toastify';
import { z } from 'zod';

const inviteSchema = z.object({
  email: z.string().email({ message: "Äá»‹a chá»‰ email khÃ´ng há»£p lá»‡." }),
});

const AddUserModal = ({ onClose, onUserAdded }) => {
  const [email, setEmail] = useState('');
  const [role, setRole] = useState('med');
  const [isSaving, setIsSaving] = useState(false);

  // Má»šI: State Ä‘á»ƒ lÆ°u trá»¯ link sau khi táº¡o thÃ nh cÃ´ng
  const [generatedLink, setGeneratedLink] = useState(null);

  const handleInvite = async () => {
    const validationResult = inviteSchema.safeParse({ email });
    if (!validationResult.success) {
      toast.warn(validationResult.error.issues[0].message);
      return;
    }

    setIsSaving(true);
    try {
      const functions = getFunctions();
      const inviteUser = httpsCallable(functions, 'inviteUser');
      
      const result = await inviteUser({ 
        email: email.trim(), 
        role: role 
      });

      if (result.data.success) {
        toast.success("Táº¡o user vÃ  link má»i thÃ nh cÃ´ng!");
        setGeneratedLink(result.data.link); // LÆ°u link Ä‘á»ƒ hiá»ƒn thá»‹
      }
    } catch (error) {
      console.error("Lá»—i khi gá»i Cloud Function: ", error);
      toast.error(error.message);
      setIsSaving(false);
    }
    // KhÃ´ng táº¯t isSaving á»Ÿ Ä‘Ã¢y Ä‘á»ƒ giá»¯ modal hiá»ƒn thá»‹ link
  };

  // Má»šI: HÃ m Ä‘á»ƒ Ä‘Ã³ng modal vÃ  refresh danh sÃ¡ch
  const handleCloseAndRefresh = () => {
      onUserAdded();
      onClose();
  }

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '500px'}}>

        {/* --- Giao diá»‡n hiá»ƒn thá»‹ link sau khi thÃ nh cÃ´ng --- */}
        {generatedLink ? (
          <div>
            <h2>Gá»­i lá»i má»i thÃ nh cÃ´ng!</h2>
            <p>Vui lÃ²ng sao chÃ©p vÃ  gá»­i Ä‘Æ°á»ng link dÆ°á»›i Ä‘Ã¢y cho ngÆ°á»i dÃ¹ng <strong>{email}</strong>. Link nÃ y sáº½ giÃºp há» tá»± Ä‘áº·t máº­t kháº©u Ä‘áº§u tiÃªn.</p>
            <div className="form-group">
                <textarea
                    readOnly
                    value={generatedLink}
                    rows={4}
                    style={{backgroundColor: '#f8f9fa', cursor: 'pointer'}}
                    onClick={(e) => e.target.select()}
                />
            </div>
            <div className="modal-actions">
                <button type="button" onClick={handleCloseAndRefresh} className="btn-primary">HoÃ n táº¥t</button>
            </div>
          </div>
        ) : (
        
        // --- Giao diá»‡n má»i user ban Ä‘áº§u ---
          <div>
            <h2>Má»i User Má»›i</h2>
            <div className="form-group">
                <label>Email cá»§a User (*)</label>
                <input 
                    type="email"
                    value={email} 
                    onChange={(e) => setEmail(e.target.value)} 
                    placeholder="Nháº­p email cá»§a ngÆ°á»i dÃ¹ng má»›i..."
                    autoFocus
                />
            </div>
            <div className="form-group">
                <label>Chá»n vai trÃ² (*)</label>
                <select value={role} onChange={(e) => setRole(e.target.value)}>
                    <option value="med">med</option>
                    <option value="bio">bio</option>
                    <option value="admin">admin</option>
                </select>
            </div>

            <div className="modal-actions">
              <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
              <button type="button" onClick={handleInvite} className="btn-primary" disabled={isSaving}>
                {isSaving ? 'Äang xá»­ lÃ½...' : 'Táº¡o vÃ  Láº¥y Link Má»i'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AddUserModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\AdminLayout.jsx ---


// src/components/AdminLayout.jsx

import React, { useState } from 'react';
import Navbar from './Navbar';
import { Routes, Route, useLocation } from 'react-router-dom';
import DashboardPage from '../pages/DashboardPage';
import ProductsPage from '../pages/ProductsPage';
import PartnersPage from '../pages/PartnersPage';
import NewImportPage from '../pages/NewImportPage';
import ImportListPage from '../pages/ImportListPage';
import NewExportPage from '../pages/NewExportPage';
import ExportListPage from '../pages/ExportListPage';
import StocktakeListPage from '../pages/StocktakeListPage';
import StocktakeSessionPage from '../pages/StocktakeSessionPage';
import LotTracePage from '../pages/LotTracePage';
import DataImportPage from '../pages/DataImportPage';
import UsersPage from '../pages/UsersPage';
import FloatingCalculator from './FloatingCalculator';
import { MdCalculate } from 'react-icons/md';
import ExpiryNotificationBanner from './ExpiryNotificationBanner';
import ImportSlipCounter from './ImportSlipCounter';
import ExportSlipCounter from './ExportSlipCounter';
import ViewerLayout from './ViewerLayout';
import { useAuth } from '../hooks/useAuth';
import FloatingToolsModal from './FloatingToolsModal'; 
import { FiGrid } from 'react-icons/fi';

const AdminLayout = () => {
  const location = useLocation();
  const { role } = useAuth();
  
  const [isToolsModalVisible, setIsToolsModalVisible] = useState(false);
  const [isCalculatorVisible, setIsCalculatorVisible] = useState(false);

  // HÃ€M Má»šI: Táº O CHá»¨C NÄ‚NG CHUYá»‚N Äá»”I (TOGGLE)
  const toggleToolsModal = () => {
    setIsToolsModalVisible(prev => !prev);
  };
  const toggleCalculator = () => {
    setIsCalculatorVisible(prev => !prev);
  };

  return (
    <div className="admin-layout-horizontal">
      <Navbar />
      <main className="main-content">
        {role === 'owner' && <ExpiryNotificationBanner />}
        {location.pathname === '/new-export' && <ExportSlipCounter />}
        {location.pathname === '/new-import' && <ImportSlipCounter />}

        <Routes>
          <Route path="/view" element={<ViewerLayout />} />
          <Route path="/" element={<DashboardPage />} />
          <Route path="/products" element={<ProductsPage />} />
          <Route path="/partners" element={<PartnersPage />} />
          <Route path="/new-import" element={<NewImportPage />} />
          <Route path="/new-export" element={<NewExportPage />} />
          <Route path="/imports" element={<ImportListPage />} />
          <Route path="/exports" element={<ExportListPage />} />
          <Route path="/stocktakes" element={<StocktakeListPage />} />
          <Route path="/stocktakes/:sessionId" element={<StocktakeSessionPage />} />
          <Route path="/lot-trace" element={<LotTracePage />} />
          <Route path="/import-data" element={<DataImportPage />} />
          <Route path="/users" element={<UsersPage />} />
        </Routes>
      </main>
      
      {role === 'owner' ? (
        <button 
          className="floating-toggle-btn" 
          onClick={toggleToolsModal} // Sá»¬ Dá»¤NG HÃ€M Má»šI
          title="Má»Ÿ cÃ´ng cá»¥ nhanh"
        >
          <FiGrid />
        </button>
      ) : (
        <button 
          className="floating-toggle-btn" 
          onClick={toggleCalculator} // Sá»¬ Dá»¤NG HÃ€M Má»šI
          title="Má»Ÿ mÃ¡y tÃ­nh (CÃ³ thá»ƒ dÃ¹ng bÃ n phÃ­m)"
        >
          <MdCalculate />
        </button>
      )}

      {isToolsModalVisible && role === 'owner' && (
        <FloatingToolsModal onClose={toggleToolsModal} />
      )}
      
      {isCalculatorVisible && role !== 'owner' && (
        <FloatingCalculator onClose={toggleCalculator} />
      )}
    </div>
  );
};

export default AdminLayout;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\Autocomplete.module.css ---


/* src/components/Autocomplete.module.css */
.autocompleteContainer {
    position: relative;
    width: 100%;
}

/* Má»šI: Style cho icon mÅ©i tÃªn */
.arrowIcon {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #888;
    pointer-events: none; /* Äá»ƒ cÃ³ thá»ƒ click xuyÃªn qua icon */
}

.suggestionsList {
    position: absolute; /* Sá»­a tá»« fixed thÃ nh absolute */
    top: 100%; /* Äáº·t ngay dÆ°á»›i input */
    left: 0;
    width: 100%;
    background-color: white;
    border: 1px solid #ccc;
    list-style: none;
    margin: 2px 0 0 0;
    padding: 0;
    max-height: 220px;
    overflow-y: auto;
    z-index: 9999;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    border-radius: 4px;
}

.suggestionsList li {
    padding: 10px 12px;
    cursor: pointer;
    font-size: 14px;
}

.suggestionsList li:hover {
    background-color: #f0f0f0;
}

.suggestionsList li span {
    color: #666;
    margin-left: 8px;
}

/* Má»šI: Style cho cÃ¡c dÃ²ng thÃ´ng bÃ¡o (táº£i, lá»—i...) */
.feedback {
    padding: 10px 12px;
    color: #888;
    font-style: italic;
    cursor: default !important;
    background-color: #fff !important;
}

/* ThÃªm vÃ o cuá»‘i file Autocomplete.module.css */
.activeSuggestion {
    background-color: #007bff !important;
    color: white;
}

.activeSuggestion span {
    color: #f0f0f0;
}




--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ConfirmationModal.jsx ---


// src/components/ConfirmationModal.jsx
import React from 'react'; // <-- ThÃªm import React
import { FiAlertTriangle } from 'react-icons/fi';

const ConfirmationModal = ({ isOpen, title, message, onConfirm, onCancel, confirmText = 'XÃ¡c nháº­n', cancelText = 'Há»§y' }) => {
    if (!isOpen) return null;

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                    <div style={{ color: '#f59e0b', fontSize: '32px' }}>
                         <FiAlertTriangle />
                    </div>
                    <div>
                        <h2 style={{ marginTop: 0, marginBottom: '10px' }}>{title}</h2>
                        <p style={{ margin: 0 }}>{message}</p>
                    </div>
                </div>
                <div className="modal-actions" style={{ marginTop: '25px' }}>
                    <button type="button" onClick={onCancel} className="btn-secondary">{cancelText}</button>
                    <button type="button" onClick={onConfirm} className="btn-primary" style={{ backgroundColor: '#dc3545' }}>{confirmText}</button>
                </div>
            </div>
        </div>
    );
};

// <-- Bá»ŒC COMPONENT TRONG React.memo Äá»‚ Tá»I Æ¯U HIá»†U NÄ‚NG -->
export default React.memo(ConfirmationModal);



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ConfirmationModal.test.jsx ---


// src/components/ConfirmationModal.test.jsx

import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import ConfirmationModal from './ConfirmationModal.jsx';
import React from 'react';

// NhÃ³m cÃ¡c bÃ i test cho ConfirmationModal
describe('Component: ConfirmationModal', () => {

    it('khÃ´ng render gÃ¬ cáº£ khi prop "isOpen" lÃ  false', () => {
        // Render modal vá»›i isOpen={false}
        render(
            <ConfirmationModal
                isOpen={false}
                title="Test Title"
                message="Test Message"
                onConfirm={() => {}}
                onCancel={() => {}}
            />
        );
        
        // Sá»­ dá»¥ng queryByText vÃ¬ nÃ³ sáº½ tráº£ vá» null náº¿u khÃ´ng tÃ¬m tháº¥y (thay vÃ¬ bÃ¡o lá»—i)
        const titleElement = screen.queryByText('Test Title');
        expect(titleElement).toBeNull();
    });

    it('hiá»ƒn thá»‹ Ä‘Ãºng title vÃ  message khi "isOpen" lÃ  true', () => {
        render(
            <ConfirmationModal
                isOpen={true}
                title="TiÃªu Ä‘á» xÃ¡c nháº­n"
                message="Báº¡n cÃ³ cháº¯c khÃ´ng?"
                onConfirm={() => {}}
                onCancel={() => {}}
            />
        );

        // Kiá»ƒm tra title vÃ  message cÃ³ xuáº¥t hiá»‡n trÃªn mÃ n hÃ¬nh khÃ´ng
        expect(screen.getByText('TiÃªu Ä‘á» xÃ¡c nháº­n')).toBeInTheDocument();
        expect(screen.getByText('Báº¡n cÃ³ cháº¯c khÃ´ng?')).toBeInTheDocument();
    });

    it('gá»i hÃ m onConfirm khi nÃºt xÃ¡c nháº­n Ä‘Æ°á»£c click', () => {
        // Táº¡o má»™t hÃ m giáº£ (mock function) cho onConfirm
        const handleConfirm = vi.fn();
        
        render(
            <ConfirmationModal
                isOpen={true}
                title="Test"
                message="Test"
                onConfirm={handleConfirm}
                onCancel={() => {}}
                confirmText="Äá»“ng Ã½"
            />
        );
        
        // TÃ¬m nÃºt xÃ¡c nháº­n dá»±a vÃ o text cá»§a nÃ³
        const confirmButton = screen.getByRole('button', { name: /Äá»“ng Ã½/i });
        
        // MÃ´ phá»ng hÃ nh Ä‘á»™ng click
        fireEvent.click(confirmButton);
        
        // Kiá»ƒm tra xem hÃ m giáº£ Ä‘Ã£ Ä‘Æ°á»£c gá»i Ä‘Ãºng 1 láº§n chÆ°a
        expect(handleConfirm).toHaveBeenCalledTimes(1);
    });

    it('gá»i hÃ m onCancel khi nÃºt há»§y Ä‘Æ°á»£c click', () => {
        // Táº¡o hÃ m giáº£ cho onCancel
        const handleCancel = vi.fn();
        
        render(
            <ConfirmationModal
                isOpen={true}
                title="Test"
                message="Test"
                onConfirm={() => {}}
                onCancel={handleCancel}
                cancelText="Bá» qua"
            />
        );

        const cancelButton = screen.getByRole('button', { name: /Bá» qua/i });
        fireEvent.click(cancelButton);
        
        expect(handleCancel).toHaveBeenCalledTimes(1);
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\CreateStocktakeModal.jsx ---


// src/components/CreateStocktakeModal.jsx
import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD

// <-- Äá»ŠNH NGHÄ¨A SCHEMA -->
const stocktakeSchema = z.object({
    sessionName: z.string().trim().min(1, { message: "Vui lÃ²ng Ä‘áº·t tÃªn cho phiÃªn kiá»ƒm kÃª." })
});

const CreateStocktakeModal = ({ onClose, onCreate, isCreating }) => {
    const [sessionName, setSessionName] = useState('');
    const [scope, setScope] = useState('all');

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // <-- Sá»¬ Dá»¤NG SCHEMA Äá»‚ XÃC THá»°C -->
        const validationResult = stocktakeSchema.safeParse({ sessionName });

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return;
        }
        
        onCreate({ sessionName, scope });
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Táº¡o PhiÃªn Kiá»ƒm KÃª Má»›i</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>TÃªn PhiÃªn Kiá»ƒm KÃª (*)</label>
                        <input
                            type="text"
                            value={sessionName}
                            onChange={(e) => setSessionName(e.target.value)}
                            placeholder="VÃ­ dá»¥: Kiá»ƒm kÃª cuá»‘i nÄƒm 2025"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Pháº¡m vi kiá»ƒm kÃª</label>
                        <select value={scope} onChange={(e) => setScope(e.target.value)}>
                            <option value="all">ToÃ n bá»™ kho</option>
                            <option value="MED">Chá»‰ Team MED</option>
                            <option value="BIO">Chá»‰ Team BIO</option>
                            <option value="Spare Part">Chá»‰ Team Spare Part</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isCreating}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isCreating}>
                            {isCreating ? 'Äang táº¡o...' : 'Báº¯t Äáº§u'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default CreateStocktakeModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\EditAllowedUserModal.jsx ---


// src/components/EditAllowedUserModal.jsx
import React, { useState } from 'react';
import { getFunctions, httpsCallable } from "firebase/functions";
import { toast } from 'react-toastify';

const EditAllowedUserModal = ({ onClose, onUserUpdated, userToEdit }) => {
  const [newRole, setNewRole] = useState(userToEdit.role);
  const [isSaving, setIsSaving] = useState(false);

  const handleUpdate = async () => {
    if (newRole === userToEdit.role) {
        onClose();
        return;
    }
    setIsSaving(true);
    try {
      const functions = getFunctions();
      const updateRoleFunc = httpsCallable(functions, 'updateAllowlistRole');
      await updateRoleFunc({ email: userToEdit.email, newRole: newRole });
      toast.success(`ÄÃ£ cáº­p nháº­t vai trÃ² cho ${userToEdit.email}!`);
      onUserUpdated();
      onClose();
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t vai trÃ²:", error);
      toast.error(error.message);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '500px'}}>
        <h2>Chá»‰nh sá»­a vai trÃ²</h2>
        <div className="form-group">
            <label>Email cá»§a User</label>
            <input type="email" value={userToEdit.email} readOnly disabled />
        </div>
        <div className="form-group">
            <label>Chá»n vai trÃ² má»›i (*)</label>
            <select value={newRole} onChange={(e) => setNewRole(e.target.value)}>
                <option value="med">med</option>
                <option value="bio">bio</option>
                <option value="admin">admin</option>
            </select>
        </div>
        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
          <button type="button" onClick={handleUpdate} className="btn-primary" disabled={isSaving}>
            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditAllowedUserModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\EditExportSlipModal.jsx ---


import React, { useState } from 'react';
import { FiXCircle } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { z } from 'zod';

const exportItemSchema = z.object({
  quantityToExport: z.preprocess(
      val => Number(String(val).trim()),
      z.number({ invalid_type_error: "Sá»‘ lÆ°á»£ng xuáº¥t pháº£i lÃ  má»™t con sá»‘." })
       .gt(0, { message: "Sá»‘ lÆ°á»£ng xuáº¥t pháº£i lá»›n hÆ¡n 0." })
  ),
  productId: z.string(),
  lotNumber: z.string(),
});

const EditExportSlipModal = ({ slip, onClose, onSave }) => {
    const [slipData, setSlipData] = useState({ ...slip });

    const dateToInputValue = (dateStr) => {
        if (!dateStr || dateStr.split('/').length !== 3) return '';
        const [day, month, year] = dateStr.split('/');
        return `${year}-${month}-${day}`;
    };

    const handleInfoChange = (field, value) => {
        let finalValue = value;
        if (field === 'exportDate') {
            const [year, month, day] = value.split('-');
            finalValue = `${day}/${month}/${year}`;
        }
        setSlipData(prev => ({ ...prev, [field]: finalValue }));
    };

    const handleItemChange = (index, field, value) => {
        const updatedItems = [...slipData.items];
        if (field === 'quantityToExport') {
            const numericValue = Number(value);
            const originalExportedQty = slip.items[index].quantityToExport || slip.items[index].quantityExported;
            const availableStock = updatedItems[index].quantityRemaining + originalExportedQty;
            
            if (numericValue < 0) return;

            if (numericValue > availableStock) {
                toast.warn(`Sá»‘ lÆ°á»£ng xuáº¥t (${numericValue}) khÃ´ng thá»ƒ vÆ°á»£t quÃ¡ tá»“n kho hiá»‡n cÃ³ (${availableStock}).`);
                updatedItems[index][field] = availableStock;
            } else {
                updatedItems[index][field] = value;
            }
        } else {
            updatedItems[index][field] = value;
        }
        
        setSlipData({ ...slipData, items: updatedItems });
    };

    // === ÄÃƒ DI CHUYá»‚N RA NGOÃ€I ÄÃšNG Vá»Š TRÃ ===
    const removeRow = (indexToRemove) => {
        const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
        setSlipData({ ...slipData, items: newItems });
    };

    // === ÄÃƒ DI CHUYá»‚N RA NGOÃ€I ÄÃšNG Vá»Š TRÃ ===
    const handleSaveChanges = () => {
        const itemsToValidate = slipData.items.filter(item => item.productId && Number(item.quantityToExport) > 0);
        
        if (itemsToValidate.length === 0) {
            toast.warn("Phiáº¿u xuáº¥t pháº£i cÃ³ Ã­t nháº¥t má»™t máº·t hÃ ng vá»›i sá»‘ lÆ°á»£ng lá»›n hÆ¡n 0.");
            onSave({ ...slipData, items: [] });
            return;
        }

        for (let i = 0; i < itemsToValidate.length; i++) {
            const item = itemsToValidate[i];
            const validationResult = exportItemSchema.safeParse(item);
            if (!validationResult.success) {
                const originalIndex = slipData.items.findIndex(originalItem => originalItem.id === item.id);
                const errorMessage = `Lá»—i á»Ÿ dÃ²ng ${originalIndex + 1} (MÃ£: ${item.productId}): ${validationResult.error.issues[0].message}`;
                toast.warn(errorMessage);
                return;
            }
        }

        const finalSlipData = {
            ...slipData,
            items: itemsToValidate
        };
        onSave(finalSlipData);
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chá»‰nh sá»­a Phiáº¿u Xuáº¥t Kho (ID: {slipData.id})</h2>

                <div className="form-section" style={{padding: '15px', marginTop: '10px'}}>
                    <div className="form-row">
                        <div className="form-group">
                            <label>NgÃ y xuáº¥t (*)</label>
                            <input 
                                type="date"
                                value={dateToInputValue(slipData.exportDate)}
                                onChange={(e) => handleInfoChange('exportDate', e.target.value)}
                                min={new Date().toISOString().split('T')[0]}
                            />
                        </div>
                        <div className="form-group">
                            <label>KhÃ¡ch hÃ ng</label>
                            <input type="text" value={slipData.customer} readOnly disabled />
                        </div>
                        <div className="form-group">
                            <label>Diá»…n giáº£i</label>
                            <textarea 
                                value={slipData.description || ''} 
                                onChange={(e) => handleInfoChange('description', e.target.value)}
                                rows={1}
                            />
                        </div>
                    </div>
                </div>

                <h3>Chi tiáº¿t hÃ ng hÃ³a</h3>
                <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 1.5fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
                    <div className="grid-header">MÃ£ hÃ ng</div>
                    <div className="grid-header">TÃªn hÃ ng</div>
                    <div className="grid-header">Sá»‘ lÃ´</div>
                    <div className="grid-header">ÄVT</div>
                    <div className="grid-header">Quy cÃ¡ch</div>
                    <div className="grid-header">SL Xuáº¥t (*)</div>
                    <div className="grid-header">Ghi chÃº</div>
                    <div className="grid-header">Thao tÃ¡c</div>

                    {slipData.items.map((item, index) => (
                        <React.Fragment key={item.id || index}>
                            <div className="grid-cell"><input type="text" value={item.productId} readOnly title="KhÃ´ng thá»ƒ sá»­a MÃ£ hÃ ng á»Ÿ Ä‘Ã¢y" /></div>
                            <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                            <div className="grid-cell"><input type="text" value={item.lotNumber} readOnly title="KhÃ´ng thá»ƒ sá»­a LÃ´ hÃ ng á»Ÿ Ä‘Ã¢y" /></div>
                            <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                            <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                            <div className="grid-cell">
                                <input 
                                    type="number"
                                    step="any"
                                    value={item.quantityToExport} 
                                    onChange={e => handleItemChange(index, 'quantityToExport', e.target.value)} 
                                />
                            </div>
                            <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
                            <div className="grid-cell">
                                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                                    <FiXCircle />
                                </button>
                            </div>
                        </React.Fragment>
                    ))}
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary">ÄÃ³ng</button>
                    <button type="button" onClick={handleSaveChanges} className="btn-primary">LÆ°u thay Ä‘á»•i</button>
                </div>
            </div>
        </div>
    );
};

export default EditExportSlipModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\EditImportSlipModal.jsx ---


// src/components/EditImportSlipModal.jsx
import React, { useState, useRef, useEffect } from 'react';
import { FiPlusCircle, FiXCircle } from 'react-icons/fi';
import { formatExpiryDate, parseDateString } from '../utils/dateUtils';
import { toast } from 'react-toastify'; 
import { z } from 'zod'; // <-- IMPORT ZOD

// <-- Äá»ŠNH NGHÄ¨A SCHEMA XÃC THá»°C -->
const importItemSchema = z.object({
  productId: z.string().trim().min(1, { message: "MÃ£ hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  productName: z.string(), // TÃªn hÃ ng lÃ  readOnly nÃªn khÃ´ng cáº§n check
  lotNumber: z.string().trim().min(1, { message: "Sá»‘ lÃ´ khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  expiryDate: z.string().refine(val => parseDateString(val) !== null, {
      message: "HSD cÃ³ Ä‘á»‹nh dáº¡ng khÃ´ng há»£p lá»‡ (cáº§n lÃ  dd/mm/yyyy)."
  }),
  quantity: z.preprocess(
      val => Number(String(val).trim()), // Chuyá»ƒn Ä‘á»•i giÃ¡ trá»‹ sang sá»‘
      z.number({ invalid_type_error: "Sá»‘ lÆ°á»£ng pháº£i lÃ  má»™t con sá»‘." })
       .gt(0, { message: "Sá»‘ lÆ°á»£ng pháº£i lá»›n hÆ¡n 0." })
  ),
  // CÃ¡c trÆ°á»ng khÃ¡c lÃ  tÃ¹y chá»n hoáº·c readOnly
  unit: z.string().optional(),
  packaging: z.string().optional(),
  notes: z.string().optional(),
  storageTemp: z.string().optional(),
  team: z.string().optional(),
});

const importSlipSchema = z.object({
    items: z.array(importItemSchema).min(1, { message: "Phiáº¿u nháº­p pháº£i cÃ³ Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡." })
});


const EditImportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });

  // === Báº®T Äáº¦U THÃŠM Má»šI ===
    const dateToInputValue = (dateStr) => {
        if (!dateStr || dateStr.split('/').length !== 3) return '';
        const [day, month, year] = dateStr.split('/');
        return `${year}-${month}-${day}`;
    };

    const handleInfoChange = (field, value) => {
        let finalValue = value;
        if (field === 'importDate') {
            const [year, month, day] = value.split('-');
            finalValue = `${day}/${month}/${year}`;
        }
        setSlipData(prev => ({ ...prev, [field]: finalValue }));
    };
    // === Káº¾T THÃšC THÃŠM Má»šI ===

  const lastInputRef = useRef(null);

  useEffect(() => {
    if (lastInputRef.current) {
        lastInputRef.current.focus();
    }
  }, [slipData.items.length]);

  const handleExpiryDateBlur = (index, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index].expiryDate = formatExpiryDate(value);
    setSlipData({ ...slipData, items: updatedItems });
  };

  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    // Äáº£m báº£o giÃ¡ trá»‹ lÃ  má»™t sá»‘ há»£p lá»‡ trÆ°á»›c khi gÃ¡n
    if (field === 'quantity') {
        const numericValue = Number(value);
        updatedItems[index][field] = isNaN(numericValue) ? '' : value;
    } else {
        updatedItems[index][field] = value;
    }
    setSlipData({ ...slipData, items: updatedItems });
};

  const addNewRow = () => {
    const newItems = [
      ...slipData.items,
      {
        id: Date.now(),
        productId: '', productName: '', lotNumber: '', expiryDate: '',
        unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: ''
      }
    ];
    setSlipData({ ...slipData, items: newItems });
  };

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    // <-- Sá»¬ Dá»¤NG SCHEMA Äá»‚ XÃC THá»°C -->
    const itemsToValidate = slipData.items.filter(item => item.productId); // Chá»‰ validate nhá»¯ng dÃ²ng cÃ³ mÃ£ hÃ ng
    const validationResult = importSlipSchema.safeParse({ items: itemsToValidate });

    if (!validationResult.success) {
        const firstError = validationResult.error.issues[0];
        const errorPath = firstError.path; // vÃ­ dá»¥: ['items', 0, 'lotNumber']
        const errorIndex = errorPath[1];
        const errorMessage = `Lá»—i á»Ÿ DÃ²ng ${errorIndex + 1}: ${firstError.message}`;
        
        toast.warn(errorMessage);
        return;
    }

    // Náº¿u há»£p lá»‡, chá»‰ gá»­i Ä‘i dá»¯ liá»‡u Ä‘Ã£ Ä‘Æ°á»£c validate
    onSave({ ...slipData, items: validationResult.data.items });
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chá»‰nh sá»­a Phiáº¿u Nháº­p Kho (ID: {slipData.id})</h2>
        {/* === Báº®T Äáº¦U THÃŠM Má»šI === */}
            <div className="form-section" style={{padding: '15px', marginTop: '10px'}}>
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y nháº­p (*)</label>
                        <input 
                            type="date"
                            value={dateToInputValue(slipData.importDate)}
                            onChange={(e) => handleInfoChange('importDate', e.target.value)}
                            min={new Date().toISOString().split('T')[0]} // Cháº·n ngÃ y quÃ¡ khá»©
                        />
                    </div>
                    <div className="form-group">
                        <label>NhÃ  cung cáº¥p</label>
                        <input type="text" value={slipData.supplierName} readOnly disabled />
                    </div>
                    <div className="form-group">
                        <label>Diá»…n giáº£i</label>
                        <textarea 
                            value={slipData.description} 
                            onChange={(e) => handleInfoChange('description', e.target.value)}
                            rows={1}
                        />
                    </div>
                </div>
            </div>
            {/* === Káº¾T THÃšC THÃŠM Má»šI === */}
        <h3>Chi tiáº¿t hÃ ng hÃ³a</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          <div className="grid-header">MÃ£ hÃ ng (*)</div>
          <div className="grid-header">TÃªn hÃ ng</div>
          <div className="grid-header">Sá»‘ lÃ´ (*)</div>
          <div className="grid-header">HSD (*)</div>
          <div className="grid-header">ÄVT</div>
          <div className="grid-header">Quy cÃ¡ch</div>
          <div className="grid-header">Sá»‘ lÆ°á»£ng (*)</div>
          <div className="grid-header">Ghi chÃº</div>
          <div className="grid-header">Thao tÃ¡c</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={index}>
              <div className="grid-cell">
                <input 
                    type="text" 
                    value={item.productId} 
                    onChange={e => handleItemChange(index, 'productId', e.target.value)} 
                    ref={index === slipData.items.length - 1 ? lastInputRef : null}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} onChange={e => handleItemChange(index, 'lotNumber', e.target.value)} /></div>
              <div className="grid-cell">
                <input 
                    type="text" 
                    placeholder="dd/mm/yyyy" 
                    value={item.expiryDate} 
                    onChange={e => handleItemChange(index, 'expiryDate', e.target.value)} 
                    onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell">
    <input
        type="text" // THAY Äá»”I: Sá»­ dá»¥ng type="text"
        inputMode="numeric" // THÃŠM: Gá»£i Ã½ bÃ n phÃ­m sá»‘ trÃªn di Ä‘á»™ng
        value={item.quantity}
        onChange={e => {
            const value = e.target.value;
            // THAY Äá»”I: Kiá»ƒm tra Ä‘á»ƒ cho phÃ©p cáº£ sá»‘ nguyÃªn vÃ  sá»‘ tháº­p phÃ¢n
            if (/^\d*\.?\d*$/.test(value) || value === '') {
                handleItemChange(index, 'quantity', value);
            }
        }}
    />
</div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <button type="button" onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>
          <FiPlusCircle style={{ marginRight: '5px' }} />
          ThÃªm dÃ²ng
        </button>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">ÄÃ³ng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">LÆ°u thay Ä‘á»•i</button>
        </div>
      </div>
    </div>
  );
};

export default EditImportSlipModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\EditPartnerModal.jsx ---


// src/components/EditPartnerModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD
import { updatePartner } from '../services/partnerService';
import { normalizeString } from '../utils/stringUtils'; // <-- THÃŠM DÃ’NG NÃ€Y

// <-- Äá»ŠNH NGHÄ¨A SCHEMA -->
const partnerSchema = z.object({
  partnerName: z.string().trim().min(1, { message: "TÃªn Äá»‘i tÃ¡c khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
  partnerType: z.enum(['supplier', 'customer']),
});


const EditPartnerModal = ({ onClose, onPartnerUpdated, partnerToEdit }) => {
    const [partnerData, setPartnerData] = useState({ ...partnerToEdit });
    const [isSaving, setIsSaving] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setPartnerData(prevData => ({ ...prevData, [name]: value }));
    };

    const handleSubmit = async (e) => {
    e.preventDefault();

    const validationResult = partnerSchema.safeParse({
        partnerName: partnerData.partnerName,
        partnerType: partnerData.partnerType,
    });

    if (!validationResult.success) {
        toast.warn(validationResult.error.issues[0].message);
        return;
    }

    setIsSaving(true);
    try {
        // Láº¥y dá»¯ liá»‡u Ä‘Ã£ Ä‘Æ°á»£c validate
        const dataToUpdate = validationResult.data;

        // THÃŠM DÃ’NG NÃ€Y: Táº¡o trÆ°á»ng Ä‘Ã£ Ä‘Æ°á»£c chuáº©n hÃ³a
        dataToUpdate.partnerNameNormalized = normalizeString(dataToUpdate.partnerName);
        dataToUpdate.searchKeywords = generateKeywords(dataToUpdate.partnerName);

        // Gá»­i dá»¯ liá»‡u má»›i (bao gá»“m cáº£ trÆ°á»ng Ä‘Ã£ chuáº©n hÃ³a) lÃªn service
        await updatePartner(partnerToEdit.id, dataToUpdate);

        toast.success('Cáº­p nháº­t thÃ´ng tin Ä‘á»‘i tÃ¡c thÃ nh cÃ´ng!');
        onPartnerUpdated();
    } catch (error) {
        console.error("Lá»—i khi cáº­p nháº­t Ä‘á»‘i tÃ¡c: ", error);
        toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
    } finally {
        setIsSaving(false);
    }
};

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Sá»­a ThÃ´ng Tin Äá»‘i TÃ¡c</h2>
                <p><strong>MÃ£ Äá»‘i TÃ¡c:</strong> {partnerToEdit.id}</p>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>TÃªn Äá»‘i TÃ¡c (*)</label>
                        <input type="text" name="partnerName" value={partnerData.partnerName || ''} onChange={handleChange} required autoFocus />
                    </div>
                    <div className="form-group">
                        <label>PhÃ¢n Loáº¡i</label>
                        <select name="partnerType" value={partnerData.partnerType} onChange={handleChange}>
                            <option value="supplier">NhÃ  Cung Cáº¥p</option>
                            <option value="customer">KhÃ¡ch HÃ ng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default EditPartnerModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\EditProductModal.jsx ---


// src/components/EditProductModal.jsx

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { z } from 'zod'; // <-- IMPORT ZOD
import { updateProduct } from '../services/productService';

// <-- Äá»ŠNH NGHÄ¨A SCHEMA -->
const productSchema = z.object({
  productName: z.string().trim().min(1, { message: 'TÃªn hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.' }),
  unit: z.string().trim().min(1, { message: 'ÄÆ¡n vá»‹ tÃ­nh khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.' }),
  packaging: z.string().optional(),
  storageTemp: z.string().optional(),
  manufacturer: z.string().optional(),
  team: z.string(),
});

const EditProductModal = ({ onClose, onProductUpdated, productToEdit }) => {
  const [productData, setProductData] = useState({ ...productToEdit });
  const [isSaving, setIsSaving] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProductData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // <-- Sá»¬ Dá»¤NG SCHEMA Äá»‚ XÃC THá»°C -->
    const validationResult = productSchema.safeParse(productData);
    
    if (!validationResult.success) {
        toast.warn(validationResult.error.issues[0].message);
        return;
    }

    setIsSaving(true);
    try {
      // Gá»­i dá»¯ liá»‡u Ä‘Ã£ Ä‘Æ°á»£c validate lÃªn service
      await updateProduct(productToEdit.id, validationResult.data);
      
      toast.success('Cáº­p nháº­t sáº£n pháº©m thÃ nh cÃ´ng!');
      onProductUpdated();
    } catch (error) { // <--- XÃ³a dáº¥u } thá»«a
  console.error("Lá»—i khi cáº­p nháº­t sáº£n pháº©m: ", error);
  toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t sáº£n pháº©m.');
} finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>Sá»­a thÃ´ng tin sáº£n pháº©m</h2>
        <p><strong>MÃ£ hÃ ng:</strong> {productToEdit.id}</p>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>TÃªn hÃ ng (*)</label>
            <input type="text" name="productName" value={productData.productName || ''} onChange={handleChange} required autoFocus />
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>ÄÆ¡n vá»‹ tÃ­nh (*)</label>
              <input type="text" name="unit" value={productData.unit || ''} onChange={handleChange} required />
            </div>
            <div className="form-group">
              <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
              <input type="text" name="packaging" value={productData.packaging || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
              <input type="text" name="storageTemp" value={productData.storageTemp || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>HÃ£ng sáº£n xuáº¥t</label>
              <input type="text" name="manufacturer" value={productData.manufacturer || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select name="team" value={productData.team} onChange={handleChange}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditProductModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\EditUserRoleModal.jsx ---


// src/components/EditUserRoleModal.jsx

import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const EditUserRoleModal = ({ user, onClose, onRoleUpdated }) => {
  // State Ä‘á»ƒ lÆ°u vai trÃ² má»›i Ä‘Æ°á»£c chá»n trong dropdown
  const [newRole, setNewRole] = useState(user.role);
  const [isSaving, setIsSaving] = useState(false);

  const handleSave = async () => {
    if (newRole === user.role) {
      onClose(); // Náº¿u khÃ´ng cÃ³ gÃ¬ thay Ä‘á»•i thÃ¬ chá»‰ cáº§n Ä‘Ã³ng láº¡i
      return;
    }
    setIsSaving(true);
    try {
      const userRef = doc(db, 'users', user.uid);
      await updateDoc(userRef, {
        role: newRole
      });
      toast.success(`Cáº­p nháº­t vai trÃ² cho user ${user.uid} thÃ nh cÃ´ng!`);
      onRoleUpdated(); // Gá»i hÃ m callback Ä‘á»ƒ táº£i láº¡i danh sÃ¡ch vÃ  Ä‘Ã³ng modal
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t vai trÃ²: ", error);
      toast.error("ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t vai trÃ².");
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{width: '450px'}}>
        <h2>Thay Ä‘á»•i vai trÃ²</h2>
        <div className="form-group">
            <label>User ID (UID)</label>
            <p><strong>{user.uid}</strong></p>
        </div>
        <div className="form-group">
            <label>Vai trÃ² hiá»‡n táº¡i</label>
            <p><em>{user.role}</em></p>
        </div>
        <div className="form-group">
            <label>Chá»n vai trÃ² má»›i</label>
            <select value={newRole} onChange={(e) => setNewRole(e.target.value)}>
                <option value="admin">admin</option>
                <option value="med">med</option>
                <option value="bio">bio</option>
                {/* KhÃ´ng cho phÃ©p Ä‘á»•i vai trÃ² thÃ nh 'owner' trá»±c tiáº¿p tá»« giao diá»‡n */}
            </select>
        </div>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
          <button type="button" onClick={handleSave} className="btn-primary" disabled={isSaving}>
            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditUserRoleModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ErrorBoundary.jsx ---


// src/components/ErrorBoundary.jsx
import React from 'react';
import * as Sentry from "@sentry/react"; // <-- THÃŠM DÃ’NG NÃ€Y

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error: error };
  }

  componentDidCatch(error, errorInfo) {
    // Thay vÃ¬ chá»‰ log ra console, chÃºng ta gá»­i lá»—i Ä‘áº¿n Sentry
    console.error("Uncaught error:", error, errorInfo);
    Sentry.captureException(error, { extra: errorInfo }); // <-- THAY Äá»”I á»ž ÄÃ‚Y
  }

  render() {
    if (this.state.hasError) {
      // Giao diá»‡n dá»± phÃ²ng khi cÃ³ lá»—i
      return (
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <h1>Ráº¥t tiáº¿c, Ä‘Ã£ cÃ³ lá»—i xáº£y ra.</h1>
          <p>ÄÃ£ cÃ³ sá»± cá»‘ khÃ´ng mong muá»‘n trong á»©ng dá»¥ng.</p>
          <p>Vui lÃ²ng thá»­ táº£i láº¡i trang hoáº·c liÃªn há»‡ vá»›i quáº£n trá»‹ viÃªn.</p>
          <details style={{ whiteSpace: 'pre-wrap', marginTop: '20px' }}>
            <summary>Chi tiáº¿t lá»—i (dÃ nh cho nhÃ  phÃ¡t triá»ƒn)</summary>
            {this.state.error && this.state.error.toString()}
          </details>
        </div>
      );
    }

    // Náº¿u khÃ´ng cÃ³ lá»—i, render cÃ¡c component con bÃ¬nh thÆ°á»ng
    return this.props.children;
  }
}

export default ErrorBoundary;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ExpiryNotificationBanner.jsx ---


// src/components/ExpiryNotificationBanner.jsx

import React, { useState, useEffect } from 'react';
import { db, auth } from '../firebaseConfig'; // Äáº£m báº£o báº¡n Ä‘Ã£ export auth
import { collection, query, where, onSnapshot } from 'firebase/firestore';
import { getFunctions, httpsCallable } from 'firebase/functions';
import { toast } from 'react-toastify';
import { FiAlertTriangle, FiCheckCircle } from 'react-icons/fi';
import '../styles/ExpiryNotificationBanner.css'; // Sáº½ táº¡o file CSS á»Ÿ bÆ°á»›c sau

const ExpiryNotificationBanner = () => {
    const [notifications, setNotifications] = useState([]);
    const [isProcessing, setIsProcessing] = useState(null); // LÆ°u ID cá»§a notif Ä‘ang xá»­ lÃ½

    useEffect(() => {
        // Chá»‰ láº¯ng nghe khi user Ä‘Ã£ Ä‘Äƒng nháº­p
        const unsubscribeAuth = auth.onAuthStateChanged(user => {
            if (user) {
                const q = query(collection(db, "notifications"), where("status", "==", "UNCONFIRMED"));
                
                const unsubscribeSnapshot = onSnapshot(q, (querySnapshot) => {
                    const activeNotifs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    setNotifications(activeNotifs);
                }, (error) => {
                    console.error("Lá»—i khi láº¯ng nghe cáº£nh bÃ¡o: ", error);
                    toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch cáº£nh bÃ¡o.");
                });

                // Tráº£ vá» hÃ m dá»n dáº¹p cho snapshot listener
                return () => unsubscribeSnapshot();
            } else {
                setNotifications([]); // XÃ³a cáº£nh bÃ¡o náº¿u user Ä‘Äƒng xuáº¥t
            }
        });

        // Tráº£ vá» hÃ m dá»n dáº¹p cho auth listener
        return () => unsubscribeAuth();
    }, []);

    const handleConfirm = async (notificationId, lotId) => {
        setIsProcessing(notificationId);
        const functions = getFunctions();
        const confirmAction = httpsCallable(functions, 'confirmExpiryNotification');
        
        try {
            const result = await confirmAction({ notificationId, lotId });
            toast.success(result.data.message || "ÄÃ£ xÃ¡c nháº­n xá»­ lÃ½ lÃ´ hÃ ng!");
            // Giao diá»‡n sáº½ tá»± Ä‘á»™ng cáº­p nháº­t nhá» onSnapshot, khÃ´ng cáº§n lÃ m gÃ¬ thÃªm
        } catch (error) {
            console.error("Lá»—i khi xÃ¡c nháº­n: ", error);
            toast.error(error.message);
        } finally {
            setIsProcessing(null); // HoÃ n táº¥t xá»­ lÃ½
        }
    };

    if (notifications.length === 0) {
        return null;
    }

    return (
        <div className="expiry-notification-banner">
            <div className="banner-header">
                <FiAlertTriangle />
                <h4>Cáº¢NH BÃO: CÃ“ {notifications.length} LÃ” HÃ€NG ÄÃƒ Háº¾T Háº N Sá»¬ Dá»¤NG!</h4>
            </div>
            <p>Vui lÃ²ng di dá»i cÃ¡c lÃ´ hÃ ng nÃ y vÃ o khu vá»±c hÃ ng háº¿t date vÃ  xÃ¡c nháº­n bÃªn dÆ°á»›i.</p>
            <ul className="notification-list">
                {notifications.map(notif => (
                    <li key={notif.id} className={isProcessing === notif.id ? 'processing' : ''}>
                        <span className="message">{notif.message}</span>
                        <button 
                            onClick={() => handleConfirm(notif.id, notif.lotId)}
                            disabled={isProcessing === notif.id}
                            className="confirm-button"
                        >
                            {isProcessing === notif.id ? 'Äang xá»­ lÃ½...' : <><FiCheckCircle /> XÃ¡c nháº­n</>}
                        </button>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default ExpiryNotificationBanner;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ExpiryPieChart.jsx ---


import React from 'react';
import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import Skeleton from 'react-loading-skeleton';

ChartJS.register(ArcElement, Tooltip, Legend);

const ExpiryPieChart = ({ chartData, isLoading }) => {
    const data = {
        labels: ['An toÃ n', 'Sáº¯p háº¿t háº¡n', 'ÄÃ£ háº¿t háº¡n'],
        datasets: [
            {
                label: 'Sá»‘ lÆ°á»£ng lÃ´',
                data: [chartData.safe, chartData.near_expiry, chartData.expired],
                backgroundColor: ['#28a745', '#ffc107', '#dc3545'],
                borderColor: ['#ffffff', '#ffffff', '#ffffff'],
                borderWidth: 2,
            },
        ],
    };

    const options = {
        responsive: true,
        plugins: {
            legend: { position: 'top' },
            title: { display: true, text: 'PhÃ¢n Bá»‘ Háº¡n Sá»­ Dá»¥ng Theo LÃ´' },
        },
    };

    return (
        <div className="card">
            {isLoading ? <Skeleton height={300} /> : <Pie options={options} data={data} />}
        </div>
    );
};

export default ExpiryPieChart;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ExportSlipCounter.jsx ---


// src/components/ExportSlipCounter.jsx

import React from 'react';
import useExportSlipStore from '../stores/exportSlipStore';

const ExportSlipCounter = () => {
    // Component nÃ y chá»‰ "Ä‘Äƒng kÃ½" láº¯ng nghe sá»± thay Ä‘á»•i cá»§a `items`
    const items = useExportSlipStore(state => state.items);
    
    // Chá»‰ láº¥y nhá»¯ng item Ä‘Ã£ cÃ³ thÃ´ng tin
    const itemCount = items.filter(item => item.productId).length;

    if (itemCount === 0) {
        return null; // KhÃ´ng hiá»ƒn thá»‹ gÃ¬ náº¿u chÆ°a cÃ³ item nÃ o
    }
    
    return (
        <span style={{ 
            marginLeft: '15px', 
            padding: '5px 10px', 
            backgroundColor: '#007bff', 
            color: 'white', 
            borderRadius: '15px',
            fontSize: '12px',
            fontWeight: 'bold'
        }}>
            Phiáº¿u xuáº¥t: {itemCount} máº·t hÃ ng
        </span>
    );
};

export default ExportSlipCounter;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\FloatingCalculator.jsx ---


// src/components/FloatingCalculator.jsx
import React, { useState, useEffect, useCallback } from 'react';
import styles from './FloatingCalculator.module.css';
import { FiX } from 'react-icons/fi';

const FloatingCalculator = ({ onClose }) => {
    const [displayValue, setDisplayValue] = useState('0');
    const [prevValue, setPrevValue] = useState(null);
    const [operator, setOperator] = useState(null);
    const [waitingForOperand, setWaitingForOperand] = useState(true);
    const [calculationString, setCalculationString] = useState('');

    const calculate = (val1, op, val2) => {
        const num1 = parseFloat(val1);
        const num2 = parseFloat(val2);
        switch (op) {
            case '+': return num1 + num2;
            case '-': return num1 - num2;
            case '*': return num1 * num2;
            case '/': return num1 / num2;
            default: return num2;
        }
    };

    const inputDigit = (digit) => {
        if (operator === '=') {
            setCalculationString('');
            setOperator(null);
        }
        if (waitingForOperand) {
            setDisplayValue(String(digit));
            setWaitingForOperand(false);
        } else {
            setDisplayValue(displayValue === '0' ? String(digit) : displayValue + digit);
        }
    };
    
    const inputDecimal = () => {
        if (operator === '=') {
            setCalculationString('');
            setOperator(null);
        }
        if (waitingForOperand) {
            setDisplayValue('0.');
            setWaitingForOperand(false);
        } else if (displayValue.indexOf('.') === -1) {
            setDisplayValue(displayValue + '.');
        }
    };

    const clearAll = useCallback(() => {
        setDisplayValue('0');
        setPrevValue(null);
        setOperator(null);
        setWaitingForOperand(true);
        setCalculationString('');
    }, []);

    const inputBackspace = useCallback(() => {
        if (waitingForOperand || operator === '=') return;
        const newValue = displayValue.slice(0, -1);
        setDisplayValue(newValue || '0');
    }, [displayValue, waitingForOperand, operator]);

    const performOperation = (nextOperator) => {
        const inputValue = parseFloat(displayValue);
        if (prevValue == null) {
            setPrevValue(inputValue);
            if (nextOperator !== '=') {
                setCalculationString(`${displayValue} ${nextOperator}`);
            }
        } else if (operator) {
            const result = calculate(prevValue, operator, inputValue);
            setDisplayValue(String(result));
            setPrevValue(result);
            if (nextOperator === '=') {
                setCalculationString(`${prevValue} ${operator} ${inputValue} =`);
            } else {
                setCalculationString(`${result} ${nextOperator}`);
            }
        }
        setWaitingForOperand(true);
        setOperator(nextOperator);
    };

    // FIX: TÃCH RIÃŠNG useEffect CHO CÃC PHÃM Báº¤M
    useEffect(() => {
        const handleKeyDown = (event) => {
            const { key } = event;
            if (/\d/.test(key)) { event.preventDefault(); inputDigit(parseInt(key, 10)); }
            else if (key === '.') { event.preventDefault(); inputDecimal(); }
            else if (['+', '-', '*', '/'].includes(key)) { event.preventDefault(); performOperation(key); }
            else if (key === 'Enter' || key === '=') { event.preventDefault(); performOperation('='); }
            else if (key === 'Delete' || key.toLowerCase() === 'c') { event.preventDefault(); clearAll(); }
            else if (key === 'Backspace') { event.preventDefault(); inputBackspace(); }
        };
        window.addEventListener('keydown', handleKeyDown);
        return () => window.removeEventListener('keydown', handleKeyDown);
    }, [displayValue, prevValue, operator, waitingForOperand, clearAll, inputBackspace]);

    // ThÃªm má»™t useEffect riÃªng Ä‘á»ƒ xá»­ lÃ½ phÃ­m Escape
    useEffect(() => {
      const handleEscape = (event) => {
        if (event.key === 'Escape') {
          onClose();
        }
      };
      window.addEventListener('keydown', handleEscape);
      return () => window.removeEventListener('keydown', handleEscape);
    }, [onClose]);


    return (
        <div className={styles.calculatorContainer}>
            <div className={styles.calculator}>
                <div className={styles.screen}>
                    <div className={styles.calculationDisplay}>{calculationString}</div>
                    <div className={styles.display}>{displayValue}</div>
                </div>
                <div className={styles.keypad}>
                    <button onClick={() => clearAll()}>C</button>
                    <button disabled>%</button>
                    <button disabled>Â±</button>
                    <button className={`${styles.operator} ${operator === '/' ? styles.active : ''}`} onClick={() => performOperation('/')}>Ã·</button>
                    <button onClick={() => inputDigit(7)}>7</button>
                    <button onClick={() => inputDigit(8)}>8</button>
                    <button onClick={() => inputDigit(9)}>9</button>
                    <button className={`${styles.operator} ${operator === '*' ? styles.active : ''}`} onClick={() => performOperation('*')}>Ã—</button>
                    <button onClick={() => inputDigit(4)}>4</button>
                    <button onClick={() => inputDigit(5)}>5</button>
                    <button onClick={() => inputDigit(6)}>6</button>
                    <button className={`${styles.operator} ${operator === '-' ? styles.active : ''}`} onClick={() => performOperation('-')}>-</button>
                    <button onClick={() => inputDigit(1)}>1</button>
                    <button onClick={() => inputDigit(2)}>2</button>
                    <button onClick={() => inputDigit(3)}>3</button>
                    <button className={`${styles.operator} ${operator === '+' ? styles.active : ''}`} onClick={() => performOperation('+')}>+</button>
                    <button className={styles.zero} onClick={() => inputDigit(0)}>0</button>
                    <button onClick={() => inputDecimal()}>.</button>
                    <button className={`${styles.equals} ${operator === '=' ? styles.active : ''}`} onClick={() => performOperation('=')}>=</button>
                </div>
            </div>
        </div>
    );
};

export default FloatingCalculator;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\FloatingCalculator.module.css ---


/* src/components/FloatingCalculator.module.css */

:root {
    --bg-color: #f0f3f7;
    --screen-bg-color: #e6eaf0;
    --display-color: #2d3e50;
    --key-bg-color: #ffffff;
    --key-text-color: #2d3e50;
    --key-hover-bg: #e8ebee;
    --operator-bg: #d9e4f1;
    --operator-text: #005a9e;
    --equals-bg: #0078d4;
    --equals-hover-bg: #005a9e;
}

.calculatorContainer {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.4);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2000;
  backdrop-filter: blur(4px);
}

.calculator {
  width: 330px;
  border-radius: 16px;
  background-color: var(--bg-color);
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
  padding: 20px;
  position: relative;
}

.closeButton {
  position: absolute;
  /* THAY Äá»”I: Di chuyá»ƒn nÃºt X sang trÃ¡i */
  top: 20px;
  left: 20px;
  background: none;
  border: none;
  color: #aaa;
  font-size: 20px;
  cursor: pointer;
}
.closeButton:hover {
  color: #333;
}

/* Má»šI: Style cho khu vá»±c mÃ n hÃ¬nh chung */
.screen {
    background-color: var(--screen-bg-color);
    border-radius: 10px;
    padding: 10px 15px;
    margin-bottom: 20px;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
    min-height: 120px;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}

.calculationDisplay {
    color: #8899a6;
    font-size: 18px;
    font-weight: 500;
    height: 25px;
    text-align: right;
    width: 100%;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    margin-bottom: 5px;
}

.display {
  color: var(--display-color);
  font-size: 52px;
  font-weight: 300;
  text-align: right;
  width: 100%;
  line-height: 1.2;
}

.keypad {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 12px;
}

.keypad button {
  height: 60px;
  border-radius: 8px;
  border: none;
  background-color: var(--key-bg-color);
  color: var(--key-text-color);
  font-size: 20px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.keypad button:hover {
  background-color: var(--key-hover-bg);
}

.keypad button:active {
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  transform: translateY(1px);
}

.operator {
  background-color: var(--operator-bg);
  color: var(--operator-text);
}

.equals {
  background-color: var(--equals-bg);
  color: #fff;
}
.equals:hover {
  background-color: var(--equals-hover-bg);
}

.active {
    background-color: #0078d4 !important;
    color: #fff !important;
}

.keypad .zero {
  grid-column: span 2;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\FloatingToolsModal.jsx ---


// src/components/FloatingToolsModal.jsx
import React, { useState } from 'react';
import FloatingCalculator from './FloatingCalculator'; // Component mÃ¡y tÃ­nh cÅ©
import QuickStockLookup from './QuickStockLookup'; // Component tra cá»©u má»›i
import { FiTool, FiSearch, FiX } from 'react-icons/fi';
import styles from './FloatingToolsModal.module.css';

const FloatingToolsModal = ({ onClose }) => {
  const [activeTab, setActiveTab] = useState('lookup');

  return (
    <div className={styles.modalBackdrop}>
      <div className={styles.modalContent}>
        <div className={styles.modalHeader}>
          <h3>CÃ´ng cá»¥ nhanh</h3>
          <button className={styles.closeBtn} onClick={onClose}><FiX /></button>
        </div>
        
        <div className={styles.tabsContainer}>
          <button
            className={`${styles.tabButton} ${activeTab === 'lookup' ? styles.active : ''}`}
            onClick={() => setActiveTab('lookup')}
          >
            <FiSearch /> Tra cá»©u
          </button>
          <button
            className={`${styles.tabButton} ${activeTab === 'calculator' ? styles.active : ''}`}
            onClick={() => setActiveTab('calculator')}
          >
            <FiTool /> MÃ¡y tÃ­nh
          </button>
        </div>
        
        <div className={styles.modalBody}>
          {activeTab === 'lookup' && <QuickStockLookup />}
          {/* THAY Äá»”I: Gá»i FloatingCalculator nhÆ°ng khÃ´ng truyá»n prop onClose Ä‘á»ƒ trÃ¡nh render ra 2 nÃºt Ä‘Ã³ng */}
          {activeTab === 'calculator' && <FloatingCalculator />}
        </div>
      </div>
    </div>
  );
};

export default FloatingToolsModal;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\FloatingToolsModal.module.css ---


/* src/components/FloatingToolsModal.module.css */

.modalBackdrop {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2000;
    backdrop-filter: blur(4px);
}

.modalContent {
    width: 500px;
    background-color: #f0f3f7;
    border-radius: 16px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    padding: 20px;
    position: relative;
    display: flex;
    flex-direction: column;
}

.modalHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    border-bottom: 1px solid #e9ecef;
    padding-bottom: 15px;
}

.modalHeader h3 {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
    color: #2d3e50;
}

.closeBtn {
    background: none;
    border: none;
    color: #8899a6;
    font-size: 24px;
    cursor: pointer;
    transition: color 0.2s;
}

.closeBtn:hover {
    color: #333;
}

.tabsContainer {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.tabButton {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 15px;
    border: 1px solid #ccc;
    background-color: #fff;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.tabButton:hover {
    background-color: #f0f0f0;
}

.tabButton.active {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

.modalBody {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\HighlightText.jsx ---


// src/components/HighlightText.jsx
import React from 'react';

const HighlightText = ({ text = '', highlight = '' }) => {
    if (!highlight.trim()) {
        return <span>{text}</span>;
    }

    const regex = new RegExp(`(${highlight})`, 'gi');
    const parts = text.split(regex);

    return (
        <span>
            {parts.map((part, i) =>
                regex.test(part) ? (
                    <strong key={i} style={{ backgroundColor: '#fffbe6' }}>{part}</strong>
                ) : (
                    <span key={i}>{part}</span>
                )
            )}
        </span>
    );
};

export default HighlightText;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\HomePage.jsx ---


// src/components/HomePage.jsx

import React from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';

function HomePage({ user }) {
  // THAY THáº¾ CONSOLE.LOG CÅ¨ Báº°NG 4 DÃ’NG NÃ€Y
  console.log('--- DEBUGGING HOMEPAGE ---');
  console.log('ToÃ n bá»™ object user:', user);
  console.log('GiÃ¡ trá»‹ cá»§a user.email lÃ :', user?.email);
  console.log('Kiá»ƒu dá»¯ liá»‡u cá»§a user.email lÃ :', typeof user?.email);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      console.log('ÄÄƒng xuáº¥t thÃ nh cÃ´ng!');
    } catch (error) {
      console.error('Lá»—i Ä‘Äƒng xuáº¥t:', error);
    }
  };

  return (
    <div className="homepage-container">
      <h1>ChÃ o má»«ng trá»Ÿ láº¡i, {user?.email}!</h1>
      <p>ÄÃ¢y lÃ  trang quáº£n trá»‹ kho cá»§a báº¡n.</p>
      <button onClick={handleLogout} className="logout-button">
        ÄÄƒng xuáº¥t
      </button>
    </div>
  );
}

export default HomePage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ImportSlipCounter.jsx ---


// src/components/ImportSlipCounter.jsx

import React from 'react';
import useImportSlipStore from '../stores/importSlipStore';

const ImportSlipCounter = () => {
    // Component nÃ y chá»‰ "láº¯ng nghe" sá»± thay Ä‘á»•i cá»§a `items` trong store.
    const items = useImportSlipStore(state => state.items);
    
    // Chá»‰ Ä‘áº¿m nhá»¯ng item Ä‘Ã£ cÃ³ thÃ´ng tin mÃ£ hÃ ng.
    const itemCount = items.filter(item => item.productId && item.productId.trim() !== '').length;

    // KhÃ´ng hiá»ƒn thá»‹ gÃ¬ náº¿u chÆ°a cÃ³ item nÃ o.
    if (itemCount === 0) {
        return null;
    }
    
    return (
        <span style={{ 
            marginLeft: '15px', 
            padding: '5px 10px', 
            backgroundColor: '#28a745', // MÃ u xanh lÃ¡ cho phiáº¿u nháº­p
            color: 'white', 
            borderRadius: '15px',
            fontSize: '12px',
            fontWeight: 'bold'
        }}>
            Phiáº¿u nháº­p: {itemCount} máº·t hÃ ng
        </span>
    );
};

export default ImportSlipCounter;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\InventoryFilters.jsx ---


// src/components/InventoryFilters.jsx
import React from 'react';

const InventoryFilters = ({ userRole, onFilterChange, activeFilters }) => {
    
  const handleTeamFilter = (team) => {
    if (activeFilters.team === team) {
      onFilterChange('team', 'all');
    } else {
      onFilterChange('team', team);
    }
  };

  const handleDateFilter = (status) => {
    if (activeFilters.dateStatus === status) {
      onFilterChange('dateStatus', 'all');
    } else {
      onFilterChange('dateStatus', status);
    }
  };

  return (
    <div className="filters-container">
      {/* Bá»™ lá»c theo Team */}
      {/* Chá»‰ hiá»ƒn thá»‹ bá»™ lá»c team náº¿u lÃ  admin, owner, hoáº·c bio */}
      {(userRole === 'admin' || userRole === 'owner' || userRole === 'bio') && (
        <div className="filter-group">
          {/* Chá»‰ admin/owner má»›i tháº¥y nÃºt lá»c MED vÃ  BIO */}
          {(userRole === 'admin' || userRole === 'owner') && (
            <>
              <button
                className={activeFilters.team === 'MED' ? 'active' : ''}
                onClick={() => handleTeamFilter('MED')}
              >
                Lá»c hÃ ng MED
              </button>
              <button
                className={activeFilters.team === 'BIO' ? 'active' : ''}
                onClick={() => handleTeamFilter('BIO')}
              >
                 Lá»c hÃ ng BIO
              </button>
            </>
          )}
          
          {/* Admin/owner vÃ  bio Ä‘á»u tháº¥y nÃºt nÃ y */}
          <button
            className={activeFilters.team === 'Spare Part' ? 'active' : ''}
            onClick={() => handleTeamFilter('Spare Part')}
          >
            Lá»c hÃ ng Spare Part
          </button>
        </div>
      )}
      
      {/* Bá»™ lá»c theo HSD */}
      <div className="filter-group">
        <button
          className={activeFilters.dateStatus === 'near_expiry' ? 'active' : ''}
          onClick={() => handleDateFilter('near_expiry')}
        >
          Lá»c hÃ ng cáº­n date (&lt;120 ngÃ y)
        </button>
        <button
          className={activeFilters.dateStatus === 'expired' ? 'active' : ''}
          onClick={() => handleDateFilter('expired')}
        >
          Lá»c hÃ ng Ä‘Ã£ háº¿t HSD
        </button>
      </div>
    </div>
  );
};

export default React.memo(InventoryFilters);



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\LoginPage.jsx ---


// src/components/LoginPage.jsx
import React, { useState } from 'react';
import { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';
import { auth } from '../firebaseConfig';
import { toast } from 'react-toastify';
import { getFunctions, httpsCallable } from 'firebase/functions';
import styles from './LoginPage.module.css';
import { FcGoogle } from 'react-icons/fc';

function LoginPage() {
  const [isLoading, setIsLoading] = useState(false);

  const handleGoogleLogin = async () => {
    setIsLoading(true);
    const provider = new GoogleAuthProvider();
    try {
      // 1. Má»Ÿ cá»­a sá»• popup Ä‘á»ƒ Ä‘Äƒng nháº­p báº±ng Google
      const result = await signInWithPopup(auth, provider);
      
      toast.info("XÃ¡c thá»±c Google thÃ nh cÃ´ng. Äang khá»Ÿi táº¡o vai trÃ²...");
      
      // 2. Gá»i Cloud Function Ä‘á»ƒ xá»­ lÃ½ vÃ  cáº¥p quyá»n
      const functions = getFunctions();
      const processUser = httpsCallable(functions, 'processNewGoogleUser');
      await processUser();

      // === THAY Äá»”I QUAN TRá»ŒNG NHáº¤T Náº°M á»ž ÄÃ‚Y ===
      // 3. Ã‰p buá»™c trÃ¬nh duyá»‡t láº¥y láº¡i token má»›i nháº¥t (cÃ³ chá»©a "con dáº¥u" owner)
      await result.user.getIdToken(true); 
      
      toast.success("ÄÄƒng nháº­p vÃ  cáº¥p quyá»n thÃ nh cÃ´ng!");

      // 4. Táº£i láº¡i trang Ä‘á»ƒ Ä‘áº£m báº£o toÃ n bá»™ á»©ng dá»¥ng sá»­ dá»¥ng quyá»n má»›i
      // Thay vÃ¬ Ä‘á»ƒ navigate tá»± Ä‘á»™ng, chÃºng ta táº£i láº¡i má»™t cÃ¡ch triá»‡t Ä‘á»ƒ
      window.location.reload();

    } catch (error) {
      let errorMessage = "ÄÃ£ xáº£y ra lá»—i. Vui lÃ²ng thá»­ láº¡i.";
      if (error.code === 'auth/popup-closed-by-user') {
          errorMessage = "Cá»­a sá»• Ä‘Äƒng nháº­p Ä‘Ã£ bá»‹ Ä‘Ã³ng.";
      } else if (error.message.includes("permission-denied")) {
          errorMessage = "TÃ i khoáº£n cá»§a báº¡n khÃ´ng Ä‘Æ°á»£c phÃ©p truy cáº­p há»‡ thá»‘ng nÃ y.";
          await auth.signOut();
      }
      
      console.error("Lá»—i Ä‘Äƒng nháº­p Google:", error);
      toast.error(errorMessage);
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.loginContainer}>
      <h2>Há»‡ thá»‘ng Quáº£n lÃ½ Kho</h2>
      <p style={{textAlign: 'center', color: '#666', marginTop: '-10px', marginBottom: '30px'}}>
        Vui lÃ²ng Ä‘Äƒng nháº­p báº±ng tÃ i khoáº£n Google Ä‘Ã£ Ä‘Æ°á»£c cáº¥p phÃ©p.
      </p>
      <button 
        className={styles.googleLoginButton} 
        onClick={handleGoogleLogin}
        disabled={isLoading}
      >
        <FcGoogle />
        <span>{isLoading ? "Äang xá»­ lÃ½..." : "ÄÄƒng nháº­p báº±ng Google"}</span>
      </button>
    </div>
  );
}

export default LoginPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\LoginPage.module.css ---


/* src/components/LoginPage.module.css */

.loginPageWrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.loginContainer {
  padding: 40px;
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 350px;
}

.loginContainer h2 {
  text-align: center;
  margin-bottom: 24px;
  color: #333;
}

/* NÃºt báº¥m trong form Ä‘Äƒng nháº­p */
.loginContainer button {
  width: 100%;
  padding: 12px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  font-size: 16px;
  cursor: pointer;
  margin-top: 10px;
}

.loginContainer button:hover {
  background-color: #0056b3;
}

/* ThÃªm vÃ o cuá»‘i file LoginPage.module.css */
.googleLoginButton {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  background-color: #fff !important;
  color: #444 !important;
  border: 1px solid #ddd !important;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.googleLoginButton:hover {
  background-color: #f8f8f8 !important;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

.googleLoginButton svg {
  font-size: 22px;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\LotJourneyExplorer.jsx ---


// src/components/LotJourneyExplorer.jsx

import React, { useMemo } from 'react';
import ReactFlow, { Background, Controls } from 'reactflow';
import 'reactflow/dist/style.css';

// Sá»­a Ä‘á»•i hÃ m nÃ y Ä‘á»ƒ nháº­n thÃªm totalRemaining
const processDataForFlow = (importRecords, exportHistory, totalRemaining) => {
    const initialNodes = [];
    const initialEdges = [];
    if (importRecords.length === 0) {
        return { initialNodes, initialEdges };
    }

    const masterInfo = importRecords[0];
    const totalImported = importRecords.reduce((sum, rec) => sum + rec.quantityImported, 0);
    const supplierName = masterInfo.supplier || 'KhÃ´ng rÃµ';
    initialNodes.push({
        id: 'supplier-node',
        data: { label: `NhÃ  Cung Cáº¥p: ${supplierName}`, type: 'supplier', name: supplierName },
        position: { x: 0, y: 150 },
        style: { background: '#fde68a', borderColor: '#ca8a04', whiteSpace: 'pre-wrap' },
    });
    initialNodes.push({
        id: 'lot-node',
        data: { label: `LÃ´: ${masterInfo.lotNumber}\nTá»•ng nháº­p: ${totalImported}`, type: 'lot' },
        position: { x: 300, y: 150 },
        style: { background: '#a5b4fc', borderColor: '#4338ca', width: 180, whiteSpace: 'pre-wrap' },
    });
    initialEdges.push({
        id: 'edge-supplier-lot',
        source: 'supplier-node',
        target: 'lot-node',
        animated: true,
        label: `${totalImported} ${masterInfo.unit}`,
    });
    const customerNodes = {};
    exportHistory.forEach(exp => {
        if (!customerNodes[exp.customer]) {
            customerNodes[exp.customer] = { name: exp.customer, total: 0 };
        }
        customerNodes[exp.customer].total += exp.quantityExported;
    });
    const outputNodes = Object.values(customerNodes);
    
    // Sá»­ dá»¥ng totalRemaining tá»« prop thay vÃ¬ tÃ­nh toÃ¡n láº¡i
    if (totalRemaining > 0) {
        outputNodes.push({ name: 'Tá»“n Kho', total: totalRemaining });
    }
    
    outputNodes.forEach((nodeItem, index) => {
        const yPos = index * 120;
        const nodeId = nodeItem.name.replace(/\s+/g, '-').toLowerCase();

        initialNodes.push({
            id: nodeId,
            data: { 
                label: `${nodeItem.name}\nSá»‘ lÆ°á»£ng: ${nodeItem.total}`, 
                type: nodeItem.name === 'Tá»“n Kho' ? 'stock' : 'customer',
                name: nodeItem.name
            },
            position: { x: 600, y: yPos },
            style: { 
                background: nodeItem.name === 'Tá»“n Kho' ? '#d1d5db' : '#6ee7b7',
                borderColor: nodeItem.name === 'Tá»“n Kho' ? '#4b5563' : '#047857',
                whiteSpace: 'pre-wrap'
            },
        });

        initialEdges.push({
            id: `edge-lot-${nodeId}`,
            source: 'lot-node',
            target: nodeId,
            label: `${nodeItem.total} ${masterInfo.unit}`,
        });
    });

    return { initialNodes, initialEdges };
};

// Sá»­a Ä‘á»•i component Ä‘á»ƒ nháº­n prop totalRemaining
const LotJourneyExplorer = ({ importRecords, exportHistory, totalRemaining, onNodeClick, onPaneClick }) => {
    const { initialNodes, initialEdges } = useMemo(
        // Truyá»n totalRemaining vÃ o hÃ m xá»­ lÃ½
        () => processDataForFlow(importRecords, exportHistory, totalRemaining),
        [importRecords, exportHistory, totalRemaining]
    );
    if (initialNodes.length === 0) {
        return null;
    }
    
    return (
        <div style={{ height: '500px', border: '1px solid #eee', borderRadius: '8px' }}>
            <ReactFlow
                nodes={initialNodes}
                edges={initialEdges}
                fitView
                onNodeClick={onNodeClick}
                onPaneClick={onPaneClick}
            >
                <Background />
                <Controls /> 
            </ReactFlow>
        </div>
    );
};

export default LotJourneyExplorer;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\Navbar.jsx ---


// src/components/Navbar.jsx

import React from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';
import { toast } from 'react-toastify';
import { 
    FiGrid, 
    FiArchive, 
    FiFilePlus,
    FiFileMinus,
    FiClipboard, 
    FiFileText, 
    FiShare2, 
    FiCheckSquare,
    FiUsers,
    FiUpload,
    FiSettings,
    FiLogOut,
    FiBookOpen
} from 'react-icons/fi';
import '../styles/AdminLayout.css';
import { useAuth } from '../hooks/useAuth';

const Navbar = () => {
    const navigate = useNavigate();
    const { role } = useAuth();

    const handleLogout = async () => {
        try {
            await signOut(auth);
            toast.success('ÄÄƒng xuáº¥t thÃ nh cÃ´ng!');
            navigate('/login');
        } catch (error) {
            toast.error('ÄÃ£ xáº£y ra lá»—i khi Ä‘Äƒng xuáº¥t.');
            console.error("Lá»—i Ä‘Äƒng xuáº¥t:", error);
        }
    };
    
    const hasRole = (roles) => roles.includes(role);

    return (
        <nav className="top-navbar">
            <div className="navbar-brand">
                <h3>Kho PT Biomed</h3>
            </div>
            <ul className="nav-items">
                {/* === NÃšT LUÃ”N HIá»‚N THá»Š CHO Táº¤T Cáº¢ VAI TRÃ’ === */}
                <li>
                  <NavLink to="/view" title="Xem Sá»• CÃ¡i Tá»“n Kho">
                    <FiBookOpen className="nav-icon" />
                  </NavLink>
                </li>
          
                {/* === Báº®T Äáº¦U THAY Äá»”I: Chá»‰ Owner má»›i tháº¥y cÃ¡c nÃºt quáº£n trá»‹ === */}
                
                {/* NÃºt Dashboard (vá»‹ trÃ­ thá»© 2) */}
                {hasRole(['owner']) && (
                    <li>
                        <NavLink to="/" title="Báº£ng Ä‘iá»u khiá»ƒn">
                            <FiGrid className="nav-icon" />
                        </NavLink>
                    </li>
                )}

                {/* CÃ¡c nÃºt quáº£n lÃ½ chung */}
                {hasRole(['owner']) && (
                    <>
                        <li>
                            <NavLink to="/products" title="Quáº£n lÃ½ hÃ ng hÃ³a (Danh má»¥c)">
                                <FiArchive className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/lot-trace" title="Truy váº¿t lÃ´ hÃ ng">
                                <FiShare2 className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/imports" title="Danh sÃ¡ch Phiáº¿u Nháº­p">
                                <FiClipboard className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/exports" title="Danh sÃ¡ch Phiáº¿u Xuáº¥t">
                                <FiFileText className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/partners" title="Quáº£n lÃ½ Äá»‘i tÃ¡c">
                                <FiUsers className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/users" title="Quáº£n lÃ½ User">
                                <FiSettings className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/new-import" title="Táº¡o Phiáº¿u Nháº­p">
                                <FiFilePlus className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/new-export" title="Táº¡o Phiáº¿u Xuáº¥t">
                                <FiFileMinus className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/stocktakes" title="Kiá»ƒm KÃª Kho">
                                <FiCheckSquare className="nav-icon" />
                            </NavLink>
                        </li>
                        <li>
                            <NavLink to="/import-data" title="Import Dá»¯ Liá»‡u">
                                <FiUpload className="nav-icon" />
                            </NavLink>
                        </li>
                    </>
                )}
                {/* === Káº¾T THÃšC THAY Äá»”I === */}
                
                {/* === NÃšT ÄÄ‚NG XUáº¤T (LUÃ”N HIá»‚N THá»Š) === */}
                <li>
                    <a href="#" onClick={handleLogout} title="ÄÄƒng xuáº¥t">
                        <FiLogOut className="nav-icon" />
                    </a>
                </li>
            </ul>
        </nav>
    );
};

export default React.memo(Navbar);



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\NewDataNotification.jsx ---


// src/components/NewDataNotification.jsx
import React from 'react';

const NewDataNotification = ({ isVisible, onRefresh, message }) => {
    if (!isVisible) {
        return null;
    }

    return (
        <div className="new-data-notification">
            <p>{message}</p>
            <button onClick={onRefresh} className="btn-primary">Táº£i láº¡i danh sÃ¡ch</button>
        </div>
    );
};

export default NewDataNotification;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ProductAutocomplete.jsx ---


// src/components/ProductAutocomplete.jsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { createPortal } from 'react-dom';
import { collection, getDocs, query, orderBy, documentId } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import styles from './Autocomplete.module.css';
import { FiChevronDown } from 'react-icons/fi';

const ProductAutocomplete = ({ value, onSelect, onChange, onBlur }) => {
    const [suggestions, setSuggestions] = useState([]);
    const [allProducts, setAllProducts] = useState([]);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0, width: 0 });
    
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // Má»šI: State Ä‘á»ƒ theo dÃµi má»¥c Ä‘ang Ä‘Æ°á»£c chá»n báº±ng bÃ n phÃ­m
    const [activeIndex, setActiveIndex] = useState(-1);
    
    const containerRef = useRef(null);
    const inputRef = useRef(null);
    const suggestionsRef = useRef(null); // Ref cho danh sÃ¡ch ul

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                setIsLoading(true);
                const productsQuery = query(collection(db, 'products'), orderBy(documentId()));
                const querySnapshot = await getDocs(productsQuery);
                const productList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                setAllProducts(productList);
                setError(null);
            } catch (err) {
                console.error("Lá»—i khi táº£i danh sÃ¡ch sáº£n pháº©m:", err);
                setError("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch sáº£n pháº©m.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchProducts();
    }, []);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (containerRef.current && !containerRef.current.contains(event.target)) {
                setShowSuggestions(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    // Má»šI: Logic xá»­ lÃ½ bÃ n phÃ­m
    const handleKeyDown = useCallback((e) => {
        if (showSuggestions && suggestions.length > 0) {
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                setActiveIndex(prevIndex => (prevIndex + 1) % suggestions.length);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                setActiveIndex(prevIndex => (prevIndex - 1 + suggestions.length) % suggestions.length);
            } else if (e.key === 'Enter') {
                e.preventDefault();
                if (activeIndex >= 0) {
                    handleSuggestionClick(suggestions[activeIndex]);
                }
            } else if (e.key === 'Escape') {
                setShowSuggestions(false);
            }
        }
    }, [activeIndex, suggestions, showSuggestions]);

    useEffect(() => {
        if (suggestionsRef.current && activeIndex >= 0) {
            const activeItem = suggestionsRef.current.children[activeIndex];
            if (activeItem) {
                activeItem.scrollIntoView({ block: 'nearest' });
            }
        }
    }, [activeIndex]);

    const handleInputChange = (e) => {
        const inputValue = e.target.value.toUpperCase();
        onChange(inputValue);
        setActiveIndex(-1); // Reset active index khi gÃµ

        if (inputValue.length > 0) {
            const filteredSuggestions = allProducts.filter(product =>
                product.id.toUpperCase().includes(inputValue)
            );
            setSuggestions(filteredSuggestions);
        } else {
            setSuggestions(allProducts.slice(0, 10)); // Hiá»ƒn thá»‹ má»™t vÃ i gá»£i Ã½ khi trá»‘ng
        }
        setShowSuggestions(true);
    };

    const handleSuggestionClick = (product) => {
        onSelect(product);
        setShowSuggestions(false);
        setActiveIndex(-1);
    };

    const handleInputBlur = () => {
        setTimeout(() => {
            setShowSuggestions(false);
            if (onBlur) onBlur();
        }, 150); // Delay Ä‘á»ƒ sá»± kiá»‡n click trÃªn suggestion ká»‹p xá»­ lÃ½
    };
    
    const SuggestionsPortal = () => createPortal(
    <ul
        ref={suggestionsRef}
        className={styles.suggestionsList}
        style={{
            // ChÃºng ta khÃ´ng cáº§n Ä‘á»‹nh vá»‹ báº±ng top, left ná»¯a
            // chá»‰ cáº§n width Ä‘á»ƒ Ä‘áº£m báº£o nÃ³ khá»›p vá»›i input
            width: `${inputRef.current.offsetWidth}px`,
        }}
    >
        {isLoading && <li className={styles.feedback}>Äang táº£i...</li>}
        {error && <li className={styles.feedback}>{error}</li>}
        {!isLoading && !error && suggestions.length === 0 && <li className={styles.feedback}>KhÃ´ng tÃ¬m tháº¥y káº¿t quáº£</li>}
        
        {!isLoading && !error && suggestions.map((product, index) => (
            <li 
                key={product.id} 
                className={index === activeIndex ? styles.activeSuggestion : ''}
                onMouseDown={(e) => { e.preventDefault(); handleSuggestionClick(product); }}
            >
                <strong>{product.id}</strong> - <span>{product.productName}</span>
            </li>
        ))}
    </ul>,
    // Äáº·t portal vÃ o container Autocomplete
    containerRef.current
);

    return (
        <div className={styles.autocompleteContainer} ref={containerRef}>
            <input
                ref={inputRef}
                type="text"
                value={value}
                onChange={handleInputChange}
                onBlur={handleInputBlur}
                onKeyDown={handleKeyDown} // <-- Má»šI: Gáº¯n sá»± kiá»‡n bÃ n phÃ­m
                placeholder="Nháº­p MÃ£ hÃ ng..."
                onFocus={handleInputChange}
            />
            <FiChevronDown className={styles.arrowIcon} />
            {showSuggestions && <SuggestionsPortal />}
        </div>
    );
};

export default ProductAutocomplete;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\QuickStockLookup.jsx ---


// src/components/QuickStockLookup.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';
import { FiSearch, FiAlertCircle } from 'react-icons/fi';
import Spinner from './Spinner';
import styles from './QuickStockLookup.module.css';
import { formatDate } from '../utils/dateUtils';
import { formatNumber } from '../utils/numberUtils';

const QuickStockLookup = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [productData, setProductData] = useState(null); 
  const [loading, setLoading] = useState(false);

  const performSearch = useCallback(async (term) => {
    if (!term) {
      setProductData(null);
      return;
    }
    setLoading(true);
    try {
      const trimmedTerm = term.trim().toUpperCase();

      // Truy váº¥n 1: Láº¥y danh sÃ¡ch cÃ¡c lÃ´ hÃ ng khá»›p vá»›i MÃ£ hÃ ng
      const lotsByProductIdQuery = query(
        collection(db, 'inventory_lots'),
        where('productId', '==', trimmedTerm)
      );

      // Truy váº¥n 2: Láº¥y danh sÃ¡ch cÃ¡c lÃ´ hÃ ng khá»›p vá»›i Sá»‘ lÃ´
      const lotsByLotNumberQuery = query(
        collection(db, 'inventory_lots'),
        where('lotNumber', '==', trimmedTerm)
      );

      // Cháº¡y cáº£ hai truy váº¥n song song
      const [byProductIdSnap, byLotNumberSnap] = await Promise.all([
        getDocs(lotsByProductIdQuery),
        getDocs(lotsByLotNumberQuery)
      ]);

      let lots = [
        ...byProductIdSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })),
        ...byLotNumberSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }))
      ];

      const uniqueLots = Array.from(new Map(lots.map(item => [item.id, item])).values());
      
      if (uniqueLots.length > 0) {
        const productId = uniqueLots[0].productId;
        const productDocRef = doc(db, 'products', productId);
        const productSnap = await getDoc(productDocRef);
        const productInfo = productSnap.exists() ? productSnap.data() : null;

        // === Báº®T Äáº¦U LOGIC Gá»˜P LÃ” HÃ€NG ===
            const lotAggregator = new Map();

            for (const lot of uniqueLots) {
                if (lot.quantityRemaining <= 0) continue; // Bá» qua lÃ´ Ä‘Ã£ háº¿t hÃ ng

                const lotKey = lot.lotNumber; // Gá»™p theo sá»‘ lÃ´

                if (lotAggregator.has(lotKey)) {
                    // Náº¿u lÃ´ Ä‘Ã£ tá»“n táº¡i, cá»™ng dá»“n sá»‘ lÆ°á»£ng
                    const existingLot = lotAggregator.get(lotKey);
                    existingLot.quantityRemaining += lot.quantityRemaining;
                } else {
                    // Náº¿u lÃ´ chÆ°a cÃ³, táº¡o má»›i má»™t báº£n sao Ä‘á»ƒ trÃ¡nh thay Ä‘á»•i dá»¯ liá»‡u gá»‘c
                    lotAggregator.set(lotKey, { ...lot });
                }
            }

            const aggregatedLots = Array.from(lotAggregator.values());
            // === Káº¾T THÃšC LOGIC Gá»˜P LÃ” HÃ€NG ===
        
        const totalRemaining = uniqueLots.reduce((sum, lot) => sum + lot.quantityRemaining, 0);

        if (productInfo) {
          setProductData({
            generalInfo: { ...productInfo, productId: productId },
            lots: aggregatedLots.sort((a, b) => (a.expiryDate && b.expiryDate) ? a.expiryDate.toDate() - b.expiryDate.toDate() : 0),
            totalRemaining: totalRemaining
          });
        } else {
          setProductData(null);
        }
      } else {
        const productDocRef = doc(db, 'products', trimmedTerm);
        const productSnap = await getDoc(productDocRef);

        if (productSnap.exists()) {
          setProductData({
            generalInfo: { ...productSnap.data(), productId: trimmedTerm },
            lots: [],
            totalRemaining: 0
          });
        } else {
          setProductData(null);
        }
      }

    } catch (error) {
      console.error("Lá»—i tra cá»©u tá»“n kho:", error);
      setProductData(null);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    const debounce = setTimeout(() => {
      performSearch(searchTerm);
    }, 500); 
    return () => clearTimeout(debounce);
  }, [searchTerm, performSearch]);

  return (
    <div className={styles.container}>
      <div className={styles.searchBox}>
        <input 
          type="text" 
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          placeholder="Nháº­p MÃ£ hÃ ng hoáº·c Sá»‘ lÃ´..."
          autoFocus
        />
        <FiSearch />
      </div>
      
      <div className={styles.resultsContainer}>
        {loading ? (
          <Spinner />
        ) : productData ? (
          <>
            <div className={styles.generalInfoGrid}>
              <div className={styles.gridItem}>
                <strong>MÃ£ hÃ ng:</strong>
                <p>{productData.generalInfo.productId}</p>
              </div>
              <div className={styles.gridItem}>
                <strong>TÃªn hÃ ng:</strong>
                <p>{productData.generalInfo.productName}</p>
              </div>
              <div className={styles.gridItem}>
                <strong>ÄVT:</strong>
                <p>{productData.generalInfo.unit}</p>
              </div>
              <div className={styles.gridItem}>
                <strong>Quy cÃ¡ch:</strong>
                <p>{productData.generalInfo.packaging}</p>
              </div>
              <div className={styles.gridItem}>
                <strong>Nhiá»‡t Ä‘á»™ BQ:</strong>
                <p>{productData.generalInfo.storageTemp}</p>
              </div>
              <div className={styles.gridItem}>
                <strong>HÃ£ng SX:</strong>
                <p>{productData.generalInfo.manufacturer}</p>
              </div>
              <div className={styles.gridItem}>
                <strong>Team:</strong>
                <p>{productData.generalInfo.team}</p>
              </div>
              <div className={styles.gridItem} style={{gridColumn: '1 / -1'}}>
                <strong>Tá»•ng tá»“n:</strong>
                <p style={{color: 'green', fontSize: '1.2rem', fontWeight: 'bold'}}>{formatNumber(productData.totalRemaining)} {productData.generalInfo.unit}</p>
              </div>
            </div>

            <div className={styles.lotList}>
              <h4>Tá»“n kho theo lÃ´:</h4>
              {productData.lots.length > 0 ? (
                productData.lots.map(lot => (
                  <div key={lot.id} className={styles.lotItem}>
                    <div><strong>Sá»‘ lÃ´:</strong><span>{lot.lotNumber}</span></div>
                    <div><strong>HSD:</strong><span>{lot.expiryDate ? formatDate(lot.expiryDate) : 'N/A'}</span></div>
                    <div><strong>Tá»“n:</strong><span>{formatNumber(lot.quantityRemaining)} {productData.generalInfo.unit}</span></div>
                    {lot.notes && <div><strong>Ghi chÃº:</strong><span>{lot.notes}</span></div>}
                  </div>
                ))
              ) : (
                <div className={styles.noResults}>
                  <p>KhÃ´ng cÃ³ lÃ´ hÃ ng nÃ o cÃ²n tá»“n kho.</p>
                </div>
              )}
            </div>
          </>
        ) : (
          <div className={styles.noResults}>
            <FiAlertCircle />
            <p>KhÃ´ng tÃ¬m tháº¥y káº¿t quáº£ nÃ o.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default QuickStockLookup;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\QuickStockLookup.module.css ---


/* src/components/QuickStockLookup.module.css */

.container {
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 8px;
}

.searchBox {
    position: relative;
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    background-color: #fff;
    border-radius: 25px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.searchBox input {
    width: 100%;
    padding: 10px 20px;
    border: none;
    background: transparent;
    font-size: 16px;
    outline: none;
    padding-right: 50px;
}

.searchIcon {
    position: absolute;
    right: 20px;
    color: #888;
    font-size: 20px;
}

.resultsContainer {
    max-height: 300px;
    overflow-y: auto;
    padding-right: 5px;
}

.generalInfoGrid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
    padding: 15px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    margin-bottom: 20px;
}

.generalInfoGrid strong {
    font-weight: bold;
    color: #6c757d;
    font-size: 13px;
    margin-bottom: 5px;
}

.generalInfoGrid p {
    margin: 0;
    font-size: 14px;
    color: #333;
    word-break: break-word;
}

.lotList {
    background-color: #fff;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.lotList h4 {
    margin: 0 0 15px 0;
    font-size: 18px;
    font-weight: 600;
    color: #333;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
}

.lotItem {
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 10px 0;
    border-bottom: 1px solid #eee;
}

.lotItem:last-child {
    border-bottom: none;
}

.lotItem div {
    display: flex;
    justify-content: space-between;
}

.lotItem strong {
    font-weight: bold;
    color: #6c757d;
    font-size: 13px;
}

.lotItem span {
    font-size: 14px;
    color: #333;
    text-align: right;
}

.noResults {
    text-align: center;
    color: #888;
    font-style: italic;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}

.noResults svg {
    font-size: 24px;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\RecentActivityList.jsx ---


import React from 'react';
import { Link } from 'react-router-dom';
import { formatDate } from '../utils/dateUtils';
import Skeleton from 'react-loading-skeleton';

const RecentActivityList = ({ title, items, type, isLoading }) => {
    return (
        <div className="card">
            <h3>{title}</h3>
            {isLoading ? (
                <Skeleton count={5} height={30} style={{ marginBottom: '10px' }} />
            ) : items.length > 0 ? (
                <ul className="recent-activity-list">
                    {items.map(item => (
                        <li key={item.id}>
                            <Link to={`/${type}s`} className="table-link">{item.id}</Link>
                            <span>{type === 'import' ? item.supplier : item.customer}</span>
                            <span>{formatDate(item.createdAt)}</span>
                        </li>
                    ))}
                </ul>
            ) : (
                <p className="empty-message">KhÃ´ng cÃ³ hoáº¡t Ä‘á»™ng nÃ o gáº§n Ä‘Ã¢y.</p>
            )}
        </div>
    );
};

export default RecentActivityList;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\Sidebar.jsx ---


// src/components/Sidebar.jsx

import React, { useState } from 'react';
// Cáº¬P NHáº¬T: Thay Ä‘á»•i bá»™ icon cho phÃ¹ há»£p
import { FiHome, FiArchive, FiPlusCircle, FiMinusCircle, FiFileText, FiChevronsLeft, FiChevronsRight } from 'react-icons/fi';
import { NavLink } from 'react-router-dom';
import '../styles/AdminLayout.css';

const Sidebar = () => {
  const [collapsed, setCollapsed] = useState(false);

  return (
    <div className={collapsed ? "sidebar collapsed" : "sidebar"}>
      <div className="sidebar-header">
        <h2 className="logo">{collapsed ? "K" : "Kho PT Biomed"}</h2>
        <button className="toggle-btn" onClick={() => setCollapsed(!collapsed)}>
          {collapsed ? <FiChevronsRight /> : <FiChevronsLeft />}
        </button>
      </div>
      <ul className="menu-items">
        <li>
          <NavLink to="/">
            <FiHome className="menu-icon" />
            <span className="menu-text">Báº£ng Ä‘iá»u khiá»ƒn</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/products">
            <FiArchive className="menu-icon" />
            <span className="menu-text">Quáº£n lÃ½ hÃ ng hÃ³a</span>
          </NavLink>
        </li>
        {/* Cáº¬P NHáº¬T: Äá»•i icon thÃ nh FiPlusCircle */}
        <li>
          <NavLink to="/new-import">
            <FiPlusCircle className="menu-icon" />
            <span className="menu-text">Táº¡o Phiáº¿u Nháº­p</span>
          </NavLink>
        </li>
        {/* Cáº¬P NHáº¬T: Äá»•i icon thÃ nh FiMinusCircle */}
        <li>
          <NavLink to="/new-export">
            <FiMinusCircle className="menu-icon" />
            <span className="menu-text">Táº¡o Phiáº¿u Xuáº¥t</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/imports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiáº¿u Nháº­p</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/exports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiáº¿u Xuáº¥t</span>
          </NavLink>
        </li>
      </ul>
    </div>
  );
};

export default Sidebar;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\Spinner.jsx ---


// src/components/Spinner.jsx
import React from 'react';
import styles from './Spinner.module.css'; // Cáº­p nháº­t import

const Spinner = ({ forTable = false }) => {
    if (forTable) {
        return (
            <tr className={styles.spinnerTableRow}>
                <td colSpan="100%">
                    <div className={styles.spinner}></div>
                </td>
            </tr>
        );
    }

    return (
        <div className={styles.spinnerContainer}>
            <div className={styles.spinner}></div>
        </div>
    );
};

export default Spinner;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\Spinner.module.css ---


/* src/components/Spinner.module.css */
.spinnerContainer {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 40px;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    /* Light grey */
    border-top: 5px solid #007bff; /* Primary color */
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* DÃ¹ng cho spinner bÃªn trong báº£ng */
.spinnerTableRow td {
    text-align: center;
    padding: 40px;
    border: none;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\StatCard.jsx ---


import React from 'react';
import { FiTrendingUp, FiAlertTriangle, FiPackage, FiUsers } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

const StatCard = ({ icon, title, value, isLoading }) => {
    return (
        <div className="stat-card">
            <div className="stat-card-icon">{icon}</div>
            <div className="stat-card-info">
                <h4>{title}</h4>
                {isLoading ? <Skeleton width={50} /> : <p>{value}</p>}
            </div>
        </div>
    );
};

export default StatCard;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\StatusBadge.jsx ---


// src/components/StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
    let text = status;
    let className = `status-badge status-${status}`;

    switch (status) {
        case 'pending':
            text = 'Äang chá»';
            break;
        case 'completed':
            text = 'HoÃ n thÃ nh';
            break;
        case 'cancelled':
            text = 'ÄÃ£ há»§y';
            break;
        case 'in_progress':
            text = 'Äang thá»±c hiá»‡n';
            className = 'status-badge status-pending'; // TÃ¡i sá»­ dá»¥ng style mÃ u vÃ ng
            break;
        case 'adjusted':
            text = 'ÄÃ£ Ä‘iá»u chá»‰nh';
            className = 'status-badge status-adjusted'; // Style mÃ u tÃ­m má»›i
            break;
        default:
            text = status;
    }

    return <span className={className}>{text}</span>;
};

// <-- NÃ‚NG Cáº¤P: Bá»c component trong React.memo Ä‘á»ƒ tá»‘i Æ°u hiá»‡u nÄƒng,
// trÃ¡nh viá»‡c re-render khÃ´ng cáº§n thiáº¿t khi props khÃ´ng thay Ä‘á»•i.
export default React.memo(StatusBadge);




--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\StatusBadge.test.jsx ---


// src/components/StatusBadge.test.jsx

import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import StatusBadge from './StatusBadge';
import React from 'react';

// NhÃ³m cÃ¡c bÃ i test cho component StatusBadge
describe('Component: StatusBadge', () => {

    it('hiá»ƒn thá»‹ Ä‘Ãºng text vÃ  class cho tráº¡ng thÃ¡i "pending"', () => {
        // B1: Render component vá»›i props cáº§n test
        render(<StatusBadge status="pending" />);
        
        // B2: TÃ¬m element trong DOM áº£o dá»±a trÃªn ná»™i dung text cá»§a nÃ³
        const badgeElement = screen.getByText('Äang chá»');
        
        // B3: Kiá»ƒm tra (Assert) xem element cÃ³ tá»“n táº¡i khÃ´ng vÃ  cÃ³ Ä‘Ãºng class CSS khÃ´ng
        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-badge');
        expect(badgeElement).toHaveClass('status-pending');
    });

    it('hiá»ƒn thá»‹ Ä‘Ãºng text vÃ  class cho tráº¡ng thÃ¡i "completed"', () => {
        render(<StatusBadge status="completed" />);
        const badgeElement = screen.getByText('HoÃ n thÃ nh');
        
        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-completed');
    });

    it('hiá»ƒn thá»‹ Ä‘Ãºng text vÃ  class cho tráº¡ng thÃ¡i "cancelled"', () => {
        render(<StatusBadge status="cancelled" />);
        const badgeElement = screen.getByText('ÄÃ£ há»§y');

        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-cancelled');
    });
    
    it('hiá»ƒn thá»‹ Ä‘Ãºng text vÃ  class cho tráº¡ng thÃ¡i "in_progress"', () => {
        render(<StatusBadge status="in_progress" />);
        const badgeElement = screen.getByText('Äang thá»±c hiá»‡n');

        expect(badgeElement).toBeInTheDocument();
        // TÃ¡i sá»­ dá»¥ng style cá»§a pending
        expect(badgeElement).toHaveClass('status-pending');
    });
    
    it('hiá»ƒn thá»‹ Ä‘Ãºng text vÃ  class cho tráº¡ng thÃ¡i "adjusted"', () => {
        render(<StatusBadge status="adjusted" />);
        const badgeElement = screen.getByText('ÄÃ£ Ä‘iá»u chá»‰nh');

        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass('status-adjusted');
    });

    it('hiá»ƒn thá»‹ chÃ­nh giÃ¡ trá»‹ status náº¿u khÃ´ng khá»›p vá»›i case nÃ o', () => {
        const randomStatus = "unknown_status";
        render(<StatusBadge status={randomStatus} />);
        const badgeElement = screen.getByText(randomStatus);

        expect(badgeElement).toBeInTheDocument();
        expect(badgeElement).toHaveClass(`status-${randomStatus}`);
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\TeamBadge.jsx ---


// src/components/TeamBadge.jsx
import React from 'react';

const TeamBadge = ({ team }) => {
  let className = 'team-badge';
  switch (team) {
    case 'MED':
      className += ' team-med';
      break;
    case 'BIO':
      className += ' team-bio';
      break;
    case 'Spare Part':
      className += ' team-sparepart';
      break;
    default:
      break;
  }

  return <span className={className}>{team}</span>;
};

// <-- NÃ‚NG Cáº¤P: Bá»c component trong React.memo Ä‘á»ƒ tá»‘i Æ°u hiá»‡u nÄƒng.
export default React.memo(TeamBadge);




--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\TeamBarChart.jsx ---


import React from 'react';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import Skeleton from 'react-loading-skeleton';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const TeamBarChart = ({ chartData, isLoading }) => {
    const options = {
        responsive: true,
        plugins: {
            legend: { display: false },
            title: { display: true, text: 'Sá»‘ LÆ°á»£ng MÃ£ HÃ ng (SKU) Theo Team' },
        },
    };

    const data = {
        labels: ['MED', 'BIO', 'Spare Part'],
        datasets: [
            {
                label: 'Sá»‘ SKU',
                data: [chartData.MED, chartData.BIO, chartData['Spare Part']],
                backgroundColor: ['#007bff', '#28a745', '#6c757d'],
            },
        ],
    };

    return (
        <div className="card">
            {isLoading ? <Skeleton height={300} /> : <Bar options={options} data={data} />}
        </div>
    );
};

export default TeamBarChart;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\TempBadge.jsx ---


// src/components/TempBadge.jsx
import React from 'react';

const TempBadge = ({ temperature }) => {
  let className = 'temp-badge';
  const tempString = temperature?.toLowerCase() || '';

  if (tempString.includes('2') && tempString.includes('8')) {
    className += ' temp-cool'; // 2 -> 8Â°C
  } else if (tempString.includes('-15') || tempString.includes('-25')) {
    className += ' temp-frozen'; // -25 -> -15Â°C
  } else if (tempString.includes('phÃ²ng')) {
    className += ' temp-room'; // Nhiá»‡t Ä‘á»™ phÃ²ng
  } else {
    className += ' temp-other'; // CÃ¡c loáº¡i khÃ¡c
  }

  return <span className={className}>{temperature}</span>;
};

// <-- NÃ‚NG Cáº¤P: Bá»c component trong React.memo Ä‘á»ƒ tá»‘i Æ°u hiá»‡u nÄƒng.
export default React.memo(TempBadge);




--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ViewerLayout.jsx ---


// src/components/ViewerLayout.jsx

import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import InventoryPage from '../pages/InventoryPage';
import InventorySummaryPage from '../pages/InventorySummaryPage';
import { useAuth } from '../hooks/useAuth';
import { useResponsive } from '../hooks/useResponsive';
import FloatingCalculator from './FloatingCalculator';
import { MdCalculate } from 'react-icons/md';
import MobileInventoryPage from '../pages/MobileInventoryPage';
import companyLogo from '../assets/logo.png'; // Di chuyá»ƒn import logo Ä‘áº¿n Ä‘Ã¢y
import { FiPrinter } from 'react-icons/fi'; // ThÃªm import cho icon In

const ViewerLayout = () => {
    const { role: userRole } = useAuth();
    const isMobile = useResponsive();
    const canViewDetail = userRole === 'admin' || userRole === 'owner';
    const [viewMode, setViewMode] = useState('summary');
    const [isCalculatorVisible, setIsCalculatorVisible] = useState(false);

    const toggleCalculator = () => {
        setIsCalculatorVisible(prev => !prev);
    };

    // Di chuyá»ƒn hÃ m handlePrint ra layout cha
    const handlePrint = () => {
        const pageNameToPrint = viewMode === 'detail' ? 'ChiTiet' : 'TongHop';
        const originalTitle = document.title;
        document.title = `BaoCao_TonKho_${pageNameToPrint}_${new Date().toLocaleDateString('vi-VN')}`;
        window.print();
        document.title = originalTitle;
    };

    const dynamicTitle = useMemo(() => {
        switch (userRole) {
            case 'owner':
            case 'admin':
                return 'INVENTORY';
            case 'med':
                return 'TEAM MED';
            case 'bio':
                return 'TEAM BIO';
            default:
                return 'Kho - PT Biomed';
        }
    }, [userRole]);

    useEffect(() => {
        document.title = dynamicTitle;
    }, [dynamicTitle]);

    useEffect(() => {
        if (!canViewDetail) {
            setViewMode('summary');
        }
    }, [canViewDetail]);

    if (isMobile) {
        return (
            <div style={{ padding: '10px' }}>
                <MobileInventoryPage />
            </div>
        );
    }

    return (
        <div className="viewer-layout-container">
            {/* --- THANH HEADER THá»NG NHáº¤T Má»šI --- */}
            <div className="viewer-header">
                {/* --- Khu vá»±c bÃªn trÃ¡i --- */}
                <div className="viewer-header-left">
                    {userRole === 'owner' && (
                        <Link to="/" className="btn-secondary" style={{ textDecoration: 'none' }}>
                            &larr; Quay láº¡i Trang Quáº£n Trá»‹
                        </Link>
                    )}
                    {canViewDetail && (
                        <div className="view-toggle">
                            <button onClick={() => setViewMode('summary')} className={viewMode === 'summary' ? 'btn-primary' : 'btn-secondary'} style={{width: 'auto'}}>
                                Xem Tá»•ng Há»£p
                            </button>
                            <button onClick={() => setViewMode('detail')} className={viewMode === 'detail' ? 'btn-primary' : 'btn-secondary'} style={{width: 'auto'}}>
                                Xem Chi Tiáº¿t
                            </button>
                        </div>
                    )}
                </div>

                {/* --- Khu vá»±c trung tÃ¢m (Logo vÃ  TiÃªu Ä‘á») --- */}
                <div className="viewer-header-center">
                    <img src={companyLogo} alt="Logo CÃ´ng ty" className="header-logo" />
                    <h1>{dynamicTitle}</h1>
                </div>

                {/* --- Khu vá»±c bÃªn pháº£i --- */}
                <div className="viewer-header-right">
                    {(userRole === 'owner' || userRole === 'admin') && (
                        <button onClick={handlePrint} className="btn-secondary">
                            <FiPrinter style={{marginRight: '5px'}} />
                            In BÃ¡o CÃ¡o
                        </button>
                    )}
                </div>
            </div>

            {/* --- PHáº¦N Ná»˜I DUNG CHÃNH --- */}
            <div className="viewer-main-content">
                {(viewMode === 'detail' && canViewDetail) 
                    ? <InventoryPage />
                    : <InventorySummaryPage />
                }
            </div>

            {/* NÃºt mÃ¡y tÃ­nh giá»¯ nguyÃªn */}
            <button className="floating-toggle-btn" onClick={toggleCalculator} title="Má»Ÿ mÃ¡y tÃ­nh (CÃ³ thá»ƒ dÃ¹ng bÃ n phÃ­m)">
                <MdCalculate />
            </button>
            {isCalculatorVisible && <FloatingCalculator onClose={toggleCalculator} />}
        </div>
    );
};

export default ViewerLayout;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ViewExportSlipModal.jsx ---


// src/components/ViewExportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from './StatusBadge';

const ViewExportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;
    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');
    const handlePrint = () => {
        window.print();
    };
    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area export-slip" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiáº¿t Phiáº¿u Xuáº¥t Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiáº¿u</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>KhÃ¡ch hÃ ng</label><p><strong>{slip.customer}</strong></p></div>
                    <div><label>NgÃ y táº¡o</label>
                        <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Tráº¡ng thÃ¡i</label><p><StatusBadge status={slip.status} /></p></div>
                    <div className="info-description"><label>Diá»…n giáº£i</label><p><em>{slip.description || '(KhÃ´ng cÃ³)'}</em></p></div>
                </div>
                
 
                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiáº¿t hÃ ng hÃ³a</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    <th>SL xuáº¥t</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    {hasNotes && <th>Ghi chÃº</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        <td>{item.quantityToExport || item.quantityExported}</td>
                                        <td>{item.storageTemp}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiáº¿u</button>
                    <button type="button" onClick={onClose} className="btn-primary">ÄÃ³ng</button>
                </div>
            </div>
        </div>
    );
};

export default React.memo(ViewExportSlipModal);



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\components\ViewImportSlipModal.jsx ---


// src/components/ViewImportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from './StatusBadge';

const ViewImportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;
    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');
    const handlePrint = () => {
        window.print();
    };
    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area import-slip" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiáº¿t Phiáº¿u Nháº­p Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiáº¿u</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>NhÃ  cung cáº¥p</label><p><strong>{slip.supplierName}</strong></p></div> {/* <--- Sá»¬A THÃ€NH supplierName */}
                    <div><label>NgÃ y táº¡o</label>
                      <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Tráº¡ng thÃ¡i</label><p><StatusBadge status={slip.status} /></p></div>
                    <div className="info-description"><label>Diá»…n giáº£i</label><p><em>{slip.description || '(KhÃ´ng cÃ³)'}</em></p></div>
                </div>

                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiáº¿t hÃ ng hÃ³a</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>Sá»‘ lÆ°á»£ng</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    {hasNotes && <th>Ghi chÃº</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
            <td>{item.productId}</td>
            <td>{item.productName}</td>
            <td>{item.lotNumber}</td>
            <td>{item.expiryDate}</td>
            <td>{item.quantity}</td>
            <td>{item.unit}</td>
            <td>{item.packaging}</td>
            {hasNotes && <td>{item.notes}</td>}
        </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiáº¿u</button>
                    <button type="button" onClick={onClose} className="btn-primary">ÄÃ³ng</button>
                </div>
            </div>
        </div>
    );
};

export default React.memo(ViewImportSlipModal);



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\context\UserContext.jsx ---


// src/context/UserContext.jsx
import React, { createContext, useState, useEffect, useContext } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth, db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import Spinner from '../components/Spinner'; // <-- THÃŠM IMPORT

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [userRole, setUserRole] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                const userDocRef = doc(db, 'users', currentUser.uid);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    setUserRole(userDocSnap.data().role);
                } else {
                    setUserRole(null);
                }
                setUser(currentUser);
            } else {
                setUser(null);
                setUserRole(null);
            }
            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    const value = {
        user,
        userRole,
        loading,
    };

    // Khi Ä‘ang xÃ¡c thá»±c, hiá»ƒn thá»‹ spinner toÃ n trang
    if (loading) {
        return <Spinner />;
    }

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\hooks\useAuth.js ---


// src/hooks/useAuth.js

import { useState, useEffect } from 'react';
import { auth } from '../firebaseConfig';
import { onAuthStateChanged } from 'firebase/auth';

export const useAuth = () => {
    const [user, setUser] = useState(null);
    const [role, setRole] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                // Láº¥y token chá»©a custom claims (vai trÃ²) Ä‘á»ƒ xÃ¡c thá»±c quyá»n
                const idTokenResult = await currentUser.getIdTokenResult();
                setUser(currentUser);
                setRole(idTokenResult.claims.role || null); // GÃ¡n vai trÃ² tá»« token
            } else {
                setUser(null);
                setRole(null);
            }
            setLoading(false);
        });

        // Dá»n dáº¹p listener khi component unmount
        return () => unsubscribe();
    }, []);

    return { user, role, loading };
};




--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\hooks\useFirestorePagination.js ---


import { useState, useEffect, useCallback } from 'react';
import { getDocs, query, startAfter, limit } from 'firebase/firestore';
import { toast } from 'react-toastify';

export const useFirestorePagination = (baseQuery, pageSize) => {
    const [documents, setDocuments] = useState([]);
    const [loading, setLoading] = useState(true);
    const [page, setPage] = useState(1);
    const [cursorHistory, setCursorHistory] = useState([null]);
    const [isLastPage, setIsLastPage] = useState(false);

    const fetchData = useCallback(async (targetPage, currentCursorHistory = [null]) => {
        setLoading(true);
        try {
            const cursor = currentCursorHistory[targetPage - 1];
            let pageQuery;

            if (targetPage === 1) {
                pageQuery = query(baseQuery, limit(pageSize));
            } else {
                pageQuery = query(baseQuery, startAfter(cursor), limit(pageSize));
            }

            const docSnapshots = await getDocs(pageQuery);
            const list = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));

            setIsLastPage(list.length < pageSize);
            setDocuments(list);

            const lastVisible = docSnapshots.docs[docSnapshots.docs.length - 1];
            if (lastVisible) {
                setCursorHistory(prev => {
                    const newHistory = [...prev];
                    newHistory[targetPage] = lastVisible;
                    return newHistory;
                });
            }
        } catch (error) {
            console.error("Lá»—i khi phÃ¢n trang Firestore: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u trang.");
            setDocuments([]);
        } finally {
            setLoading(false);
        }
    }, [baseQuery, pageSize]);

    // HÃ€M Má»šI: Reset láº¡i tráº¡ng thÃ¡i vÃ  táº£i láº¡i trang Ä‘áº§u
    const reset = useCallback(() => {
        setPage(1);
        setCursorHistory([null]);
        setIsLastPage(false);
        fetchData(1, [null]);
    }, [fetchData]);

    useEffect(() => {
        reset();
    }, [baseQuery, reset]);

    const nextPage = () => {
        if (!isLastPage) {
            const newPage = page + 1;
            setPage(newPage);
            fetchData(newPage, cursorHistory);
        }
    };

    const prevPage = () => {
        if (page > 1) {
            const newPage = page - 1;
            setPage(newPage);
            fetchData(newPage, cursorHistory);
        }
    };

    return { documents, loading, isLastPage, page, nextPage, prevPage, reset };
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\hooks\useFirestorePagination.test.js ---


// src/hooks/useFirestorePagination.test.js
import { renderHook, waitFor, act } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { useFirestorePagination } from './useFirestorePagination';

// Cho Vitest biáº¿t ráº±ng má»—i khi cÃ³ code nÃ o import 'firebase/firestore',
// nÃ³ sáº½ trá» Ä‘áº¿n file mock cá»§a chÃºng ta.
vi.mock('firebase/firestore', async () => {
  const mocks = await vi.importActual('../../src/test/__mocks__/firebaseFirestore.js');
  return mocks;
});

// Import cÃ¡c hÃ m Ä‘Ã£ Ä‘Æ°á»£c mock
import { getDocs, startAfter, setupMockData } from 'firebase/firestore';

describe('Hook: useFirestorePagination', () => {

    const mockBaseQuery = { type: 'baseQuery' };
    const pageSize = 2;

    // Reset cÃ¡c mock trÆ°á»›c má»—i bÃ i test Ä‘á»ƒ Ä‘áº£m báº£o chÃºng Ä‘á»™c láº­p
    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('nÃªn táº£i trang Ä‘áº§u tiÃªn má»™t cÃ¡ch chÃ­nh xÃ¡c', async () => {
        // Arrange: Chuáº©n bá»‹ dá»¯ liá»‡u máº«u cho trang 1
        setupMockData(1);

        // Act: Render hook
        const { result } = renderHook(() => useFirestorePagination(mockBaseQuery, pageSize));

        // Assert: Kiá»ƒm tra tráº¡ng thÃ¡i loading ban Ä‘áº§u
        expect(result.current.loading).toBe(true);
        
        // Chá» cho Ä‘áº¿n khi hook háº¿t loading
        await waitFor(() => {
            expect(result.current.loading).toBe(false);
        });
        
        // Assert: Kiá»ƒm tra káº¿t quáº£ sau khi táº£i xong
        expect(result.current.documents).toHaveLength(2);
        expect(result.current.documents[0].id).toBe('partner-01');
        expect(result.current.page).toBe(1);
        expect(result.current.isLastPage).toBe(false);
        expect(getDocs).toHaveBeenCalledTimes(2); // 1 láº§n cho data, 1 láº§n Ä‘á»ƒ check isLastPage
    });

    it('nÃªn táº£i trang tiáº¿p theo khi gá»i hÃ m nextPage', async () => {
        // Arrange: Setup trang 1
        setupMockData(1);
        const { result } = renderHook(() => useFirestorePagination(mockBaseQuery, pageSize));
        await waitFor(() => expect(result.current.loading).toBe(false));
        
        // Setup dá»¯ liá»‡u cho trang 2
        setupMockData(2);

        // Act: Gá»i hÃ m nextPage
        act(() => {
            result.current.nextPage();
        });
        
        // Assert: Chá» loading vÃ  kiá»ƒm tra káº¿t quáº£
        expect(result.current.loading).toBe(true);
        await waitFor(() => expect(result.current.loading).toBe(false));

        expect(result.current.documents).toHaveLength(2);
        expect(result.current.documents[0].id).toBe('partner-03');
        expect(result.current.page).toBe(2);
        expect(startAfter).toHaveBeenCalled(); // Kiá»ƒm tra xem hÃ m startAfter cÃ³ Ä‘Æ°á»£c gá»i khÃ´ng
    });
    
    it('nÃªn reset vá» trang Ä‘áº§u tiÃªn khi gá»i hÃ m reset', async () => {
        // Arrange: Táº£i trang 1, rá»“i táº£i trang 2
        setupMockData(1);
        const { result } = renderHook(() => useFirestorePagination(mockBaseQuery, pageSize));
        await waitFor(() => expect(result.current.loading).toBe(false));
        
        setupMockData(2);
        act(() => { result.current.nextPage(); });
        await waitFor(() => expect(result.current.loading).toBe(false));
        expect(result.current.page).toBe(2); // Äáº£m báº£o Ä‘ang á»Ÿ trang 2

        // Setup láº¡i dá»¯ liá»‡u cho trang 1
        setupMockData(1);
        
        // Act: Gá»i hÃ m reset
        act(() => {
            result.current.reset();
        });

        // Assert: Chá» loading vÃ  kiá»ƒm tra Ä‘Ã£ vá» trang 1
        await waitFor(() => expect(result.current.loading).toBe(false));
        expect(result.current.documents[0].id).toBe('partner-01');
        expect(result.current.page).toBe(1);
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\hooks\useRealtimeNotification.js ---


import { useState, useEffect, useRef } from 'react';
import { onSnapshot, query, limit, getDocs } from 'firebase/firestore';

export const useRealtimeNotification = (baseQuery) => {
    const [hasNewData, setHasNewData] = useState(false);
    // DÃ¹ng Ref Ä‘á»ƒ lÆ°u timestamp, sáº½ khÃ´ng bá»‹ reset khi re-render
    const lastSeenTimestampRef = useRef(null);
    const isInitialLoadRef = useRef(true); // Cá» Ä‘á»ƒ Ä‘Ã¡nh dáº¥u láº§n táº£i Ä‘áº§u tiÃªn

    useEffect(() => {
        if (!baseQuery) return;
        
        // LuÃ´n chá»‰ láº¥y 1 document má»›i nháº¥t dá»±a trÃªn baseQuery
        const newestDocQuery = query(baseQuery, limit(1));

        // Thiáº¿t láº­p timestamp ban Ä‘áº§u
        if (isInitialLoadRef.current) {
            getDocs(newestDocQuery).then(snapshot => {
                if (!snapshot.empty) {
                    lastSeenTimestampRef.current = snapshot.docs[0].data().createdAt;
                }
                isInitialLoadRef.current = false; // ÄÃ¡nh dáº¥u Ä‘Ã£ qua láº§n táº£i Ä‘áº§u
            });
        }

        const unsubscribe = onSnapshot(newestDocQuery, (snapshot) => {
            // KhÃ´ng cháº¡y logic náº¿u Ä‘ang á»Ÿ láº§n táº£i Ä‘áº§u tiÃªn
            if (isInitialLoadRef.current || snapshot.empty) {
                return;
            }

            const newestDoc = snapshot.docs[0].data();
            const newestTimestamp = newestDoc.createdAt;

            // Chá»‰ hiá»ƒn thá»‹ thÃ´ng bÃ¡o náº¿u cÃ³ document má»›i tháº­t sá»±
            if (lastSeenTimestampRef.current && newestTimestamp.toMillis() > lastSeenTimestampRef.current.toMillis()) {
                setHasNewData(true);
            }
        }, (error) => {
            console.error("Lá»—i khi láº¯ng nghe dá»¯ liá»‡u real-time:", error);
        });

        return () => {
            unsubscribe();
            isInitialLoadRef.current = true; // Reset láº¡i khi query thay Ä‘á»•i
        };

    }, [baseQuery]);

    // HÃ m Ä‘á»ƒ ngÆ°á»i dÃ¹ng báº¥m vÃ o nÃºt "Táº£i láº¡i"
    const dismissNewData = () => {
        setHasNewData(false);
        isInitialLoadRef.current = true; // Reset láº¡i Ä‘á»ƒ nÃ³ láº¥y timestamp má»›i nháº¥t
    };

    return { hasNewData, dismissNewData }; // Tráº£ vá» dismissNewData
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\hooks\useResponsive.js ---


import { useState, useEffect } from 'react';

// Hook nÃ y tráº£ vá» true náº¿u chiá»u rá»™ng mÃ n hÃ¬nh nhá» hÆ¡n 768px
export const useResponsive = () => {
    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth < 768);
        };

        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    return isMobile;
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\DashboardPage.jsx ---


// src/pages/DashboardPage.jsx
import React, { useState, useEffect } from 'react';
import { 
    getDashboardStats, 
    getRecentCompletedImports, 
    getRecentCompletedExports, 
    getChartData,
    getPendingImportTickets,
    getPendingExportTickets 
} from '../services/dashboardService';
import StatCard from '../components/StatCard';
import RecentActivityList from '../components/RecentActivityList';
import ExpiryPieChart from '../components/ExpiryPieChart';
import TeamBarChart from '../components/TeamBarChart';
import { FiAlertTriangle, FiCheckCircle, FiPackage, FiUsers } from 'react-icons/fi';
import Spinner from '../components/Spinner';
import '../styles/Dashboard.css';
import { Link } from 'react-router-dom';
import { formatDate } from '../utils/dateUtils';

const DashboardPage = () => {
    const [stats, setStats] = useState({});
    const [recentImports, setRecentImports] = useState([]);
    const [recentExports, setRecentExports] = useState([]);
    const [chartData, setChartData] = useState({ expiryData: {}, teamData: {} });
    const [pendingImports, setPendingImports] = useState([]);
    const [pendingExports, setPendingExports] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                const [
                    statsData, 
                    importsData, 
                    exportsData, 
                    charts, 
                    pendingImportsData, 
                    pendingExportsData
                ] = await Promise.all([
                    getDashboardStats(),
                    getRecentCompletedImports(),
                    getRecentCompletedExports(),
                    getChartData(),
                    getPendingImportTickets(),
                    getPendingExportTickets(),
                ]);
                setStats(statsData);
                setRecentImports(importsData);
                setRecentExports(exportsData);
                setChartData(charts);
                setPendingImports(pendingImportsData);
                setPendingExports(pendingExportsData);
            } catch (error) {
                console.error("Lá»—i khi táº£i dá»¯ liá»‡u dashboard:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    const PendingList = ({ title, tickets, type }) => (
        <div className="card">
            <h3>{title} ({tickets.length})</h3>
            {loading ? (
                 <Spinner />
            ) : tickets.length > 0 ? (
                <div className="table-container">
                    <table className="products-table minimal">
                        <thead>
                            <tr>
                                <th>ID Phiáº¿u</th>
                                <th>{type === 'import' ? 'NhÃ  Cung Cáº¥p' : 'KhÃ¡ch HÃ ng'}</th>
                                <th>NgÃ y táº¡o</th>
                            </tr>
                        </thead>
                        <tbody>
                            {tickets.map(ticket => (
                                <tr key={ticket.id}>
                                    <td>
                                        <Link to={`/${type}s`} className="table-link">{ticket.id}</Link>
                                    </td>
                                    <td>{type === 'import' ? ticket.supplierName : ticket.customer}</td>
                                    <td>{formatDate(ticket.createdAt)}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            ) : (
                <p className="empty-message">KhÃ´ng cÃ³ phiáº¿u nÃ o Ä‘ang chá» xá»­ lÃ½.</p>
            )}
        </div>
    );

    return (
        <div className="dashboard-container">
            <div className="dashboard-header">
                <h1>Tá»•ng Quan</h1>
            </div>

            {loading ? <Spinner /> : (
                <div className="dashboard-grid-layout">
                    <div className="stats-grid">
                        <StatCard icon={<FiAlertTriangle />} title="Sáº¯p Háº¿t Háº¡n" value={stats.nearExpiryCount} isLoading={loading} />
                        <StatCard icon={<FiCheckCircle />} title="ÄÃ£ Háº¿t Háº¡n" value={stats.expiredCount} isLoading={loading} />
                        <StatCard icon={<FiPackage />} title="Tá»•ng SKU" value={stats.skuCount} isLoading={loading} />
                        <StatCard icon={<FiUsers />} title="Tá»•ng Äá»‘i TÃ¡c" value={stats.partnerCount} isLoading={loading} />
                    </div>

                    <div className="chart-grid">
                        <ExpiryPieChart chartData={chartData.expiryData} isLoading={loading} />
                        <TeamBarChart chartData={chartData.teamData} isLoading={loading} />
                    </div>
                    
                    <div className="table-grid">
                        <PendingList title="Phiáº¿u Nháº­p Chá» Xá»­ LÃ½" tickets={pendingImports} type="import" />
                        <PendingList title="Phiáº¿u Xuáº¥t Chá» Xá»­ LÃ½" tickets={pendingExports} type="export" />
                    </div>

                    <div className="table-grid">
                        <RecentActivityList title="Phiáº¿u Nháº­p Vá»«a HoÃ n Táº¥t" items={recentImports} type="import" isLoading={loading} />
                        <RecentActivityList title="Phiáº¿u Xuáº¥t Vá»«a HoÃ n Táº¥t" items={recentExports} type="export" isLoading={loading} />
                    </div>
                </div>
            )}
        </div>
    );
};

export default DashboardPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\DataImportPage.jsx ---


// src/pages/DataImportPage.jsx

import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { collection, writeBatch, doc, Timestamp, getDoc, serverTimestamp } from 'firebase/firestore';
import { toast } from 'react-toastify';
import Papa from 'papaparse';
import { FiUpload, FiDownload, FiInfo } from 'react-icons/fi';
import { parseDateString } from '../utils/dateUtils';
import styles from '../styles/DataImportPage.module.css';
import { normalizeString, generateKeywords } from '../utils/stringUtils';

const DataImportPage = () => {
    const [importType, setImportType] = useState('inventory');
    const [pastedData, setPastedData] = useState('');
    const [isImporting, setIsImporting] = useState(false);
    const [importLog, setImportLog] = useState([]);

    const logMessage = (message, type = 'info') => {
        setImportLog(prev => [...prev, { message, type, time: new Date().toLocaleTimeString() }]);
    };

    const handleFileImport = (e) => {
        const file = e.target.files[0];
        if (!file) return;

        logMessage(`Báº¯t Ä‘áº§u Ä‘á»c file: ${file.name}`);
        Papa.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => { processData(results.data); },
            error: (err) => {
                toast.error("KhÃ´ng thá»ƒ Ä‘á»c file CSV.");
                logMessage(`Lá»—i Ä‘á»c file: ${err.message}`, 'error');
            }
        });
        e.target.value = null;
    };
    
    const handlePasteImport = () => {
        if (!pastedData.trim()) {
            return toast.warn("Vui lÃ²ng dÃ¡n dá»¯ liá»‡u vÃ o Ã´ trá»‘ng.");
        }
        logMessage(`Báº¯t Ä‘áº§u Ä‘á»c dá»¯ liá»‡u Ä‘Ã£ dÃ¡n.`);
        Papa.parse(pastedData, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => { processData(results.data); },
             error: (err) => {
                toast.error("Äá»‹nh dáº¡ng dá»¯ liá»‡u Ä‘Ã£ dÃ¡n khÃ´ng há»£p lá»‡.");
                logMessage(`Lá»—i Ä‘á»c dá»¯ liá»‡u: ${err.message}`, 'error');
            }
        });
    };

    // src/pages/DataImportPage.jsx

const processData = async (data) => {
    if (!data || data.length === 0) {
        toast.warn("KhÃ´ng cÃ³ dá»¯ liá»‡u há»£p lá»‡ Ä‘á»ƒ import.");
        logMessage("KhÃ´ng tÃ¬m tháº¥y dÃ²ng dá»¯ liá»‡u nÃ o.", 'warn');
        return;
    }

    setIsImporting(true);
    setImportLog([]);
    logMessage(`PhÃ¡t hiá»‡n ${data.length} dÃ²ng. Báº¯t Ä‘áº§u xá»­ lÃ½ cho loáº¡i: ${importType}...`);

    try {
        const MAX_BATCH_SIZE = 490; // NgÆ°á»¡ng an toÃ n cho má»—i batch
        let batch = writeBatch(db);
        let operationCount = 0;
        let totalSuccess = 0;

        for (let i = 0; i < data.length; i++) {
            const row = data[i];
            const rowIndex = i + 2; // Sá»‘ thá»© tá»± dÃ²ng trong file CSV

            if (importType === 'inventory') {
                // Chá»‰ yÃªu cáº§u MÃ£ hÃ ng vÃ  TÃªn hÃ ng lÃ  báº¯t buá»™c
                if (!row.productId || !String(row.productId).trim() || !row.productName || !String(row.productName).trim()) {
                    logMessage(`Bá» qua dÃ²ng ${rowIndex}: Thiáº¿u thÃ´ng tin báº¯t buá»™c (productId hoáº·c productName).`, 'warn');
                    continue;
                }
                
                const productId = String(row.productId).trim().toUpperCase();
                const productRef = doc(db, 'products', productId);
                
                // 1. LuÃ´n táº¡o hoáº·c cáº­p nháº­t thÃ´ng tin sáº£n pháº©m (master data)
                const productData = {
                    productName: String(row.productName).trim(),
                    unit: String(row.unit || '').trim(),
                    packaging: String(row.packaging || '').trim(),
                    storageTemp: String(row.storageTemp || '').trim(),
                    manufacturer: String(row.manufacturer || '').trim(),
                    team: String(row.team || 'MED').trim(),
                    createdAt: serverTimestamp()
                };
                batch.set(productRef, productData, { merge: true });
                operationCount++;
                logMessage(`ÄÃ£ xá»­ lÃ½ thÃ´ng tin sáº£n pháº©m: ${productId}`);

                // 2. Chá»‰ táº¡o báº£n ghi tá»“n kho náº¿u cÃ³ Sá»‘ lÆ°á»£ng (quantityRemaining)
                const quantityStr = String(row.quantityRemaining || '').replace(/[.,]/g, ''); // Cháº¥p nháº­n sá»‘ cÃ³ dáº¥u . hoáº·c ,

                if (quantityStr && !isNaN(Number(quantityStr)) && Number(quantityStr) > 0) {
                    const quantityNum = Number(quantityStr);

                    // Xá»­ lÃ½ Sá»‘ lÃ´: náº¿u trá»‘ng thÃ¬ máº·c Ä‘á»‹nh lÃ  'N/A'
                    let lotNumber = String(row.lotNumber || '').trim();
                    if (!lotNumber) {
                        lotNumber = 'N/A';
                    }

                    // Xá»­ lÃ½ HSD: náº¿u trá»‘ng thÃ¬ lÃ  null, náº¿u sai Ä‘á»‹nh dáº¡ng thÃ¬ bÃ¡o lá»—i
                    const expiryDate = parseDateString(row.expiryDate);
                    if (!expiryDate && row.expiryDate && String(row.expiryDate).trim()) {
                        logMessage(`Bá» qua lÃ´ hÃ ng cá»§a dÃ²ng ${rowIndex} (MÃ£: ${productId}): Sai Ä‘á»‹nh dáº¡ng "expiryDate" (HSD).`, 'warn');
                        // KhÃ´ng `continue` Ä‘á»ƒ váº«n lÆ°u Ä‘Æ°á»£c thÃ´ng tin sáº£n pháº©m
                    } else {
                        const inventoryRef = doc(collection(db, 'inventory_lots'));
                        const inventoryData = {
                            productId: productId,
                            productName: productData.productName,
                            lotNumber: lotNumber,
                            expiryDate: expiryDate ? Timestamp.fromDate(expiryDate) : null,
                            importDate: Timestamp.now(),
                            quantityImported: quantityNum,
                            quantityRemaining: quantityNum,
                            unit: productData.unit,
                            packaging: productData.packaging,
                            storageTemp: productData.storageTemp,
                            team: productData.team,
                            manufacturer: productData.manufacturer,
                            supplier: 'Tá»“n Ä‘áº§u ká»³',
                            notes: String(row.notes || '').trim()
                        };
                        batch.set(inventoryRef, inventoryData);
                        operationCount++;
                        logMessage(` -> ÄÃ£ táº¡o lÃ´ hÃ ng tá»“n kho cho ${productId} vá»›i SL: ${quantityNum}`);
                    }
                } else {
                    logMessage(` -> Chá»‰ khai bÃ¡o thÃ´ng tin, khÃ´ng táº¡o lÃ´ tá»“n kho.`);
                }
                
                totalSuccess++;
            
            } else if (importType === 'partners') {
                if (!row.partnerId || !row.partnerName) {
                    logMessage(`Bá» qua dÃ²ng ${rowIndex}: Thiáº¿u partnerId hoáº·c partnerName.`, 'warn');
                    continue;
                }
                const docId = String(row.partnerId).trim().toUpperCase();
                const partnerName = String(row.partnerName).trim();
                const creationDate = parseDateString(row.creationDate);
                const creationTimestamp = creationDate ? Timestamp.fromDate(creationDate) : Timestamp.now();
        
                const docData = {
                    partnerName: partnerName,
                    partnerType: String(row.partnerType).trim().toLowerCase() === 'customer' ? 'customer' : 'supplier',
                    createdAt: creationTimestamp,
                    partnerNameNormalized: normalizeString(partnerName),
                    searchKeywords: generateKeywords(partnerName)
                };
                const docRef = doc(collection(db, 'partners'), docId);
                batch.set(docRef, docData, { merge: true });
                operationCount++;
                totalSuccess++;
            }

            // Ghi batch xuá»‘ng database khi Ä‘áº§y hoáº·c xá»­ lÃ½ xong
            if (operationCount >= MAX_BATCH_SIZE || i === data.length - 1) {
                await batch.commit();
                logMessage(`ÄÃ£ ghi thÃ nh cÃ´ng má»™t lÃ´ ${operationCount} thao tÃ¡c...`);
                batch = writeBatch(db);
                operationCount = 0;
            }
        }

        toast.success(`HoÃ n táº¥t! Xá»­ lÃ½ thÃ nh cÃ´ng ${totalSuccess}/${data.length} má»¥c.`);
        logMessage(`HoÃ n táº¥t! Xá»­ lÃ½ thÃ nh cÃ´ng ${totalSuccess}/${data.length} má»¥c.`, 'success');

    } catch (error) {
        console.error("Lá»—i khi import dá»¯ liá»‡u: ", error);
        toast.error("ÄÃ£ xáº£y ra lá»—i trong quÃ¡ trÃ¬nh import.");
        logMessage(`Lá»—i nghiÃªm trá»ng: ${error.message}`, 'error');
    } finally {
        setIsImporting(false);
        setPastedData('');
    }
};
    
    const downloadTemplate = () => {
        let headers, filename, sampleData;

        if (importType === 'partners') {
            headers = "partnerId*,partnerName*,partnerType,creationDate";
            filename = "mau_import_doi_tac.csv";
            sampleData = "NCC-01,CÃ”NG TY DÆ¯á»¢C PHáº¨M ABC,supplier,25/12/2024\nKH-01,Bá»†NH VIá»†N XYZ,customer,";
        } else {
            // --- THÃŠM Cá»˜T 'notes' VÃ€O ÄÃ‚Y ---
            headers = "productId*,productName*,lotNumber*,quantityRemaining*,expiryDate,unit,packaging,storageTemp,team,manufacturer,notes,creationDate";
            filename = "mau_import_san_pham_ton_kho.csv";
            // --- THÃŠM Dá»® LIá»†U MáºªU CHO Cá»˜T 'notes' ---
            sampleData = "SP001,BÃ”NG Cá»’N ALKOCIDE,L202501,100,31/12/2025,Há»™p,100 miáº¿ng/há»™p,Nhiá»‡t Ä‘á»™ phÃ²ng,MED,DentaLife,HÃ ng Æ°u tiÃªn,01/01/2025\nSP002,GÄ‚NG TAY Y Táº¾,GT001,50,,Há»™p,50 Ä‘Ã´i/há»™p,,MED,,HÃ ng dá»… vá»¡,"
        }
        
        const csvContent = "data:text/csv;charset=utf-8,\uFEFF" + headers + "\n" + sampleData;
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <div className={styles.dataImportPage}>
            <div className="page-header">
                <h1>Import Dá»¯ Liá»‡u HÃ ng Loáº¡t</h1>
            </div>

            <div className={styles.importContainer}>
                <div className={styles.importControls}>
                    <h3>1. Chá»n loáº¡i dá»¯ liá»‡u</h3>
                    <div className={styles.importTypeSelector}>
                        <button onClick={() => setImportType('inventory')} className={importType === 'inventory' ? styles.active : ''}>Sáº£n pháº©m & Tá»“n kho</button>
                        <button onClick={() => setImportType('partners')} className={importType === 'partners' ? styles.active : ''}>Äá»‘i tÃ¡c</button>
                    </div>

                    <h3>2. Chuáº©n bá»‹ dá»¯ liá»‡u</h3>
                    <p>Dá»¯ liá»‡u cáº§n á»Ÿ Ä‘á»‹nh dáº¡ng CSV (UTF-8). Báº¡n cÃ³ thá»ƒ dÃ¹ng file máº«u dÆ°á»›i Ä‘Ã¢y Ä‘á»ƒ Ä‘áº£m báº£o Ä‘Ãºng cáº¥u trÃºc cá»™t.</p>
                    <button onClick={downloadTemplate} className="btn-secondary" style={{ width: '100%' }}>
                        <FiDownload /> Táº£i File Máº«u
                    </button>
                    
                    <div className={styles.importInstructions}>
                         <FiInfo /> 
                         <div>
                            <strong>LÆ°u Ã½ quan trá»ng:</strong>
                            <ul>
                                <li>Cá»™t tiÃªu Ä‘á» (cÃ³ dáº¥u `*`) lÃ  báº¯t buá»™c pháº£i cÃ³ dá»¯ liá»‡u.</li>
                                <li>Náº¿u `productId` chÆ°a cÃ³, má»™t sáº£n pháº©m má»›i sáº½ Ä‘Æ°á»£c tá»± Ä‘á»™ng táº¡o.</li>
                                <li>Má»—i dÃ²ng trong file sáº½ táº¡o ra má»™t lÃ´ hÃ ng tá»“n kho má»›i.</li>
                                <li>Náº¿u `partnerId` Ä‘Ã£ tá»“n táº¡i, dá»¯ liá»‡u cÅ© sáº½ bá»‹ **ghi Ä‘Ã¨**.</li>
                                <li>Cá»™t `creationDate` (Ä‘á»‹nh dáº¡ng dd/mm/yyyy) náº¿u bá» trá»‘ng sáº½ tá»± láº¥y ngÃ y hiá»‡n táº¡i.</li>
                            </ul>
                         </div>
                    </div>
                </div>

                <div className={styles.importActions}>
                    <h3>3. Táº£i lÃªn vÃ  thá»±c hiá»‡n</h3>
                     <div className={styles.importMethod}>
                        <h4>CÃ¡ch 1: Táº£i lÃªn file .csv</h4>
                        <input type="file" accept=".csv" onChange={handleFileImport} disabled={isImporting} />
                     </div>
                     <div className={styles.importMethod}>
                        <h4>CÃ¡ch 2: DÃ¡n dá»¯ liá»‡u tá»« Excel/Google Sheets</h4>
                        <textarea 
                            rows="8" 
                            placeholder="DÃ¡n dá»¯ liá»‡u cá»§a báº¡n vÃ o Ä‘Ã¢y (bao gá»“m cáº£ dÃ²ng tiÃªu Ä‘á»)"
                            value={pastedData}
                            onChange={(e) => setPastedData(e.target.value)}
                            disabled={isImporting}
                        ></textarea>
                        <button onClick={handlePasteImport} className="btn-primary" disabled={isImporting} style={{marginTop: '10px'}}>
                            <FiUpload /> {isImporting ? 'Äang import...' : 'Import tá»« dá»¯ liá»‡u Ä‘Ã£ dÃ¡n'}
                        </button>
                    </div>
                    <div className={styles.importLogContainer}>
                        <h4>Nháº­t kÃ½ Import</h4>
                        <div className={styles.importLog}>
                            {importLog.length === 0 && <p>ChÆ°a cÃ³ hoáº¡t Ä‘á»™ng nÃ o.</p>}
                            {importLog.map((log, index) => (
                                <p key={index} className={`${styles.logItem} ${styles[`log-${log.type}`]}`}>
                                    <span>[{log.time}]</span> {log.message}
                                </p>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default DataImportPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\ExportListPage.jsx ---


// src/pages/ExportListPage.jsx
import React, { useState, useMemo } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc, getDoc, collection, query, orderBy } from 'firebase/firestore';
import { FiCheckCircle, FiXCircle, FiEdit, FiEye, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { useRealtimeNotification } from '../hooks/useRealtimeNotification';
import ViewExportSlipModal from '../components/ViewExportSlipModal';
import EditExportSlipModal from '../components/EditExportSlipModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';
import NewDataNotification from '../components/NewDataNotification';

const ExportListPage = () => {
  const [selectedSlip, setSelectedSlip] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, data: null, title: '', message: '', onConfirm: null, confirmText: 'XÃ¡c nháº­n' });

  const baseQuery = useMemo(() => query(collection(db, 'export_tickets'), orderBy("createdAt", "desc")), []);
  
  const {
    documents: exportSlips,
    loading,
    isLastPage,
    page,
    nextPage,
    prevPage,
    reset
  } = useFirestorePagination(baseQuery, PAGE_SIZE);

  const { hasNewData, dismissNewData } = useRealtimeNotification(baseQuery);

  const handleRefresh = () => {
    dismissNewData(); // <-- Äáº·t láº¡i tráº¡ng thÃ¡i cá»§a notification
    reset();          // <-- Táº£i láº¡i dá»¯ liá»‡u tá»« trang Ä‘áº§u
  };

  const handleConfirmExport = async (slip) => {
    try {
      for (const item of slip.items) {
        const lotRef = doc(db, 'inventory_lots', item.lotId);
        const lotSnap = await getDoc(lotRef);
        if (lotSnap.exists()) {
          const currentQuantity = lotSnap.data().quantityRemaining;
          const newQuantityRemaining = currentQuantity - (item.quantityToExport || item.quantityExported);
          if (newQuantityRemaining < 0) {
            toast.error(`Lá»—i: Tá»“n kho cá»§a lÃ´ ${item.lotNumber} khÃ´ng Ä‘á»§ Ä‘á»ƒ xuáº¥t.`);
            return;
          }
          await updateDoc(lotRef, { quantityRemaining: newQuantityRemaining });
        }
      }
      const slipRef = doc(db, 'export_tickets', slip.id);
      await updateDoc(slipRef, { status: 'completed' });
      toast.success('XÃ¡c nháº­n xuáº¥t kho thÃ nh cÃ´ng!');
      reset();
    } catch (error) {
      console.error("Lá»—i khi xÃ¡c nháº­n xuáº¥t kho: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ¡c nháº­n.');
    } finally {
        setConfirmModal({ isOpen: false });
    }
  };

  const handleCancelSlip = async (slip) => {
    try {
      const slipRef = doc(db, 'export_tickets', slip.id);
      await updateDoc(slipRef, { status: 'cancelled' });
      toast.success('Há»§y phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
      reset();
    } catch (error) {
      console.error("Lá»—i khi há»§y phiáº¿u: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi há»§y phiáº¿u.');
    } finally {
        setConfirmModal({ isOpen: false });
    }
  };

  const handleSaveSlipChanges = async (updatedSlip) => {
    try {
      const slipDocRef = doc(db, "export_tickets", updatedSlip.id);
      await updateDoc(slipDocRef, { 
          items: updatedSlip.items,
          customer: updatedSlip.customer,
          description: updatedSlip.description,
          exportDate: updatedSlip.exportDate // <-- THÃŠM DÃ’NG NÃ€Y
      });
      setIsEditModalOpen(false);
      reset();
      toast.success('Cáº­p nháº­t phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t phiáº¿u xuáº¥t: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
    }
  };

  const promptAction = (action, slip) => {
    if (action === 'confirm') {
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xuáº¥t kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n xuáº¥t kho cho phiáº¿u cá»§a khÃ¡ch hÃ ng "${slip.customer}" khÃ´ng?`,
            onConfirm: () => handleConfirmExport(slip),
            confirmText: "XÃ¡c nháº­n"
        });
    } else if (action === 'cancel') {
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n há»§y phiáº¿u?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n Há»¦Y phiáº¿u xuáº¥t cá»§a khÃ¡ch hÃ ng "${slip.customer}" khÃ´ng? Thao tÃ¡c nÃ y sáº½ khÃ´ng trá»« tá»“n kho.`,
            onConfirm: () => handleCancelSlip(slip),
            confirmText: "Äá»“ng Ã½ há»§y"
        });
    }
  };

  const openViewModal = (slip) => { setSelectedSlip(slip); setIsViewModalOpen(true); };
  
  const openEditModal = async (slip) => {
    const slipWithDetails = JSON.parse(JSON.stringify(slip));
    try {
      toast.info("Äang láº¥y dá»¯ liá»‡u tá»“n kho má»›i nháº¥t...");
      for (const item of slipWithDetails.items) {
        if (item.lotId) {
          const lotRef = doc(db, 'inventory_lots', item.lotId);
          const lotSnap = await getDoc(lotRef);
          if (lotSnap.exists()) {
            item.quantityRemaining = lotSnap.data().quantityRemaining;
          } else {
            item.quantityRemaining = 0;
            toast.warn(`LÃ´ ${item.lotNumber} khÃ´ng cÃ²n tá»“n táº¡i trong kho.`);
          }
        }
      }
      setSelectedSlip(slipWithDetails);
      setIsEditModalOpen(true);
    } catch (error) {
      console.error("Lá»—i khi láº¥y chi tiáº¿t lÃ´ Ä‘á»ƒ chá»‰nh sá»­a:", error);
      toast.error("KhÃ´ng thá»ƒ láº¥y dá»¯ liá»‡u tá»“n kho má»›i nháº¥t.");
    }
  };
  
  return (
    <div>
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={confirmModal.onConfirm}
        onCancel={() => setConfirmModal({ isOpen: false })}
        confirmText={confirmModal.confirmText}
      />
      {isEditModalOpen && ( <EditExportSlipModal slip={selectedSlip} onClose={() => setIsEditModalOpen(false)} onSave={handleSaveSlipChanges} /> )}
      {isViewModalOpen && ( <ViewExportSlipModal slip={selectedSlip} onClose={() => setIsViewModalOpen(false)} /> )}
      
      <div className="page-header">
        <h1>Danh sÃ¡ch Phiáº¿u Xuáº¥t Kho</h1>
      </div>

      <NewDataNotification
        isVisible={hasNewData}
        onRefresh={handleRefresh}
        message="CÃ³ phiáº¿u xuáº¥t má»›i!"
      />

      {loading ? <Spinner /> : (
        <>
            <table className="products-table list-page-table">
                <thead>
                <tr>
                    <th>NgÃ y táº¡o</th>
                    <th>KhÃ¡ch hÃ ng / NÆ¡i nháº­n</th>
                    <th>Diá»…n giáº£i</th>
                    <th>Tráº¡ng thÃ¡i</th>
                    <th>Thao tÃ¡c</th>
                </tr>
                </thead>
                <tbody>
                {exportSlips.length > 0 ? (
                    exportSlips.map(slip => (
                    <tr key={slip.id}>
                        <td>{formatDate(slip.createdAt)}</td>
                        <td>{slip.customer}</td>
                        <td>{slip.description}</td>
                        <td><StatusBadge status={slip.status} /></td>
                        <td>
                            <div className="action-buttons">
                                <button className="btn-icon btn-view" title="Xem chi tiáº¿t" onClick={() => openViewModal(slip)}>
                                    <FiEye />
                                </button>
                                {slip.status === 'pending' && (
                                <>
                                    <button className="btn-icon btn-edit" title="Sá»­a phiáº¿u" onClick={() => openEditModal(slip)}>
                                        <FiEdit />
                                    </button>
                                    <button className="btn-icon btn-delete" title="Há»§y phiáº¿u" onClick={() => promptAction('cancel', slip)}>
                                        <FiXCircle />
                                    </button>
                                    <button className="btn-icon btn-confirm" title="XÃ¡c nháº­n xuáº¥t kho" onClick={() => promptAction('confirm', slip)}>
                                        <FiCheckCircle />
                                    </button>
                                </>
                                )}
                            </div>
                        </td>
                    </tr>
                    ))
                ) : (
                    <tr>
                        <td colSpan="5" style={{ textAlign: 'center' }}>ChÆ°a cÃ³ phiáº¿u xuáº¥t kho nÃ o.</td>
                    </tr>
                )}
                </tbody>
            </table>

            <div className="pagination-controls">
                <button onClick={prevPage} disabled={page <= 1 || loading}>
                    <FiChevronLeft /> Trang TrÆ°á»›c
                </button>
                <span>Trang {page}</span>
                <button onClick={nextPage} disabled={isLastPage || loading}>
                    Trang Tiáº¿p <FiChevronRight />
                </button>
            </div>
        </>
      )}
    </div>
  );
};

export default ExportListPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\ImportListPage.jsx ---


import React, { useState, useMemo } from 'react';
import { doc, updateDoc, addDoc, Timestamp, collection, query, orderBy, deleteDoc } from 'firebase/firestore';
import { FiEdit, FiEye, FiChevronLeft, FiChevronRight, FiTrash2, FiCheckCircle } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { db } from '../firebaseConfig';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { useRealtimeNotification } from '../hooks/useRealtimeNotification';
import EditImportSlipModal from '../components/EditImportSlipModal';
import ViewImportSlipModal from '../components/ViewImportSlipModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { parseDateString, formatDate } from '../utils/dateUtils';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';
import NewDataNotification from '../components/NewDataNotification';

const ImportListPage = () => {
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [selectedSlip, setSelectedSlip] = useState(null);
    const [isViewModalOpen, setIsViewModalOpen] = useState(false);
    
    // === Báº®T Äáº¦U THAY Äá»”I Cáº¤U TRÃšC STATE ===
    const [confirmModal, setConfirmModal] = useState({ 
        isOpen: false, 
        item: null, 
        title: '', 
        message: '', 
        confirmText: '', 
        action: null // ThÃªm 'action' Ä‘á»ƒ biáº¿t cáº§n lÃ m gÃ¬
    });
    // === Káº¾T THÃšC THAY Äá»”I Cáº¤U TRÃšC STATE ===

    const baseQuery = useMemo(() => query(collection(db, 'import_tickets'), orderBy("createdAt", "desc")), []);
    
    const { 
        documents: importSlips, 
        loading, 
        isLastPage, 
        page, 
        nextPage, 
        prevPage,
        reset
    } = useFirestorePagination(baseQuery, PAGE_SIZE);

    const { hasNewData, dismissNewData } = useRealtimeNotification(baseQuery);

    const handleRefresh = () => {
        dismissNewData();
        reset();
    };

    const handleConfirmImport = async (slipToConfirm) => {
        if (!slipToConfirm) return;
        const slip = slipToConfirm;
        
        try {
            for (const item of slip.items) {
                let expiryTimestamp = null;
                if (item.expiryDate && item.expiryDate.trim() !== '' && item.expiryDate.toUpperCase() !== 'N/A') {
                    const expiryDateObject = parseDateString(item.expiryDate);
                    if (!expiryDateObject) {
                        toast.error(`HSD cá»§a máº·t hÃ ng ${item.productName} (${item.lotNumber}) cÃ³ Ä‘á»‹nh dáº¡ng sai. Vui lÃ²ng sá»­a láº¡i.`);
                        return; // Dá»«ng hÃ m ngay táº¡i Ä‘Ã¢y
                    }
                    expiryTimestamp = Timestamp.fromDate(expiryDateObject);
                }

                const importDateObject = parseDateString(slip.importDate);
                const importTimestamp = importDateObject ? Timestamp.fromDate(importDateObject) : Timestamp.now();

                const newLotData = {
                    importDate: importTimestamp,
                    productId: item.productId,
                    productName: item.productName,
                    lotNumber: item.lotNumber,
                    expiryDate: expiryTimestamp,
                    unit: item.unit,
                    packaging: item.packaging,
                    storageTemp: item.storageTemp,
                    team: item.team,
                    manufacturer: item.manufacturer,
                    quantityImported: Number(item.quantity),
                    quantityRemaining: Number(item.quantity),
                    notes: item.notes,
                    supplierName: slip.supplierName,
                };
                await addDoc(collection(db, "inventory_lots"), newLotData);
            }

            const slipDocRef = doc(db, "import_tickets", slip.id);
            await updateDoc(slipDocRef, { status: "completed" });
            
            toast.success('XÃ¡c nháº­n nháº­p kho thÃ nh cÃ´ng!');
            reset();
        } catch (error) {
            console.error("Lá»—i khi xÃ¡c nháº­n nháº­p kho: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ¡c nháº­n nháº­p kho.');
        }
    };

    const handleSaveSlipChanges = async (updatedSlip) => {
        try {
            const slipDocRef = doc(db, "import_tickets", updatedSlip.id);
            await updateDoc(slipDocRef, { 
                items: updatedSlip.items,
                description: updatedSlip.description,
                importDate: updatedSlip.importDate
            });

            setIsEditModalOpen(false);
            reset();
            toast.success('Cáº­p nháº­t phiáº¿u nháº­p thÃ nh cÃ´ng!');
        } catch (error) {
            console.error("Lá»—i khi cáº­p nháº­t phiáº¿u nháº­p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
        }
    };
    
    const handleDeleteSlip = async (slipToDelete) => {
        if (!slipToDelete) return;
        
        toast.info(`Äang xÃ³a phiáº¿u nháº­p...`);
        try {
            const slipDocRef = doc(db, "import_tickets", slipToDelete.id);
            await deleteDoc(slipDocRef);
            toast.success(`ÄÃ£ xÃ³a thÃ nh cÃ´ng phiáº¿u nháº­p cá»§a NCC "${slipToDelete.supplierName}".`);
            reset();
        } catch (error) {
            console.error("Lá»—i khi xÃ³a phiáº¿u nháº­p: ", error);
            toast.error("ÄÃ£ xáº£y ra lá»—i khi xÃ³a phiáº¿u nháº­p.");
        }
    };

    // === Báº®T Äáº¦U Cáº¬P NHáº¬T CÃC HÃ€M prompt... ===
    const promptForConfirm = (slip) => {
        setConfirmModal({
            isOpen: true,
            item: slip,
            action: 'confirm', // GÃ¡n hÃ nh Ä‘á»™ng lÃ  'confirm'
            title: "XÃ¡c nháº­n nháº­p kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n xÃ¡c nháº­n vÃ  Ä‘Æ°a hÃ ng trong phiáº¿u cá»§a NCC "${slip.supplierName}" vÃ o kho khÃ´ng? Thao tÃ¡c nÃ y sáº½ cáº­p nháº­t tá»“n kho.`,
            confirmText: "XÃ¡c nháº­n"
        });
    };
    
    const promptForDelete = (slip) => {
        setConfirmModal({
            isOpen: true,
            item: slip,
            action: 'delete', // GÃ¡n hÃ nh Ä‘á»™ng lÃ  'delete'
            title: "XÃ¡c nháº­n xÃ³a phiáº¿u nháº­p?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n xÃ³a vÄ©nh viá»…n phiáº¿u nháº­p cá»§a NCC "${slip.supplierName}" khÃ´ng? Thao tÃ¡c nÃ y khÃ´ng thá»ƒ hoÃ n tÃ¡c.`,
            confirmText: "Váº«n xÃ³a"
        });
    };
    // === Káº¾T THÃšC Cáº¬P NHáº¬T CÃC HÃ€M prompt... ===

    // === Báº®T Äáº¦U HÃ€M Xá»¬ LÃ TRUNG TÃ‚M Má»šI ===
    const handleModalConfirm = () => {
        const { action, item } = confirmModal;
        
        // ÄÃ³ng modal trÆ°á»›c khi thá»±c hiá»‡n hÃ nh Ä‘á»™ng
        setConfirmModal({ isOpen: false, item: null, action: null });

        if (action === 'confirm') {
            handleConfirmImport(item);
        } else if (action === 'delete') {
            handleDeleteSlip(item);
        }
    };
    // === Káº¾T THÃšC HÃ€M Xá»¬ LÃ TRUNG TÃ‚M Má»šI ===

    const openEditModal = (slip) => { setSelectedSlip(slip); setIsEditModalOpen(true); };
    const openViewModal = (slip) => { setSelectedSlip(slip); setIsViewModalOpen(true); };
    
    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={handleModalConfirm} // <-- THAY Äá»”I QUAN TRá»ŒNG
                onCancel={() => setConfirmModal({ isOpen: false, item: null, action: null })}
                confirmText={confirmModal.confirmText}
            />
            {isViewModalOpen && ( <ViewImportSlipModal slip={selectedSlip} onClose={() => setIsViewModalOpen(false)} /> )}
            {isEditModalOpen && ( <EditImportSlipModal slip={selectedSlip} onClose={() => setIsEditModalOpen(false)} onSave={handleSaveSlipChanges} /> )}
            
            <div className="page-header">
                <h1>Danh sÃ¡ch Phiáº¿u Nháº­p Kho</h1>
            </div>

            <NewDataNotification
                isVisible={hasNewData}
                onRefresh={handleRefresh}
                message="CÃ³ phiáº¿u nháº­p má»›i!"
            />

            {loading ? <Spinner /> : (
                <>
                    <table className="products-table list-page-table">
                        <thead>
                            <tr>
                                <th>NgÃ y táº¡o</th>
                                <th>NhÃ  cung cáº¥p</th>
                                <th>Diá»…n giáº£i</th>
                                <th>Tráº¡ng thÃ¡i</th>
                                <th>Thao tÃ¡c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {importSlips.map(slip => (
                                <tr key={slip.id}>
                                    <td>{formatDate(slip.createdAt)}</td>
                                    <td>{slip.supplierName}</td>
                                    <td>{slip.description}</td>
                                    <td><StatusBadge status={slip.status} /></td>
                                    <td>
                                        <div className="action-buttons">
                                            <button className="btn-icon btn-view" title="Xem chi tiáº¿t" onClick={() => openViewModal(slip)}>
                                                <FiEye />
                                            </button>
                                            {slip.status === 'pending' && (
                                                <>
                                                    <button className="btn-icon btn-edit" title="Sá»­a phiáº¿u" onClick={() => openEditModal(slip)}>
                                                        <FiEdit />
                                                    </button>
                                                    <button className="btn-icon btn-delete" title="XÃ³a phiáº¿u" onClick={() => promptForDelete(slip)}>
                                                        <FiTrash2 />
                                                    </button>
                                                    <button className="btn-icon btn-confirm" title="XÃ¡c nháº­n nháº­p kho" onClick={() => promptForConfirm(slip)}>
                                                        <FiCheckCircle />
                                                    </button>
                                                </>
                                            )}
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    <div className="pagination-controls">
                        <button onClick={prevPage} disabled={page <= 1 || loading}>
                            <FiChevronLeft /> Trang TrÆ°á»›c
                        </button>
                        <span>Trang {page}</span>
                        <button onClick={nextPage} disabled={isLastPage || loading}>
                            Trang Tiáº¿p <FiChevronRight />
                        </button>
                    </div>
                </>
            )}
        </div>
    );
};

export default ImportListPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\InventoryPage.jsx ---


// src/pages/InventoryPage.jsx
import { formatNumber } from '../utils/numberUtils';
import React, { useState, useMemo } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, where, orderBy, Timestamp } from 'firebase/firestore';
import { toast } from 'react-toastify';
import InventoryFilters from '../components/InventoryFilters';
import TeamBadge from '../components/TeamBadge';
import TempBadge from '../components/TempBadge';
import { useAuth } from '../context/UserContext';
import Spinner from '../components/Spinner';
import { FiChevronLeft, FiChevronRight, FiPrinter } from 'react-icons/fi';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { useRealtimeNotification } from '../hooks/useRealtimeNotification'; // <-- THÃŠM DÃ’NG NÃ€Y
import NewDataNotification from '../components/NewDataNotification'; // <-- THÃŠM DÃ’NG NÃ€Y
import { PAGE_SIZE } from '../constants';

// <-- THAY Äá»”I 1: Import thÃªm hÃ m getRowColorByExpiry
import { formatDate, getRowColorByExpiry } from '../utils/dateUtils';

// <-- THAY Äá»”I 2: XÃ³a toÃ n bá»™ hÃ m getRowColorByExpiry á»Ÿ Ä‘Ã¢y

const InventoryPage = ({ pageTitle }) => {
    const { userRole } = useAuth();
    const [filters, setFilters] = useState({ team: 'all', dateStatus: 'all' });
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedRowId, setSelectedRowId] = useState(null);

    const baseQuery = useMemo(() => {
    // --- Báº®T Äáº¦U THAY Äá»”I ---
    // Quay láº¡i truy váº¥n gá»‘c, chá»‰ sáº¯p xáº¿p theo MÃ£ hÃ ng vÃ  NgÃ y nháº­p
    let q = query(
        collection(db, "inventory_lots"),
        orderBy("productId", "asc"),
        orderBy("importDate", "asc")
    );
    // --- Káº¾T THÃšC THAY Äá»”I ---

    // CÃ¡c bá»™ lá»c phá»¥ váº«n giá»¯ nguyÃªn
    if (userRole === 'med') {
        q = query(q, where("team", "==", "MED"));
    } else if (userRole === 'bio') {
        q = query(q, where("team", "in", ["BIO", "Spare Part"]));
    }

    if (filters.team !== 'all') {
        q = query(q, where("team", "==", filters.team));
    }

    if (filters.dateStatus === 'expired') {
        q = query(q, where("expiryDate", "<", Timestamp.now()));
    } else if (filters.dateStatus === 'near_expiry') {
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + 120);
        q = query(q, where("expiryDate", ">=", Timestamp.now()), where("expiryDate", "<=", Timestamp.fromDate(futureDate)));
    }
    
    if (searchTerm) {
        const upperSearchTerm = searchTerm.toUpperCase();
        q = query(q, where("productId", ">=", upperSearchTerm), where("productId", "<=", upperSearchTerm + '\uf8ff'));
    }
    return q;
}, [userRole, filters, searchTerm]);

    const {
        documents: inventory,
        loading,
        isLastPage,
        page,
        nextPage,
        prevPage,
        reset
    } = useFirestorePagination(baseQuery, PAGE_SIZE);

    const { hasNewData, dismissNewData } = useRealtimeNotification(baseQuery);

    // <-- THÃŠM HÃ€M Xá»¬ LÃ REFRESH NÃ€Y
    const handleRefresh = () => {
      dismissNewData();
      reset();
    };

    const handleFilterChange = (filterName, value) => {
        setFilters(prev => ({ ...prev, [filterName]: value }));
    };

    const handleRowClick = (lotId) => {
        setSelectedRowId(prevId => (prevId === lotId ? null : lotId));
    };

    return (
       <div className="printable-inventory-area">

            <NewDataNotification
              isVisible={hasNewData}
              onRefresh={handleRefresh}
              message="CÃ³ cáº­p nháº­t tá»“n kho má»›i!"
            />
            
            <div className="controls-container">
                <InventoryFilters 
                    userRole={userRole} 
                    onFilterChange={handleFilterChange} 
                    activeFilters={filters}
                />
                <div className="search-container">
                     <input
                        type="text"
                        placeholder="TÃ¬m theo MÃ£ hÃ ng..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
            </div>

            {loading ? <Spinner /> : (
                <>
                    <div className="table-container">
                        <table className="inventory-table">
                            <thead>
                                <tr>
                                    <th>NgÃ y nháº­p</th>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    <th>SL Nháº­p</th>
                                    <th>SL CÃ²n láº¡i</th>
                                    <th>Ghi chÃº</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    <th>Team</th>
                                </tr>
                            </thead>
                            <tbody className="inventory-table-body">
                                {inventory.map(lot => (
                                    <tr 
                                        key={lot.id} 
                                        onClick={() => handleRowClick(lot.id)}
                                        className={`${selectedRowId === lot.id ? 'selected-row' : ''} ${getRowColorByExpiry(lot.expiryDate)}`}
                                    >
                                        <td data-label="NgÃ y nháº­p">{formatDate(lot.importDate)}</td>
                                        <td data-label="MÃ£ hÃ ng">{lot.productId}</td>
                                        <td data-label="TÃªn hÃ ng">{lot.productName}</td>
                                        <td data-label="Sá»‘ lÃ´">{lot.lotNumber}</td>
                                        <td data-label="HSD">{formatDate(lot.expiryDate)}</td>
                                        <td data-label="ÄVT">{lot.unit}</td>
                                        <td data-label="Quy cÃ¡ch">{lot.packaging}</td>
                                        <td data-label="SL Nháº­p">{formatNumber(lot.quantityImported)}</td>
                                        <td data-label="SL CÃ²n láº¡i">{formatNumber(lot.quantityRemaining)}</td>
                                        <td data-label="Ghi chÃº">{lot.notes}</td>
                                        <td data-label="Nhiá»‡t Ä‘á»™ BQ"><TempBadge temperature={lot.storageTemp} /></td>
                                        <td data-label="Team"><TeamBadge team={lot.team} /></td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
             
                    <div className="pagination-controls">
                        <button onClick={prevPage} disabled={page <= 1 || loading}>
                            <FiChevronLeft /> Trang TrÆ°á»›c
                        </button>
                        <span>Trang {page}</span>
                        <button onClick={nextPage} disabled={isLastPage || loading}>
                            Trang Tiáº¿p <FiChevronRight />
                        </button>
                    </div>
                </>
            )}
        </div>
    );
};

export default InventoryPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\InventorySummaryPage.jsx ---


// src/pages/InventorySummaryPage.jsx

import { formatNumber } from '../utils/numberUtils';
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { db } from '../firebaseConfig';
import {
    collection,
    query,
    getDocs,
    where,
    orderBy,
    documentId,
    limit,
    startAfter,
    Timestamp,
    doc,
    getDoc,
    onSnapshot
} from 'firebase/firestore';
import NewDataNotification from '../components/NewDataNotification';
import TeamBadge from '../components/TeamBadge';
import TempBadge from '../components/TempBadge';
import { FiChevronDown, FiChevronRight, FiChevronLeft, FiPrinter } from 'react-icons/fi';
import { useAuth } from '../context/UserContext';
import Spinner from '../components/Spinner';
import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import { toast } from 'react-toastify';
import '../styles/Responsive.css';
import { formatDate, getRowColorByExpiry } from '../utils/dateUtils';
import HighlightText from '../components/HighlightText';
import companyLogo from '../assets/logo.png'; // <-- THÃŠM DÃ’NG NÃ€Y

const PAGE_SIZE = 15;

const getLotItemColorClass = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    expDate.setHours(0, 0, 0, 0);
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'lot-item-expired';
    if (diffDays <= 60) return 'lot-item-red';
    if (diffDays <= 90) return 'lot-item-orange';
    if (diffDays <= 120) return 'lot-item-yellow';
    return '';
};

const InventorySummaryPage = ({ pageTitle }) => {
    const { userRole } = useAuth();
    const [summaries, setSummaries] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [expandedRows, setExpandedRows] = useState({});
    const [lotDetails, setLotDetails] = useState({});
    const [loadingLots, setLoadingLots] = useState({});
    
    const [lastVisible, setLastVisible] = useState(null);
    const [page, setPage] = useState(1);
    const [isLastPage, setIsLastPage] = useState(false);
    const [activeFilter, setActiveFilter] = useState({ type: 'none', value: '' });
    
    // State vÃ  Ref cho thÃ´ng bÃ¡o real-time
    const [hasNewData, setHasNewData] = useState(false);
    const lastSeenTimestampRef = useRef(null); // Sá»­ dá»¥ng láº¡i ref Ä‘á»ƒ lÆ°u timestamp

    const fetchData = useCallback(async (direction = 'next', cursor = null) => {
        setLoading(true);
        try {
            let baseCollectionRef;
            let queryConstraints = [];
            const isDateFilter = activeFilter.type === 'near_expiry' || activeFilter.type === 'expired';

            if (userRole === 'med') {
                queryConstraints.push(where("team", "==", "MED"));
            } else if (userRole === 'bio') {
                queryConstraints.push(where("team", "in", ["BIO", "Spare Part"]));
            }
            
            if (isDateFilter) {
                baseCollectionRef = collection(db, "product_summaries");
                if (activeFilter.type === 'near_expiry') {
                    const today = Timestamp.now();
                    const futureDate = new Date();
                    futureDate.setDate(futureDate.getDate() + 120);
                    const futureTimestamp = Timestamp.fromDate(futureDate);
                    queryConstraints.push(where("nearestExpiryDate", ">=", today));
                    queryConstraints.push(where("nearestExpiryDate", "<=", futureTimestamp));
                    queryConstraints.push(orderBy("nearestExpiryDate", "asc"));
                } else {
                    const today = Timestamp.now();
                    queryConstraints.push(where("nearestExpiryDate", "<", today));
                    queryConstraints.push(orderBy("nearestExpiryDate", "asc"));
                }
            } else {
                baseCollectionRef = collection(db, "products");
                if (activeFilter.type === 'team') {
                    queryConstraints.push(where("team", "==", activeFilter.value));
                }
                queryConstraints.push(orderBy(documentId(), "asc"));
            }

            if (direction === 'next' && cursor) {
                queryConstraints.push(startAfter(cursor));
            } else if (direction === 'first') {
                setPage(1);
            }
            queryConstraints.push(limit(PAGE_SIZE));
            
            const mainQuery = query(baseCollectionRef, ...queryConstraints);
            const mainSnapshot = await getDocs(mainQuery);

            if (mainSnapshot.empty) {
                setSummaries([]);
                setIsLastPage(true);
                setLastVisible(null);
                setLoading(false);
                return;
            }

            const mainDocs = mainSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (isDateFilter) {
                setSummaries(mainDocs);
            } else {
                const productIds = mainDocs.map(doc => doc.id);
                if (productIds.length > 0) {
                    const summariesQuery = query(collection(db, "product_summaries"), where(documentId(), 'in', productIds));
                    const summariesSnapshot = await getDocs(summariesQuery);
                    const summariesMap = new Map(summariesSnapshot.docs.map(doc => [doc.id, doc.data()]));
                    const mergedData = mainDocs.map(product => {
                        const summaryData = summariesMap.get(product.id);
                        return { ...product, totalRemaining: summaryData?.totalRemaining ?? 0, nearestExpiryDate: summaryData?.nearestExpiryDate ?? null };
                    });
                    setSummaries(mergedData);
                } else {
                    setSummaries([]);
                }
            }

            setLastVisible(mainSnapshot.docs[mainSnapshot.docs.length - 1] || null);
            setIsLastPage(mainSnapshot.docs.length < PAGE_SIZE);

        } catch (error) {
            console.error("Lá»—i khi táº£i dá»¯ liá»‡u tá»•ng há»£p: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u. Vui lÃ²ng kiá»ƒm tra Console (F12) Ä‘á»ƒ xem lá»—i vÃ  táº¡o Index náº¿u cáº§n.");
        } finally {
            setLoading(false);
        }
    }, [activeFilter, userRole]);

    const performSearch = useCallback(async (term) => {
        if (!term) return;
        setLoading(true);
        try {
            let baseSearchRef = collection(db, "products");
            let searchConstraints = [];

            if (userRole === 'med') {
               searchConstraints.push(where("team", "==", "MED"));
            } else if (userRole === 'bio') {
                searchConstraints.push(where("team", "in", ["BIO", "Spare Part"]));
            }

            const upperTerm = term.toUpperCase();
            const productSearchQuery = query(baseSearchRef, ...searchConstraints, where(documentId(), ">=", upperTerm), where(documentId(), "<=", upperTerm + '\uf8ff'));
            const lotSearchQuery = query(collection(db, "inventory_lots"), where("lotNumber", "==", term));
 
            const [productSnap, lotSnap] = await Promise.all([ getDocs(productSearchQuery), getDocs(lotSearchQuery) ]);
            
            const foundProductIds = new Set(productSnap.docs.map(doc => doc.id));
            const allowedTeams = userRole === 'med' ? ['MED'] : (userRole === 'bio' ? ['BIO', 'Spare Part'] : null);
            for (const lotDoc of lotSnap.docs) {
                const productId = lotDoc.data().productId;
                if (allowedTeams) {
                    const productRef = doc(db, "products", productId);
                    const productDoc = await getDoc(productRef);
                    if (productDoc.exists() && allowedTeams.includes(productDoc.data().team)) {
                        foundProductIds.add(productId);
                    }
                } else {
                    foundProductIds.add(productId);
                }
            }
          
            if (foundProductIds.size === 0) {
                setSummaries([]);
                setIsLastPage(true);
            } else {
                const ids = Array.from(foundProductIds).slice(0, 30);
                const finalProductsQuery = query( collection(db, "products"), where(documentId(), 'in', ids));
                const finalProductsSnap = await getDocs(finalProductsQuery);
                const finalProducts = finalProductsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));

                const summariesQuery = query(collection(db, "product_summaries"), where(documentId(), 'in', ids));
                const summariesSnapshot = await getDocs(summariesQuery);
                const summariesMap = new Map(summariesSnapshot.docs.map(doc => [doc.id, doc.data()]));
                
                const mergedData = finalProducts.map(product => {
                    const summaryData = summariesMap.get(product.id);
                    return { ...product, totalRemaining: summaryData?.totalRemaining ?? 0, nearestExpiryDate: summaryData?.nearestExpiryDate ?? null };
                });
                setSummaries(mergedData);
                setIsLastPage(true);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m kiáº¿m:", error);
        } finally {
            setLoading(false);
        }
    }, [userRole]);

    useEffect(() => {
        const debounce = setTimeout(() => {
            setLastVisible(null);
            setPage(1);
            if (searchTerm) {
                performSearch(searchTerm);
            } else {
                fetchData('first');
            }
        }, 500);
        return () => clearTimeout(debounce);
    }, [searchTerm, activeFilter, fetchData, performSearch]);

    // === LOGIC Láº®NG NGHE REAL-TIME ÄÃƒ ÄÆ¯á»¢C Sá»¬A Láº I ===
    useEffect(() => {
        const q = query(collection(db, "product_summaries"), orderBy("lastUpdatedAt", "desc"), limit(1));

        const unsubscribe = onSnapshot(q, (snapshot) => {
            if (snapshot.empty) return;

            const newestDocData = snapshot.docs[0].data();
            const newestTimestamp = newestDocData.lastUpdatedAt;

            // Náº¿u khÃ´ng cÃ³ timestamp thÃ¬ khÃ´ng xá»­ lÃ½
            if (!newestTimestamp) return;
            
            // Láº§n Ä‘áº§u tiÃªn listener cháº¡y, chá»‰ ghi láº¡i timestamp vÃ  thoÃ¡t
            if (lastSeenTimestampRef.current === null) {
                lastSeenTimestampRef.current = newestTimestamp;
                return;
            }

            // Tá»« láº§n thá»© hai trá»Ÿ Ä‘i, so sÃ¡nh timestamp má»›i vá»›i cÃ¡i Ä‘Ã£ lÆ°u
            if (lastSeenTimestampRef.current && newestTimestamp.toMillis() > lastSeenTimestampRef.current.toMillis()) {
                // Chá»‰ hiá»‡n thÃ´ng bÃ¡o náº¿u sá»± thay Ä‘á»•i khÃ´ng pháº£i tá»« cache cá»§a chÃ­nh client nÃ y
                 if (!snapshot.metadata.hasPendingWrites) {
                   setHasNewData(true);
                   // Cáº­p nháº­t láº¡i timestamp Ä‘Ã£ tháº¥y Ä‘á»ƒ khÃ´ng bÃ¡o láº¡i cho cÃ¹ng má»™t sá»± kiá»‡n
                   lastSeenTimestampRef.current = newestTimestamp;
                 }
            }
        }, (error) => {
            console.error("Lá»—i khi láº¯ng nghe real-time:", error);
        });

        return () => {
          unsubscribe();
          // Reset ref khi component unmount Ä‘á»ƒ láº§n sau vÃ o láº¡i nÃ³ sáº½ thiáº¿t láº­p láº¡i tá»« Ä‘áº§u
          lastSeenTimestampRef.current = null;
        };
    }, []);

    const handleRefresh = () => {
        setHasNewData(false);
        fetchData('first');
    };
    
     const toggleRow = async (productId) => {
        const isCurrentlyExpanded = !!expandedRows[productId];
        // LUÃ”N LUÃ”N Táº¢I Láº I Dá»® LIá»†U LÃ” KHI Báº¤M VÃ€O Äá»‚ Äáº¢M Báº¢O TÃNH Tá»¨C THá»œI
        setLoadingLots(prev => ({ ...prev, [productId]: true }));
        try {
            const lotsQuery = query(
                collection(db, "inventory_lots"),
                where("productId", "==", productId),
                where("quantityRemaining", ">", 0),
                orderBy("expiryDate", "asc")
            );
            const lotsSnapshot = await getDocs(lotsQuery);
            const lots = lotsSnapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));
            setLotDetails(prev => ({ ...prev, [productId]: lots }));
        } catch (error) {
            console.error("Lá»—i khi táº£i chi tiáº¿t lÃ´:", error);
            setLotDetails(prev => ({ ...prev, [productId]: [] }));
        } finally {
            setLoadingLots(prev => ({ ...prev, [productId]: false }));
        }
        
        setExpandedRows(prev => ({ ...prev, [productId]: !isCurrentlyExpanded }));
    };

    const handleNextPage = () => { if (!isLastPage) { setPage(p => p + 1); fetchData('next', lastVisible); } };
    const handlePrevPage = () => { fetchData('first'); };
    const handleFilterChange = (type, value = '') => { if (activeFilter.type === type && activeFilter.value === value) { setActiveFilter({ type: 'none', value: '' }); } else { setActiveFilter({ type, value }); } };
    
    const handlePrint = async () => {
        const originalTitle = document.title;
        document.title = `BaoCao_TonKho_TongHop_${new Date().toLocaleDateString('vi-VN')}`;
        const allProductIds = summaries.map(s => s.id);
        const fetchPromises = allProductIds.map(id => {
            if (!lotDetails[id]) return toggleRow(id);
            return Promise.resolve();
        });
        toast.info("Äang chuáº©n bá»‹ dá»¯ liá»‡u Ä‘á»ƒ in, vui lÃ²ng chá»...");
        await Promise.all(fetchPromises);
        const allExpanded = allProductIds.reduce((acc, id) => ({...acc, [id]: true}), {});
        setExpandedRows(allExpanded);
        
        setTimeout(() => {
            window.print();
            document.title = originalTitle;
            setExpandedRows({});
        }, 500);
    };

    return (
        <div className="printable-inventory-area">
    
            <NewDataNotification
                isVisible={hasNewData}
                onRefresh={handleRefresh}
                message="CÃ³ cáº­p nháº­t tá»“n kho má»›i!"
            />

            <div className="controls-container" style={{justifyContent: 'flex-start', flexWrap: 'wrap'}}>
                 {(userRole === 'owner' || userRole === 'admin') && (
                    <div className="filter-group">
                        <button className={activeFilter.value === 'MED' ? 'active' : ''} onClick={() => handleFilterChange('team', 'MED')}>Lá»c hÃ ng MED</button>
                        <button className={activeFilter.value === 'BIO' ? 'active' : ''} onClick={() => handleFilterChange('team', 'BIO')}>Lá»c hÃ ng BIO</button>
                        <button className={activeFilter.value === 'Spare Part' ? 'active' : ''} onClick={() => handleFilterChange('team', 'Spare Part')}>Lá»c hÃ ng Spare Part</button>
                    </div>
                )}
                
                {userRole === 'bio' && (
                     <div className="filter-group">
                        <button className={activeFilter.value === 'Spare Part' ? 'active' : ''} onClick={() => handleFilterChange('team', 'Spare Part')}>Lá»c hÃ ng Spare Part</button>
                    </div>
                )}

                <div className="filter-group">
                    <button className={activeFilter.type === 'near_expiry' ? 'active' : ''} onClick={() => handleFilterChange('near_expiry')}>Lá»c hÃ ng cáº­n date</button>
                    <button className={activeFilter.type === 'expired' ? 'active' : ''} onClick={() => handleFilterChange('expired')}>Lá»c hÃ ng háº¿t date</button>
                </div>
                <div className="search-container" style={{ flexGrow: 1, maxWidth: '400px' }}>
                    <input
                        type="text"
                        placeholder="TÃ¬m theo MÃ£ hÃ ng hoáº·c Sá»‘ lÃ´..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
            </div>

            {loading ? <Spinner /> : (
                <>
                    <div className="table-responsive-wrapper">
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th style={{width: '50px'}}></th>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>HSD Gáº§n Nháº¥t</th>
                                    <th>Tá»•ng Tá»“n</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    <th>Team</th>
                                </tr>
                            </thead>
                 
                            <tbody>
                                {summaries.map(product => (
                                    <React.Fragment key={product.id}>
                                        <tr 
                                            onClick={() => toggleRow(product.id)} 
                                            style={{cursor: 'pointer'}}
                                            className={getRowColorByExpiry(product.nearestExpiryDate)}
                                        >
                                            <td>{expandedRows[product.id] ? <FiChevronDown /> : <FiChevronRight />}</td>
                                            <td data-label="MÃ£ hÃ ng">
    <strong>
        <HighlightText text={product.id} highlight={searchTerm} />
    </strong>
</td>
                                            <td data-label="TÃªn hÃ ng">
    <HighlightText text={product.productName} highlight={searchTerm} />
</td>
                                            <td data-label="HSD Gáº§n Nháº¥t">{formatDate(product.nearestExpiryDate)}</td>
                                            <td data-label="Tá»•ng Tá»“n"><strong>{formatNumber(product.totalRemaining)}</strong></td>
                                            <td data-label="ÄVT">{product.unit}</td>
                                            <td data-label="Quy cÃ¡ch">{product.packaging}</td>
                                            <td data-label="Nhiá»‡t Ä‘á»™ BQ"><TempBadge temperature={product.storageTemp} /></td>
                                            <td data-label="Team"><TeamBadge team={product.team} /></td>
                                        </tr>
                             
                                        {expandedRows[product.id] && (
                                            <tr className="lot-details-row">
                                                <td colSpan="9">
                                                    <div className="lot-details-container">
                                                        {loadingLots[product.id] ? (
                                                            <SkeletonTheme baseColor="#e9ecef" highlightColor="#f8f9fa">
                                                                <h4><Skeleton width={200} /></h4>
                                                                <ul>
                                                                    <li><Skeleton height={35} count={3} style={{ marginBottom: '8px' }}/></li>
                                                                </ul>
                                                            </SkeletonTheme>
                                                        ) : (
                                                            (lotDetails[product.id] && lotDetails[product.id].length > 0) ? (
                                                                <>
                                                                    <h4>Chi tiáº¿t cÃ¡c lÃ´ hÃ ng (FEFO):</h4>
                                                                    <ul>
                                                                        {lotDetails[product.id].map(lot => (
                                                                            <li key={lot.id} className={`lot-item ${getLotItemColorClass(lot.expiryDate)}`}>
                                                                                <span>LÃ´: <strong>{lot.lotNumber}</strong></span>
                                                                                <span>HSD: <strong>{formatDate(lot.expiryDate)}</strong></span>
                                                                                <span>Tá»“n: <strong>{formatNumber(lot.quantityRemaining)}</strong></span>
                                                                            </li>
                                                                        ))}
                                                                    </ul>
                                                                </>
                                                            ) : <p>KhÃ´ng cÃ³ lÃ´ nÃ o cÃ²n tá»“n kho cho sáº£n pháº©m nÃ y.</p>
                                                        )}
                                                    </div>
                                                </td>
                                            </tr>
                                        )}
                                    </React.Fragment>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    {!searchTerm && (
                        <div className="pagination-controls">
                            <button onClick={handlePrevPage} disabled={page <= 1}>
                                <FiChevronLeft /> Trang TrÆ°á»›c
                            </button>
                            <span>Trang {page}</span>
                            <button onClick={handleNextPage} disabled={isLastPage}>
                                Trang Tiáº¿p <FiChevronRight />
                            </button>
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default InventorySummaryPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\LotTracePage.jsx ---


// src/pages/LotTracePage.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import {
  collection,
  query,
  where,
  getDocs,
  orderBy,
} from 'firebase/firestore';
import LotJourneyExplorer from '../components/LotJourneyExplorer';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import Spinner from '../components/Spinner';

const LotTracePage = () => {
  const [lotNumber, setLotNumber] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [importRecords, setImportRecords] = useState([]);
  const [exportHistory, setExportHistory] = useState([]);
  const [searchAttempted, setSearchAttempted] = useState(false);
  const [selectedNode, setSelectedNode] = useState(null);
  const [totalRemaining, setTotalRemaining] = useState(0); 

  const handleTrace = async () => {
    if (!lotNumber) {
      toast.warn('Vui lÃ²ng nháº­p sá»‘ lÃ´ cáº§n truy váº¿t.');
      return;
    }
    setIsLoading(true);
    setImportRecords([]);
    setExportHistory([]);
    setSearchAttempted(true);
    setSelectedNode(null);

    try {
      const lotQuery = query(
        collection(db, 'inventory_lots'),
        where('lotNumber', '==', lotNumber.trim()),
        orderBy('importDate', 'asc'),
      );
      const lotSnapshot = await getDocs(lotQuery);

      if (lotSnapshot.empty) {
        setIsLoading(false);
        return;
      }

      const foundImports = lotSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setImportRecords(foundImports);

      const adjustmentsQuery = query(
        collection(db, 'inventory_adjustments'),
        where('lotNumber', '==', lotNumber.trim()),
        orderBy('createdAt', 'desc')
      );
      const adjustmentsSnapshot = await getDocs(adjustmentsQuery);
      const latestAdjustment = adjustmentsSnapshot.docs[0]?.data();

      const history = [];
      const exportsQuery = query(
        collection(db, 'export_tickets'),
        orderBy('createdAt', 'asc'),
      );
      const exportsSnapshot = await getDocs(exportsQuery);

      exportsSnapshot.forEach((doc) => {
        const ticket = doc.data();
        const exportedItem = ticket.items.find(
          (item) => item.lotNumber === lotNumber.trim(),
        );
        if (exportedItem) {
          history.push({
            ticketId: doc.id,
            exportDate: ticket.createdAt,
            customer: ticket.customer,
            quantityExported: exportedItem.quantityToExport || exportedItem.quantityExported || 0,
          });
        }
      });
      setExportHistory(history);

      if (latestAdjustment) {
        foundImports[foundImports.length - 1].quantityRemaining = latestAdjustment.quantityAfter;
        setTotalRemaining(latestAdjustment.quantityAfter);
        toast.info(`Tá»“n kho Ä‘Ã£ Ä‘Æ°á»£c Ä‘iá»u chá»‰nh. Tá»“n kho hiá»‡n táº¡i: ${latestAdjustment.quantityAfter}`);
      } else {
        const totalRemainingFromImports = foundImports.reduce(
          (sum, record) => sum + record.quantityRemaining,
          0,
        );
        setTotalRemaining(totalRemainingFromImports);
      }

    } catch (error) {
      console.error('Lá»—i khi truy váº¿t lÃ´ hÃ ng: ', error);
      toast.error('ÄÃ£ cÃ³ lá»—i xáº£y ra khi truy váº¿t.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleNodeClick = (event, node) => {
    setSelectedNode(node.data);
  };
  const handlePaneClick = () => {
    setSelectedNode(null);
  };
  const filteredExportHistory = selectedNode && selectedNode.type === 'customer'
    ? exportHistory.filter(item => item.customer === selectedNode.name)
    : exportHistory;

  const masterInfo = importRecords.length > 0 ? importRecords[0] : null;
  const totalImported = importRecords.reduce(
    (sum, record) => sum + record.quantityImported,
    0,
  );
  
  return (
    <div>
      <div className="page-header">
        <h1>Truy Váº¿t LÃ´ HÃ ng</h1>
      </div>

      <div className="form-section">
        <div className="form-group">
          <label>Nháº­p Sá»‘ LÃ´ Cáº§n Truy Váº¿t</label>
          <div style={{ display: 'flex', gap: '10px' }}>
            <input
              type="text"
              value={lotNumber}
              onChange={(e) => setLotNumber(e.target.value)}
              placeholder="VÃ­ dá»¥: 4523468"
              onKeyDown={(e) => e.key === 'Enter' && handleTrace()}
              style={{ flexGrow: 1 }}
            />
            <button
              onClick={handleTrace}
              className="btn-primary"
              disabled={isLoading}
              style={{ width: 'auto' }}
            >
              {isLoading ? 'Äang tÃ¬m...' : 'Truy váº¿t'}
            </button>
          </div>
        </div>
      </div>

      {isLoading && <Spinner />}

      {!isLoading && searchAttempted && importRecords.length === 0 && (
        <div className="form-section">
          <h4>KhÃ´ng tÃ¬m tháº¥y thÃ´ng tin cho sá»‘ lÃ´ "{lotNumber}"</h4>
        </div>
      )}

      {!isLoading && importRecords.length > 0 && (
        <div>
          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>HÃ nh TrÃ¬nh LÃ´ HÃ ng: {masterInfo.lotNumber}</h3>
            <LotJourneyExplorer
              importRecords={importRecords}
              exportHistory={exportHistory}
              totalRemaining={totalRemaining}
              onNodeClick={handleNodeClick}
              onPaneClick={handlePaneClick}
            />
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>ThÃ´ng Tin Chung & TÃ³m Táº¯t</h3>
            <div className="compact-info-grid" style={{ gridTemplateColumns: '1fr 1fr 1fr' }}>
              <div><label>MÃ£ hÃ ng</label><p><strong>{masterInfo.productId}</strong></p></div>
              <div><label>TÃªn hÃ ng</label><p>{masterInfo.productName}</p></div>
              <div><label>NhÃ  cung cáº¥p (láº§n nháº­p Ä‘áº§u)</label><p>{masterInfo.supplier || '(khÃ´ng cÃ³)'}</p></div>
              <div><label>ÄVT</label><p>{masterInfo.unit}</p></div>
              <div><label>Quy cÃ¡ch</label><p>{masterInfo.packaging}</p></div>
              <div><label>Sá»‘ lÃ´</label><p><strong>{masterInfo.lotNumber}</strong></p></div>
              <div><label>HSD</label><p><strong>{formatDate(masterInfo.expiryDate)}</strong></p></div>
              <div><label>Tá»•ng Ä‘Ã£ nháº­p</label><p style={{color: 'blue', fontSize: '18px'}}><strong>{totalImported}</strong></p></div>
              <div><label>Tá»•ng cÃ²n láº¡i</label><p style={{color: 'green', fontSize: '18px'}}><strong>{totalRemaining}</strong></p></div>
            </div>
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>Chi Tiáº¿t CÃ¡c Láº§n Nháº­p Kho</h3>
            <table className="products-table list-page-table">
              <thead>
                <tr>
                  <th>NgÃ y nháº­p</th>
                  <th>NhÃ  cung cáº¥p</th>
                  <th>Sá»‘ lÆ°á»£ng nháº­p</th>
                  <th>SL cÃ²n láº¡i cá»§a láº§n nháº­p</th>
                </tr>
              </thead>
              <tbody>
                {importRecords.map((record) => (
                  <tr key={record.id}>
                    <td>{formatDate(record.importDate)}</td>
                    <td>{record.supplier || '(khÃ´ng cÃ³)'}</td>
                    <td>{record.quantityImported}</td>
                    <td>{record.quantityRemaining}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>
              {selectedNode && selectedNode.type === 'customer' 
                ? `Lá»‹ch Sá»­ Xuáº¥t Kho cho: ${selectedNode.name}`
                : 'ToÃ n Bá»™ Lá»‹ch Sá»­ Xuáº¥t Kho'
              }
            </h3>
            {filteredExportHistory.length > 0 ? (
              <table className="products-table list-page-table">
                <thead>
                  <tr>
                    <th>NgÃ y xuáº¥t</th>
                    <th>ID Phiáº¿u xuáº¥t</th>
                    <th>KhÃ¡ch hÃ ng</th>
                    <th>Sá»‘ lÆ°á»£ng Ä‘Ã£ xuáº¥t</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredExportHistory.map((item) => (
                    <tr key={item.ticketId}>
                      <td>{formatDate(item.exportDate)}</td>
                      <td>{item.ticketId}</td>
                      <td>{item.customer}</td>
                      <td>{item.quantityExported}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (<p>LÃ´ hÃ ng nÃ y chÆ°a Ä‘Æ°á»£c xuáº¥t kho láº§n nÃ o.</p>)}
          </div>
        </div>
      )}
    </div>
  );
};

export default LotTracePage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\MobileInventoryPage.jsx ---


// src/pages/MobileInventoryPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';
import { useAuth } from '../hooks/useAuth';
import Spinner from '../components/Spinner';
import { FiSearch, FiAlertCircle } from 'react-icons/fi';
import styles from '../styles/MobileInventoryPage.module.css';
import { formatDate } from '../utils/dateUtils';
import { formatNumber } from '../utils/numberUtils';

const MobileInventoryPage = () => {
    const { role: userRole } = useAuth();
    const [searchTerm, setSearchTerm] = useState('');
    const [productData, setProductData] = useState(null);
    const [loading, setLoading] = useState(false);

    const performSearch = useCallback(async (term) => {
        if (!term) {
            setProductData(null);
            return;
        }
        setLoading(true);
        try {
            const trimmedTerm = term.trim().toUpperCase();

            // Ãp dá»¥ng bá»™ lá»c team dá»±a trÃªn vai trÃ²
            let baseQuery = collection(db, 'inventory_lots');
            if (userRole === 'med') {
                baseQuery = query(baseQuery, where('team', '==', 'MED'));
            } else if (userRole === 'bio') {
                baseQuery = query(baseQuery, where('team', 'in', ['BIO', 'Spare Part']));
            }
            
            // TÃ¬m kiáº¿m theo nhiá»u trÆ°á»ng: productId vÃ  lotNumber
            const lotsByProductIdQuery = query(baseQuery, where('productId', '==', trimmedTerm));
            const lotsByLotNumberQuery = query(baseQuery, where('lotNumber', '==', trimmedTerm));

            const [byProductIdSnap, byLotNumberSnap] = await Promise.all([
                getDocs(lotsByProductIdQuery),
                getDocs(lotsByLotNumberQuery)
            ]);

            let lots = [
                ...byProductIdSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })),
                ...byLotNumberSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }))
            ];

            const uniqueLots = Array.from(new Map(lots.map(item => [item.id, item])).values());
            
            if (uniqueLots.length > 0) {
                const productId = uniqueLots[0].productId;
                const productDocRef = doc(db, 'products', productId);
                const productSnap = await getDoc(productDocRef);
                const productInfo = productSnap.exists() ? productSnap.data() : null;

                if (productInfo) {
                    const totalRemaining = uniqueLots.reduce((sum, lot) => sum + lot.quantityRemaining, 0);

                    setProductData({
                        generalInfo: { ...productInfo, productId: productId },
                        lots: uniqueLots.filter(lot => lot.quantityRemaining > 0).sort((a, b) => (a.expiryDate && b.expiryDate) ? a.expiryDate.toDate() - b.expiryDate.toDate() : 0),
                        totalRemaining: totalRemaining
                    });
                } else {
                    setProductData(null);
                }
            } else {
                // Náº¿u khÃ´ng tÃ¬m tháº¥y lÃ´ hÃ ng, thá»­ tÃ¬m tháº³ng sáº£n pháº©m theo ID Ä‘á»ƒ hiá»ƒn thá»‹ thÃ´ng tin chung
                const productDocRef = doc(db, 'products', trimmedTerm);
                const productSnap = await getDoc(productDocRef);

                if (productSnap.exists()) {
                    setProductData({
                        generalInfo: { ...productSnap.data(), productId: trimmedTerm },
                        lots: [],
                        totalRemaining: 0
                    });
                } else {
                    setProductData(null);
                }
            }
        } catch (error) {
            console.error("Lá»—i tra cá»©u tá»“n kho:", error);
            setProductData(null);
        } finally {
            setLoading(false);
        }
    }, [userRole]);

    useEffect(() => {
        const debounce = setTimeout(() => {
            performSearch(searchTerm);
        }, 500);
        return () => clearTimeout(debounce);
    }, [searchTerm, performSearch]);

    return (
        <div className={styles.container}>
            <div className={styles.searchBox}>
                <input 
                    type="text" 
                    value={searchTerm}
                    onChange={e => setSearchTerm(e.target.value)}
                    placeholder="TÃ¬m MÃ£ hÃ ng hoáº·c Sá»‘ lÃ´..."
                    autoFocus
                />
                <FiSearch className={styles.searchIcon} />
            </div>

            {loading ? (
                <Spinner />
            ) : productData ? (
                <div className={styles.resultsContainer}>
                    {/* Pháº§n thÃ´ng tin chung */}
                    <div className={styles.generalInfoCard}>
                        <h3>ThÃ´ng tin chung</h3>
                        <div className={styles.infoGrid}>
                            <div><strong>MÃ£ hÃ ng:</strong><span>{productData.generalInfo.productId}</span></div>
                            <div><strong>TÃªn hÃ ng:</strong><span>{productData.generalInfo.productName}</span></div>
                            <div><strong>ÄVT:</strong><span>{productData.generalInfo.unit}</span></div>
                            <div><strong>Quy cÃ¡ch:</strong><span>{productData.generalInfo.packaging}</span></div>
                            <div><strong>Nhiá»‡t Ä‘á»™ BQ:</strong><span>{productData.generalInfo.storageTemp}</span></div>
                            <div><strong>HÃ£ng SX:</strong><span>{productData.generalInfo.manufacturer}</span></div>
                            <div><strong>Team:</strong><span>{productData.generalInfo.team}</span></div>
                        </div>
                        <div className={styles.totalInfo}>
                            <strong>Tá»•ng tá»“n:</strong>
                            <span>{formatNumber(productData.totalRemaining)} {productData.generalInfo.unit}</span>
                        </div>
                    </div>
                    {/* Pháº§n danh sÃ¡ch lÃ´ hÃ ng */}
                    <div className={styles.lotListCard}>
                        <h3>Tá»“n kho theo lÃ´</h3>
                        {productData.lots.length > 0 ? (
                            productData.lots.map(lot => (
                                <div key={lot.id} className={styles.lotItem}>
                                    <div><strong>Sá»‘ lÃ´:</strong><span>{lot.lotNumber}</span></div>
                                    <div><strong>HSD:</strong><span>{lot.expiryDate ? formatDate(lot.expiryDate) : 'N/A'}</span></div>
                                    <div><strong>Tá»“n:</strong><span>{formatNumber(lot.quantityRemaining)} {productData.generalInfo.unit}</span></div>
                                    {lot.notes && <div><strong>Ghi chÃº:</strong><span>{lot.notes}</span></div>}
                                </div>
                            ))
                        ) : (
                            <p className={styles.emptyMessage}>KhÃ´ng cÃ³ lÃ´ hÃ ng nÃ o cÃ²n tá»“n kho.</p>
                        )}
                    </div>
                </div>
            ) : (
                <div classNameer="``{styles.noResults}">
                    <FiAlertCircle />
                    <p>Vui lÃ²ng nháº­p tá»« khÃ³a Ä‘á»ƒ tÃ¬m kiáº¿m.</p>
                </div>
            )}
        </div>
    );
};

export default MobileInventoryPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\NewExportPage.jsx ---


// src/pages/NewExportPage.jsx
import { formatNumber, parseFormattedNumber } from '../utils/numberUtils';
import ProductAutocomplete from '../components/ProductAutocomplete';
import React, { useState, useRef, useEffect, useMemo } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, doc, getDoc, updateDoc, addDoc, serverTimestamp } from 'firebase/firestore';
import { FiXCircle, FiChevronDown, FiAlertCircle } from 'react-icons/fi';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import { z } from 'zod';
import useExportSlipStore from '../stores/exportSlipStore';

const exportItemSchema = z.object({
    productId: z.string().min(1, { message: "MÃ£ hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
    selectedLotId: z.string().min(1, { message: "Vui lÃ²ng chá»n má»™t lÃ´ hÃ ng." }),
    quantityToExport: z.preprocess(
        val => Number(val),
        z.number({ invalid_type_error: "Sá»‘ lÆ°á»£ng xuáº¥t pháº£i lÃ  má»™t con sá»‘." })
         .gt(0, { message: "Sá»‘ lÆ°á»£ng xuáº¥t pháº£i lá»›n hÆ¡n 0." })
    )
});

const exportSlipSchema = z.object({
    customerId: z.string().min(1, { message: "MÃ£ khÃ¡ch hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng." }),
    customerName: z.string().min(1, { message: "KhÃ´ng tÃ¬m tháº¥y tÃªn khÃ¡ch hÃ ng tÆ°Æ¡ng á»©ng." }),
    items: z.array(exportItemSchema).min(1, { message: "Phiáº¿u xuáº¥t pháº£i cÃ³ Ã­t nháº¥t má»™t máº·t hÃ ng." })
});

const NewExportPage = () => {
    const {
        customerId, customerName, description, items, exportDate,
        setCustomer, setDescription, setExportDate, addNewItemRow, removeItemRow, updateItem,
        replaceItem, resetSlip
    } = useExportSlipStore();

    const [isProcessing, setIsProcessing] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const [allCustomers, setAllCustomers] = useState([]);
    const [focusedInputIndex, setFocusedInputIndex] = useState(null);
    
    const lotSelectRefs = useRef([]);
    const lastInputRef = useRef(null);
    const today = new Date().toISOString().split('T')[0];

    const isSlipValid = useMemo(() => {
        const hasCustomer = customerId.trim() !== '' && customerName.trim() !== '';
        const hasValidItem = items.some(
            item => item.productId && item.selectedLotId && Number(item.quantityToExport) > 0
        );
        return hasCustomer && hasValidItem;
    }, [customerId, customerName, items]);

    useEffect(() => {
        if (lastInputRef.current) {
            lastInputRef.current.focus();
        }
    }, [items.length]);

    useEffect(() => {
        const fetchCustomers = async () => {
            const q = query(collection(db, "partners"), where("partnerType", "==", "customer"));
            const querySnapshot = await getDocs(q);
            const customerList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAllCustomers(customerList);
        };
        fetchCustomers();
    }, []);

    const handleCustomerSearch = async () => {
        if (!customerId) {
            setCustomer(customerId, '');
            return;
        }
        try {
            const partnerRef = doc(db, 'partners', customerId.toUpperCase());
            const partnerSnap = await getDoc(partnerRef);
            if (partnerSnap.exists() && partnerSnap.data().partnerType === 'customer') {
                setCustomer(customerId, partnerSnap.data().partnerName);
            } else {
                setCustomer(customerId, '');
                toast.error(`KhÃ´ng tÃ¬m tháº¥y KhÃ¡ch hÃ ng vá»›i mÃ£ "${customerId}"`);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m khÃ¡ch hÃ ng:", error);
            setCustomer(customerId, '');
        }
    };

    const handleProductSearch = async (index, productOrId) => {
        if (!productOrId) return;
        replaceItem(index, { productName: '', unit: '', packaging: '', storageTemp: '', availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', quantityRemaining: 0, isOutOfStock: false });
        let productData;
        let productIdToSearch;
        if (typeof productOrId === 'object' && productOrId !== null) {
            productData = productOrId;
            productIdToSearch = productOrId.id;
            updateItem(index, 'productId', productIdToSearch);
        } else {
            productIdToSearch = String(productOrId).trim().toUpperCase();
            if (!productIdToSearch) return;
            const productRef = doc(db, 'products', productIdToSearch);
            const productSnap = await getDoc(productRef);
            if (!productSnap.exists()) {
                toast.warn(`KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m vá»›i mÃ£: ${productIdToSearch}`);
                return;
            }
            productData = { id: productSnap.id, ...productSnap.data() };
        }
        replaceItem(index, {
            productName: productData.productName,
            unit: productData.unit,
            packaging: productData.packaging,
            storageTemp: productData.storageTemp,
        });
        try {
            const lotsQuery = query(collection(db, 'inventory_lots'), where("productId", "==", productIdToSearch), where("quantityRemaining", ">", 0));
            const lotsSnapshot = await getDocs(lotsQuery);
            if (lotsSnapshot.empty) {
                updateItem(index, 'isOutOfStock', true);
            } else {
                const foundLots = lotsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                foundLots.sort((a, b) => {
                    const aHasExpiry = a.expiryDate && a.expiryDate.toDate;
                    const bHasExpiry = b.expiryDate && b.expiryDate.toDate;
                    if (!aHasExpiry && !bHasExpiry) return 0;
                    if (!aHasExpiry) return 1;
                    if (!bHasExpiry) return -1;
                    return a.expiryDate.toDate() - b.expiryDate.toDate();
                });
                replaceItem(index, {
                    availableLots: foundLots,
                    isOutOfStock: false,
                });
                setTimeout(() => lotSelectRefs.current[index]?.focus(), 0);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m kiáº¿m lÃ´ hÃ ng:", error);
            toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi tÃ¬m kiáº¿m lÃ´ hÃ ng.");
        }
    };
    
    const handleLotSelection = (index, selectedLotId) => {
        const currentItem = items[index];
        const selectedLot = currentItem.availableLots.find(lot => lot.id === selectedLotId);
        if (selectedLot) {
          replaceItem(index, {
              selectedLotId: selectedLotId,
              lotNumber: selectedLot.lotNumber,
              expiryDate: formatDate(selectedLot.expiryDate),
              quantityRemaining: selectedLot.quantityRemaining,
              displayLotText: selectedLot.lotNumber
          });
        } else {
           replaceItem(index, { selectedLotId: '', lotNumber: '', expiryDate: '', quantityRemaining: 0, displayLotText: '' });
        }
    };
    
    const handleRemoveRowWithConfirmation = (index) => {
        if (items.length <= 1) return;
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xÃ³a dÃ²ng?",
            message: "Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a dÃ²ng hÃ ng nÃ y khá»i phiáº¿u xuáº¥t?",
            onConfirm: () => {
                removeItemRow(index);
                setConfirmModal({ isOpen: false });
            }
        });
    };

    const getValidSlipData = () => {
        const dateObject = new Date(exportDate.replace(/-/g, '/'));
        const formattedDate = formatDate(dateObject);
        const validItems = items.filter(item => item.productId && item.selectedLotId && item.quantityToExport);
        const slipToValidate = {
            customerId: customerId.trim(),
            customerName: customerName.trim(),
            items: validItems
        };
        const validationResult = exportSlipSchema.safeParse(slipToValidate);
        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return null;
        }
        return {
            exportDate: formattedDate, 
            customerId: customerId.toUpperCase(), 
            customer: customerName,
            description, 
            items: validationResult.data.items.map(item => {
                const fullItemData = items.find(i => i.selectedLotId === item.selectedLotId);
                return {
                    productId: item.productId,
                    productName: fullItemData?.productName || '',
                    lotId: item.selectedLotId,
                    lotNumber: fullItemData?.lotNumber || '',
                    expiryDate: fullItemData?.expiryDate || '',
                    unit: fullItemData?.unit || '',
                    packaging: fullItemData?.packaging || '',
                    storageTemp: fullItemData?.storageTemp || '',
                    quantityToExport: item.quantityToExport,
                    notes: fullItemData?.notes || ''
                }
            }), 
            createdAt: serverTimestamp()
        };
    };

    const handleSaveDraft = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;
        setIsProcessing(true);
        try {
            await addDoc(collection(db, 'export_tickets'), { ...slipData, status: 'pending' });
            toast.success('LÆ°u nhÃ¡p phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
            resetSlip();
        } catch (error) {
            console.error("Lá»—i khi lÆ°u nhÃ¡p phiáº¿u xuáº¥t: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi lÆ°u nhÃ¡p.');
        } finally {
            setIsProcessing(false);
        }
    };

    const handleDirectExport = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;
        setConfirmModal({isOpen: false});
        setIsProcessing(true);
        try {
            for (const item of slipData.items) {
                const lotRef = doc(db, 'inventory_lots', item.lotId);
                const lotSnap = await getDoc(lotRef);
                if(lotSnap.exists()){
                    const currentQuantity = lotSnap.data().quantityRemaining;
                    const newQuantityRemaining = currentQuantity - item.quantityToExport;
                    await updateDoc(lotRef, { quantityRemaining: newQuantityRemaining });
                }
            }
            await addDoc(collection(db, 'export_tickets'), { ...slipData, status: 'completed' });
            toast.success('Xuáº¥t kho trá»±c tiáº¿p thÃ nh cÃ´ng!');
            resetSlip();
        } catch (error) {
            console.error("Lá»—i khi xuáº¥t kho trá»±c tiáº¿p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i trong quÃ¡ trÃ¬nh xuáº¥t kho.');
        } finally {
            setIsProcessing(false);
        }
    };
    
    const promptForDirectExport = () => {
        if (getValidSlipData()) {
             setConfirmModal({
                isOpen: true,
                title: "XÃ¡c nháº­n xuáº¥t kho?",
                message: "HÃ nh Ä‘á»™ng nÃ y sáº½ trá»« tá»“n kho ngay láº­p tá»©c. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n tiáº¿p tá»¥c?",
                onConfirm: handleDirectExport
            });
        }
    };
    
    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText="XÃ¡c nháº­n"
            />
            <h1>Táº¡o Phiáº¿u Xuáº¥t Kho</h1>
            <div className="form-section">
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y xuáº¥t</label>
                        <input 
                            type="date" 
                            value={exportDate}
                            min={today}
                            onChange={e => setExportDate(e.target.value)}
                        />
                    </div>
                    <div className="form-group">
                        <label>MÃ£ KhÃ¡ch HÃ ng (*)</label>
                        <input
                            list="customers-list"
                            type="text"
                            placeholder="Nháº­p hoáº·c chá»n mÃ£ KH..."
                            value={customerId}
                            onChange={e => setCustomer(e.target.value.toUpperCase(), customerName)}
                            onBlur={handleCustomerSearch}
                        />
                        <datalist id="customers-list">
                            {allCustomers.map(cus => (
                                <option key={cus.id} value={cus.id}>
                                    {cus.partnerName}
                                </option>
                            ))}
                        </datalist>
                    </div>
                    <div className="form-group">
                        <label>TÃªn KhÃ¡ch HÃ ng / NÆ¡i nháº­n (*)</label>
                        <input
                            type="text"
                            value={customerName}
                            readOnly
                            style={{ backgroundColor: '#f0f0f0', cursor: 'not-allowed' }}
                        />
                    </div>
                </div>
                <div className="form-group">
                    <label>Diá»…n giáº£i</label>
                    <textarea rows="2" placeholder="Ghi chÃº cho phiáº¿u xuáº¥t..." value={description} onChange={e => setDescription(e.target.value)}></textarea>
                </div>
            </div>

            <h2>Chi Tiáº¿t HÃ ng HÃ³a Xuáº¥t Kho</h2>
            <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 2fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 1.5fr 0.5fr' }}>
                <div className="grid-header">MÃ£ hÃ ng (*)</div>
                <div className="grid-header">TÃªn hÃ ng</div>
                <div className="grid-header">Sá»‘ lÃ´ (*)</div>
                <div className="grid-header">HSD (*)</div>
                <div className="grid-header">ÄVT</div>
                <div className="grid-header">Quy cÃ¡ch</div>
                <div className="grid-header">SL Xuáº¥t (*)</div>
                <div className="grid-header">Ghi chÃº</div>
                <div className="grid-header">Nhiá»‡t Ä‘á»™ BQ</div>
                <div className="grid-header">XÃ³a</div>

                {items.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <div className="grid-cell">
                            <ProductAutocomplete
                                value={item.productId}
                                onChange={(value) => updateItem(index, 'productId', value.toUpperCase())}
                                onSelect={(product) => handleProductSearch(index, product)}
                                onBlur={() => handleProductSearch(index, item.productId)}
                            />
                        </div>
                        <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            {item.isOutOfStock ? (
                                <div className="inline-warning"><FiAlertCircle /><span>Sáº£n pháº©m Ä‘Ã£ háº¿t hÃ ng!</span></div>
                            ) : item.selectedLotId ? (
                                <div className="selected-lot-view">
                                    <input type="text" value={item.displayLotText} readOnly className="selected-lot-input" />
                                    <button type="button" onClick={() => handleLotSelection(index, '')} className="change-lot-btn"><FiChevronDown /></button>
                                </div>
                            ) : (
                                <select
                                   ref={el => lotSelectRefs.current[index] = el}
                                    value={item.selectedLotId}
                                    onChange={e => handleLotSelection(index, e.target.value)}
                                    disabled={item.availableLots.length === 0}
                                    style={{width: '100%'}}
                                >
                                     <option value="">-- Chá»n lÃ´ tá»“n kho --</option>
                                    {item.availableLots.map(lot => (
                                        <option key={lot.id} value={lot.id}>
                                            {`LÃ´: ${lot.lotNumber} | HSD: ${formatDate(lot.expiryDate)} | Tá»“n: ${formatNumber(lot.quantityRemaining)}`}
                                        </option>
                                    ))}
                                </select>
                            )}
                        </div>
                        <div className="grid-cell"><input type="text" value={item.expiryDate} readOnly /></div>
                        <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                        <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                        <div className="grid-cell">
                            <input
                                type="text"
                                inputMode="numeric"
                                value={focusedInputIndex === index ? item.quantityToExport : formatNumber(item.quantityToExport)}
                                onFocus={() => setFocusedInputIndex(index)}
                                onBlur={() => setFocusedInputIndex(null)}
                                onChange={e => {
                                    const rawValue = e.target.value;
                                    const parsedValue = parseFormattedNumber(rawValue);
                                    if (/^\d*\.?\d*$/.test(parsedValue) || parsedValue === '') {
                                        updateItem(index, 'quantityToExport', parsedValue);
                                    }
                                }}
                            />
                        </div>
                        <div className="grid-cell"><textarea value={item.notes || ''} onChange={e => updateItem(index, 'notes', e.target.value)} /></div>
                        <div className="grid-cell"><input type="text" value={item.storageTemp} readOnly /></div>
                        <div className="grid-cell">
                            <button type="button" className="btn-icon btn-delete" onClick={() => handleRemoveRowWithConfirmation(index)}><FiXCircle /></button>
                        </div>
                    </React.Fragment>
                ))}
            </div>
            <button onClick={addNewItemRow} className="btn-secondary" style={{ marginTop: '10px' }}>+ ThÃªm dÃ²ng</button>
            <div className="page-actions">
                <button 
                    onClick={handleSaveDraft} 
                    className="btn-secondary" 
                    disabled={isProcessing || !isSlipValid}
                >
                    {isProcessing ? 'Äang xá»­ lÃ½...' : 'LÆ°u NhÃ¡p'}
                </button>
                <button 
                    onClick={promptForDirectExport} 
                    className="btn-primary" 
                    disabled={isProcessing || !isSlipValid}
                >
                    {isProcessing ? 'Äang xá»­ lÃ½...' : 'Xuáº¥t Kho Trá»±c Tiáº¿p'}
                </button>
            </div>
        </div>
    );
};

export default NewExportPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\NewImportPage.jsx ---


// src/pages/NewImportPage.jsx
import { formatNumber, parseFormattedNumber } from '../utils/numberUtils';
import ProductAutocomplete from '../components/ProductAutocomplete';
import React, { useState, useRef, useEffect, useMemo } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc, collection, addDoc, serverTimestamp, Timestamp, query, where, getDocs } from 'firebase/firestore';
import AddNewProductAndLotModal from '../components/AddNewProductAndLotModal';
import AddNewLotModal from '../components/AddNewLotModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { parseDateString, formatExpiryDate, formatDate } from '../utils/dateUtils';
import { FiInfo, FiXCircle } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { z } from 'zod';
import useImportSlipStore from '../stores/importSlipStore';

const importItemSchema = z.object({
  id: z.number(),
  productId: z.string().min(1, "MÃ£ hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng."),
  productName: z.string(),
  unit: z.string(),
  packaging: z.string(),
  storageTemp: z.string(),
  team: z.string(),
  manufacturer: z.string(),
  notes: z.string(),
  lotNumber: z.string(),
  quantity: z.preprocess(
      val => Number(val),
      z.number({ invalid_type_error: "Sá»‘ lÆ°á»£ng pháº£i lÃ  má»™t con sá»‘." })
       .gt(0, { message: "Sá»‘ lÆ°á»£ng pháº£i lá»›n hÆ¡n 0." })
  ),
  expiryDate: z.string().refine(val => {
      const trimmedVal = val.trim();
      // Há»£p lá»‡ náº¿u: Ä‘á»ƒ trá»‘ng, HOáº¶C lÃ  'N/A', HOáº¶C lÃ  ngÃ y há»£p lá»‡
      return trimmedVal === '' || trimmedVal.toUpperCase() === 'N/A' || parseDateString(trimmedVal) !== null;
  }, {
      message: "Háº¡n sá»­ dá»¥ng khÃ´ng há»£p lá»‡ (cáº§n Ä‘á»‹nh dáº¡ng dd/mm/yyyy hoáº·c Ä‘á»ƒ trá»‘ng)."
  }),
});

const importSlipSchema = z.object({
    supplierId: z.string().min(1, "MÃ£ nhÃ  cung cáº¥p khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng."),
    supplierName: z.string().min(1, "KhÃ´ng tÃ¬m tháº¥y tÃªn nhÃ  cung cáº¥p."),
    items: z.array(importItemSchema).min(1, "Phiáº¿u nháº­p pháº£i cÃ³ Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡.")
});

const NewImportPage = () => {
    const {
        supplierId, supplierName, description, items,
        setSupplier, setDescription, addNewItemRow, updateItem,
        handleProductSearchResult, handleLotCheckResult, declareNewLot,
        fillNewProductData, resetSlip, removeItemRow
    } = useImportSlipStore();

    const [isSaving, setIsSaving] = useState(false);
    const [newProductModal, setNewProductModal] = useState({ isOpen: false, productId: '', index: -1 });
    const [newLotModal, setNewLotModal] = useState({ isOpen: false, index: -1 });
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const [allSuppliers, setAllSuppliers] = useState([]);
    const [focusedInputIndex, setFocusedInputIndex] = useState(null);
    
    const lastInputRef = useRef(null);

    const isSlipValid = useMemo(() => {
        const hasSupplier = supplierId.trim() !== '' && supplierName.trim() !== '';
        const hasValidItem = items.some(
            item => item.productId && Number(item.quantity) > 0
        );
        return hasSupplier && hasValidItem;
    }, [supplierId, supplierName, items]);

    useEffect(() => {
        if (lastInputRef.current) {
            lastInputRef.current.focus();
        }
    }, [items.length]);

    useEffect(() => {
        const fetchSuppliers = async () => {
            const q = query(collection(db, "partners"), where("partnerType", "==", "supplier"));
            const querySnapshot = await getDocs(q);
            const supplierList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAllSuppliers(supplierList);
        };
        
        fetchSuppliers();
    }, []);

    const handleRemoveRow = (index) => {
        if (items.length <= 1) return;
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xÃ³a dÃ²ng?",
            message: "Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a dÃ²ng hÃ ng nÃ y khá»i phiáº¿u nháº­p khÃ´ng?",
            onConfirm: () => {
                removeItemRow(index);
                setConfirmModal({ isOpen: false });
            }
        });
    };

    const getValidSlipData = () => {
        const validItems = items.filter(item => 
            item.productId && item.quantity
        ).map(item => ({
            ...item,
            lotNumber: item.lotNumber.trim() || 'N/A'
        }));

        if (validItems.length === 0) {
            toast.warn("Phiáº¿u nháº­p pháº£i cÃ³ Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡.");
            return null;
        }

        const slipToValidate = {
            supplierId: supplierId.trim(),
            supplierName: supplierName.trim(),
            items: validItems
        };

        const validationResult = importSlipSchema.safeParse(slipToValidate);

        if (!validationResult.success) {
            toast.warn(validationResult.error.issues[0].message);
            return null;
        }

        return {
            ...validationResult.data,
            importDate: formatDate(new Date(importDate.replace(/-/g, '/'))),
            description,
            status: '',
            createdAt: serverTimestamp()
        };
    }

    const handleSupplierSearch = async () => {
        if (!supplierId) {
            setSupplier(supplierId, '');
            return;
        }
        try {
            const partnerRef = doc(db, 'partners', supplierId.toUpperCase());
            const partnerSnap = await getDoc(partnerRef);
            
            if (partnerSnap.exists() && partnerSnap.data().partnerType === 'supplier') {
                setSupplier(supplierId, partnerSnap.data().partnerName);
            } else {
                setSupplier(supplierId, '');
                toast.error(`KhÃ´ng tÃ¬m tháº¥y NhÃ  cung cáº¥p vá»›i mÃ£ "${supplierId}"`);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m nhÃ  cung cáº¥p:", error);
            toast.error("KhÃ´ng thá»ƒ Ä‘á»c dá»¯ liá»‡u NCC. Kiá»ƒm tra Console (F12)!"); 
            setSupplier(supplierId, '');
        }
    };

    const handleExpiryDateBlur = (index, value) => {
        updateItem(index, 'expiryDate', formatExpiryDate(value));
    };

    const checkExistingLot = async (index) => {
        const currentItem = items[index];
        if (!currentItem.productId || !currentItem.lotNumber) return;

        try {
            const q = query(
                collection(db, "inventory_lots"),
                where("productId", "==", currentItem.productId.trim()),
                where("lotNumber", "==", currentItem.lotNumber.trim())
            );
            const querySnapshot = await getDocs(q);
            
            if (!querySnapshot.empty) {
                const existingLotData = querySnapshot.docs[0].data();
                handleLotCheckResult(index, existingLotData, true);
            } else {
                handleLotCheckResult(index, null, false);
            }
        } catch (error) {
            console.error("Lá»—i khi kiá»ƒm tra lÃ´ tá»“n táº¡i: ", error);
        }
    };

    const handleProductSearch = async (index, productOrId) => {
        if (!productOrId) return;

        if (typeof productOrId === 'object' && productOrId !== null) {
            handleProductSearchResult(index, productOrId, true);
            updateItem(index, 'productId', productOrId.id);
            return;
        }

        const productId = String(productOrId).trim().toUpperCase();
        if (!productId) return;

        try {
            const productRef = doc(db, 'products', productId);
            const productSnap = await getDoc(productRef);

            if (productSnap.exists()) {
                handleProductSearchResult(index, { id: productSnap.id, ...productSnap.data() }, true);
            } else {
                handleProductSearchResult(index, null, false);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m kiáº¿m sáº£n pháº©m:", error);
            toast.error("Lá»—i khi tÃ¬m kiáº¿m sáº£n pháº©m!");
        }
    };

    const handleNewProductCreated = (newData) => {
        const { index } = newProductModal;
        fillNewProductData(index, newData);
        setNewProductModal({ isOpen: false, productId: '', index: -1 });
    };

    const handleSaveSlip = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;

        setIsSaving(true);
        try {
            const finalSlipData = { ...slipData, status: 'pending' };
            const docRef = await addDoc(collection(db, 'import_tickets'), finalSlipData);
            toast.success(`LÆ°u táº¡m phiáº¿u nháº­p thÃ nh cÃ´ng! ID phiáº¿u: ${docRef.id}`);
            resetSlip();
        } catch (error) {
            console.error("Lá»—i khi lÆ°u phiáº¿u nháº­p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi lÆ°u phiáº¿u.');
        } finally {
            setIsSaving(false);
        }
    };

    const handleDirectImport = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;

        setConfirmModal({ isOpen: false });
        setIsSaving(true);
        try {
            for (const item of slipData.items) {
                const expiryDateObj = parseDateString(item.expiryDate);
                const expiryTimestamp = expiryDateObj ? Timestamp.fromDate(expiryDateObj) : null;
                
                const newLotData = {
                    importDate: Timestamp.now(),
                    productId: item.productId,
                    productName: item.productName,
                    lotNumber: item.lotNumber,
                    expiryDate: expiryTimestamp,
                    unit: item.unit,
                    packaging: item.packaging,
                    storageTemp: item.storageTemp,
                    team: item.team,
                    manufacturer: item.manufacturer,
                    quantityImported: Number(item.quantity),
                    quantityRemaining: Number(item.quantity),
                    notes: item.notes,
                    supplier: slipData.supplierName,
                };
                await addDoc(collection(db, "inventory_lots"), newLotData);
            }
            
            const finalSlipData = { ...slipData, status: 'completed' };
            await addDoc(collection(db, 'import_tickets'), finalSlipData);
            
            toast.success('Nháº­p kho trá»±c tiáº¿p thÃ nh cÃ´ng!');
            resetSlip();
        } catch (error) {
            console.error("Lá»—i khi nháº­p kho trá»±c tiáº¿p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi nháº­p kho trá»±c tiáº¿p.');
        } finally {
            setIsSaving(false);
        }
    };

    const promptForDirectImport = () => {
        if (getValidSlipData()) {
            setConfirmModal({
                isOpen: true,
                title: "XÃ¡c nháº­n nháº­p kho trá»±c tiáº¿p?",
                message: "Thao tÃ¡c nÃ y sáº½ cáº­p nháº­t tá»“n kho ngay láº­p tá»©c vÃ  khÃ´ng thá»ƒ hoÃ n tÃ¡c. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n tiáº¿p tá»¥c?",
                onConfirm: handleDirectImport
            });
        }
    };

    return (
        <div>
            <ConfirmationModal 
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText="XÃ¡c nháº­n"
            />
            {newProductModal.isOpen && (
                <AddNewProductAndLotModal
                    productId={newProductModal.productId}
                    onClose={() => setNewProductModal({ isOpen: false, productId: '', index: -1 })}
                    onSave={handleNewProductCreated}
                />
            )}
            {newLotModal.isOpen && (
                <AddNewLotModal
                    productId={items[newLotModal.index].productId}
                    productName={items[newLotModal.index].productName}
                    lotNumber={items[newLotModal.index].lotNumber}
                    onClose={() => setNewLotModal({ isOpen: false, index: -1 })}
                    onSave={(expiry) => declareNewLot(newLotModal.index, expiry)}
                />
            )}

            <h1>Táº¡o Phiáº¿u Nháº­p Kho</h1>
            <div className="form-section">
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y nháº­p</label>
                        <input type="text" value={formatDate(new Date())} readOnly style={{backgroundColor: '#f0f0f0'}} />
                    </div>
                    <div className="form-group">
                        <label>MÃ£ NhÃ  Cung Cáº¥p (*)</label>
                        <input 
                            list="suppliers-list"
                            type="text" 
                            placeholder="Nháº­p hoáº·c chá»n mÃ£ NCC..." 
                            value={supplierId} 
                            onChange={e => setSupplier(e.target.value.toUpperCase(), '')}
                            onBlur={handleSupplierSearch}
                        />
                         <datalist id="suppliers-list">
                            {allSuppliers.map(sup => (
                                <option key={sup.id} value={sup.id}>
                                    {sup.partnerName}
                                </option>
                            ))}
                        </datalist>
                    </div>
                    <div className="form-group">
                         <label>TÃªn NhÃ  Cung Cáº¥p (*)</label>
                         <input 
                            type="text" 
                            value={supplierName} 
                            readOnly 
                            style={{ backgroundColor: '#f0f0f0', cursor: 'not-allowed' }}
                        />
                    </div>
                </div>
                <div className="form-group">
                    <label>Diá»…n giáº£i</label>
                    <textarea rows="2" placeholder="Ghi chÃº cho phiáº¿u nháº­p..." value={description} onChange={e => setDescription(e.target.value)}></textarea>
                </div>
            </div>

            <h2>Chi tiáº¿t hÃ ng hÃ³a</h2>
            <div className="item-details-grid" style={{ gridTemplateColumns: '1.2fr 2fr 1.1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 1fr 0.5fr' }}>
                <div className="grid-header">MÃ£ hÃ ng (*)</div>
                <div className="grid-header">TÃªn hÃ ng</div>
                <div className="grid-header">Sá»‘ lÃ´</div>
                <div className="grid-header">HSD</div>
                <div className="grid-header">ÄVT</div>
                <div className="grid-header">Quy cÃ¡ch</div>
                <div className="grid-header">Sá»‘ lÆ°á»£ng (*)</div>
                <div className="grid-header">Ghi chÃº</div>
                <div className="grid-header">Team</div>
                <div className="grid-header">XÃ³a</div>

                {items.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            <ProductAutocomplete
                                value={item.productId}
                                onChange={(value) => updateItem(index, 'productId', value.toUpperCase())}
                                onSelect={(product) => handleProductSearch(index, product)}
                                onBlur={() => handleProductSearch(index, item.productId)}
                            />
                            {item.productNotFound && (
                                <button
                                    onClick={() => setNewProductModal({ isOpen: true, productId: item.productId, index: index })}
                                    className="btn-link"
                                    style={{ marginTop: '5px', color: '#007bff', cursor: 'pointer', background: 'none', border: 'none', padding: '0', textAlign: 'left', fontSize: '13px' }}
                                >
                                    MÃ£ nÃ y khÃ´ng tá»“n táº¡i. Táº¡o má»›i...
                                </button>
                            )}
                        </div>
                        <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            <input
                                type="text"
                                value={item.lotNumber}
                                onChange={e => updateItem(index, 'lotNumber', e.target.value)}
                                onBlur={() => checkExistingLot(index)}
                            />
                            {item.lotStatus === 'exists' && item.existingLotInfo && (
                                <div className="existing-lot-info">
                                    <FiInfo />
                                    <span>LÃ´ Ä‘Ã£ cÃ³ | Tá»“n: {formatNumber(item.existingLotInfo.quantityRemaining)} | HSD: {item.existingLotInfo.expiryDate}</span>
                                </div>
                            )}
                            {item.lotStatus === 'new' && (
                                <button onClick={() => setNewLotModal({ isOpen: true, index: index })} className="btn-link" style={{marginTop: '5px'}}>
                                    [+] Khai bÃ¡o lÃ´ má»›i...
                                </button>
                            )}
                        </div>
                        <div className="grid-cell">
                            <input 
                                type="text" 
                                placeholder="dd/mm/yyyy" 
                                value={item.expiryDate} 
                                onChange={e => updateItem(index, 'expiryDate', e.target.value)} 
                                onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                                readOnly={item.lotStatus === 'exists'}
                                style={{backgroundColor: item.lotStatus === 'exists' ? '#f0f0f0' : '#fff', cursor: item.lotStatus === 'exists' ? 'not-allowed' : 'text'}}
                            />
                        </div>
                        <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                        <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                        <div className="grid-cell">
                        <input
                            type="text"
                            inputMode="numeric"
                            value={focusedInputIndex === index ? item.quantity : formatNumber(item.quantity)}
                            onFocus={() => setFocusedInputIndex(index)}
                            onBlur={() => setFocusedInputIndex(null)}
                            onChange={e => {
                                const rawValue = e.target.value;
                                const parsedValue = rawValue.replace(',', '.');
                                if (/^\d*\.?\d*$/.test(parsedValue) || parsedValue === '') {
                                    updateItem(index, 'quantity', parsedValue);
                                }
                            }}
                        />
                    </div>
                        <div className="grid-cell"><textarea value={item.notes} onChange={e => updateItem(index, 'notes', e.target.value)} /></div>
                        <div className="grid-cell"><input type="text" value={item.team} readOnly /></div>
                        <div className="grid-cell">
                            <button 
                                type="button" 
                                className="btn-icon btn-delete" 
                                onClick={() => handleRemoveRow(index)}
                                title="XÃ³a dÃ²ng nÃ y"
                            >
                                <FiXCircle />
                            </button>
                        </div>
                    </React.Fragment>
                ))}
            </div>
            
            <button onClick={addNewItemRow} className="btn-secondary" style={{ marginTop: '10px' }}>+ ThÃªm dÃ²ng</button>
            <div className="page-actions">
                <button 
                    onClick={handleSaveSlip} 
                    className="btn-secondary" 
                    disabled={isSaving || !isSlipValid}
                >
                    {isSaving ? 'Äang lÆ°u...' : 'LÆ°u Táº¡m'}
                </button>
                <button 
                    onClick={promptForDirectImport} 
                    className="btn-primary" 
                    disabled={isSaving || !isSlipValid}
                >
                    {isSaving ? 'Äang xá»­ lÃ½...' : 'Nháº­p Kho Trá»±c Tiáº¿p'}
                </button>
            </div>
        </div>
    );
};

export default NewImportPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\PartnersPage.jsx ---


// src/pages/PartnersPage.jsx
import React, { useState, useMemo, useEffect, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, orderBy, doc, deleteDoc, getDocs, where, documentId } from 'firebase/firestore';
import { toast } from 'react-toastify';
import { FiPlus, FiEdit, FiTrash2, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import AddPartnerModal from '../components/AddPartnerModal';
import EditPartnerModal from '../components/EditPartnerModal';
import ConfirmationModal from '../components/ConfirmationModal';
import Spinner from '../components/Spinner';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { PAGE_SIZE } from '../constants';
import { normalizeString } from '../utils/stringUtils'; // <-- THÃŠM DÃ’NG NÃ€Y
import HighlightText from '../components/HighlightText';

const PartnersPage = () => {
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [partnerToEdit, setPartnerToEdit] = useState(null);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const [forceRerender, setForceRerender] = useState(0); // State Ä‘á»ƒ trigger re-fetch

    // Má»šI: State cho chá»©c nÄƒng tÃ¬m kiáº¿m
    const [searchTerm, setSearchTerm] = useState('');
    const [searchResults, setSearchResults] = useState(null); // null: khÃ´ng tÃ¬m kiáº¿m, []: tÃ¬m khÃ´ng tháº¥y, [...]: káº¿t quáº£
    const [isSearching, setIsSearching] = useState(false);

    const baseQuery = useMemo(() => {
        return query(collection(db, "partners"), orderBy(documentId()));
    }, [forceRerender]); // Phá»¥ thuá»™c vÃ o forceRerender

    const {
        documents: partners,
        loading,
        isLastPage,
        page,
        nextPage,
        prevPage
    } = useFirestorePagination(baseQuery, PAGE_SIZE);

    // THAY THáº¾ TOÃ€N Bá»˜ HÃ€M CÅ¨ Báº°NG HÃ€M Má»šI NÃ€Y
const performSearch = useCallback(async (term) => {
    if (!term.trim()) {
        setSearchResults(null);
        return;
    }
    setIsSearching(true);
    try {
        // BÆ°á»›c 1: Chuáº©n hÃ³a vÃ  tÃ¡ch táº¥t cáº£ cÃ¡c tá»« ngÆ°á»i dÃ¹ng gÃµ
        const searchTerms = normalizeString(term).split(' ').filter(t => t);

        if (searchTerms.length === 0) {
            setSearchResults([]);
            setIsSearching(false);
            return;
        }

        // BÆ°á»›c 2: DÃ¹ng tá»« Ä‘áº§u tiÃªn Ä‘á»ƒ truy váº¥n Firestore (láº¥y vá» cÃ¡c káº¿t quáº£ tiá»m nÄƒng)
        const firstTerm = searchTerms[0];
        const q = query(
            collection(db, "partners"),
            where("searchKeywords", "array-contains", firstTerm)
        );

        const querySnapshot = await getDocs(q);
        const initialResults = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

        // BÆ°á»›c 3: Lá»c káº¿t quáº£ trÃªn client Ä‘á»ƒ khá»›p vá»›i Táº¤T Cáº¢ cÃ¡c tá»« cÃ²n láº¡i
        if (searchTerms.length > 1) {
            const remainingTerms = searchTerms.slice(1);
            const finalResults = initialResults.filter(partner => 
                // Kiá»ƒm tra xem 'searchKeywords' cá»§a Ä‘á»‘i tÃ¡c cÃ³ chá»©a Má»ŒI tá»« cÃ²n láº¡i khÃ´ng
                remainingTerms.every(t => partner.searchKeywords.includes(t))
            );
            setSearchResults(finalResults);
        } else {
            // Náº¿u chá»‰ gÃµ 1 tá»« thÃ¬ khÃ´ng cáº§n lá»c thÃªm
            setSearchResults(initialResults);
        }

    } catch (error) {
        console.error("Lá»—i khi tÃ¬m kiáº¿m Ä‘á»‘i tÃ¡c:", error);
        toast.error("KhÃ´ng thá»ƒ thá»±c hiá»‡n tÃ¬m kiáº¿m.");
    } finally {
        setIsSearching(false);
    }
}, []);

    // Má»šI: useEffect Ä‘á»ƒ trigger tÃ¬m kiáº¿m sau khi ngÆ°á»i dÃ¹ng ngá»«ng gÃµ
    useEffect(() => {
        const debounce = setTimeout(() => {
            performSearch(searchTerm);
        }, 500); // Äá»£i 500ms sau khi ngá»«ng gÃµ
        return () => clearTimeout(debounce);
    }, [searchTerm, performSearch]);

    const handlePartnerAdded = () => {
        setIsAddModalOpen(false);
        setForceRerender(prev => prev + 1); // Trigger re-fetch
    };

    const handlePartnerUpdated = () => {
        setIsEditModalOpen(false);
        setPartnerToEdit(null);
        if (searchResults) {
            performSearch(searchTerm); // Cáº­p nháº­t láº¡i káº¿t quáº£ tÃ¬m kiáº¿m
        } else {
            setForceRerender(prev => prev + 1); // Trigger re-fetch
        }
    };

    const handleDelete = (partnerId, partnerName) => {
        setConfirmModal({
            isOpen: true,
            title: `XÃ¡c nháº­n xÃ³a Äá»‘i tÃ¡c?`,
            message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a "${partnerName}" (MÃ£: ${partnerId})? HÃ nh Ä‘á»™ng nÃ y khÃ´ng thá»ƒ hoÃ n tÃ¡c.`,
            onConfirm: async () => {
                try {
                    await deleteDoc(doc(db, 'partners', partnerId));
                    toast.success(`ÄÃ£ xÃ³a Ä‘á»‘i tÃ¡c "${partnerName}" thÃ nh cÃ´ng.`);
                    setConfirmModal({ isOpen: false });
                    if (searchResults) {
                        performSearch(searchTerm);
                    } else {
                        setForceRerender(prev => prev + 1);
                    }
                } catch (error) {
                    console.error("Lá»—i khi xÃ³a Ä‘á»‘i tÃ¡c:", error);
                    toast.error("ÄÃ£ xáº£y ra lá»—i khi xÃ³a Ä‘á»‘i tÃ¡c.");
                }
            }
        });
    };

    const dataToShow = searchResults !== null ? searchResults : partners;
    const isLoadingData = loading || isSearching;

    return (
        <div>
            {isAddModalOpen && <AddPartnerModal onClose={() => setIsAddModalOpen(false)} onPartnerAdded={handlePartnerAdded} />}
            {isEditModalOpen && <EditPartnerModal onClose={() => setIsEditModalOpen(false)} onPartnerUpdated={handlePartnerUpdated} partnerToEdit={partnerToEdit} />}
            <ConfirmationModal 
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
            />

            <div className="page-header">
                <h1>Quáº£n LÃ½ Äá»‘i TÃ¡c</h1>
                <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">
                    <FiPlus /> ThÃªm Ä‘á»‘i tÃ¡c
                </button>
            </div>

            {/* Má»šI: Ã” tÃ¬m kiáº¿m */}
            <div className="controls-container">
                <div className="search-container" style={{ maxWidth: '100%', flexGrow: 1 }}>
                    <input
                        type="text"
                        placeholder="TÃ¬m theo TÃªn Ä‘á»‘i tÃ¡c..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
            </div>

            {isLoadingData ? <Spinner /> : (
                <>
                    <table className="products-table list-page-table">
                        <thead>
                            <tr>
                                <th>MÃ£ Äá»‘i TÃ¡c</th>
                                <th>TÃªn Äá»‘i TÃ¡c</th>
                                <th>PhÃ¢n Loáº¡i</th>
                                <th>Thao TÃ¡c</th>
                            </tr>
                        </thead>
                        {/* DÃ¡n Ä‘oáº¡n mÃ£ nÃ y Ä‘á»ƒ thay tháº¿ cho toÃ n bá»™ khá»‘i <tbody> hiá»‡n táº¡i trong file PartnersPage.jsx */}
<tbody>
    {dataToShow.length > 0 ? (
        dataToShow.map(partner => (
            <tr key={partner.id}>
                <td>{partner.id}</td>
                <td style={{ textAlign: 'left' }}>
                    {/* Sá»­ dá»¥ng component HighlightText Ä‘á»ƒ lÃ m ná»•i báº­t káº¿t quáº£ tÃ¬m kiáº¿m */}
                    <HighlightText text={partner.partnerName} highlight={searchTerm} />
                </td>
                <td>{partner.partnerType === 'supplier' ? 'NhÃ  Cung Cáº¥p' : 'KhÃ¡ch HÃ ng'}</td>
                <td>
                    <div className="action-buttons">
                        <button className="btn-icon btn-edit" onClick={() => { setPartnerToEdit(partner); setIsEditModalOpen(true); }}>
                            <FiEdit />
                        </button>
                        <button className="btn-icon btn-delete" onClick={() => handleDelete(partner.id, partner.partnerName)}>
                            <FiTrash2 />
                        </button>
                    </div>
                </td>
            </tr>
        ))
    ) : (
        <tr>
            <td colSpan="4">KhÃ´ng tÃ¬m tháº¥y Ä‘á»‘i tÃ¡c nÃ o.</td>
        </tr>
    )}
</tbody>
                    </table>

                    {/* Chá»‰ hiá»ƒn thá»‹ phÃ¢n trang khi khÃ´ng cÃ³ tÃ¬m kiáº¿m */}
                    {searchResults === null && (
                         <div className="pagination-controls">
                            <button onClick={prevPage} disabled={page <= 1}>
                                <FiChevronLeft /> Trang TrÆ°á»›c
                            </button>
                            <span>Trang {page}</span>
                            <button onClick={nextPage} disabled={isLastPage}>
                                Trang Tiáº¿p <FiChevronRight />
                            </button>
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default PartnersPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\PartnersPage.module.css ---


/* src/pages/PartnersPage.module.css */

.partnerIdCell {
    font-weight: bold;
    font-family: monospace;
    font-size: 14px;
    color: #0056b3;
}

.partnerTypeCell {
    font-style: italic;
    color: #555;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\PartnersPage.test.jsx ---


// src/pages/PartnersPage.test.jsx

import React from 'react';
import { render, screen } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { BrowserRouter } from 'react-router-dom';

// BÆ¯á»šC 1: Mock toÃ n bá»™ custom hook mÃ  component nÃ y sá»­ dá»¥ng
import { useFirestorePagination } from '../hooks/useFirestorePagination';
vi.mock('../hooks/useFirestorePagination');

// Import component cáº§n test
import PartnersPage from './PartnersPage';

// Component PartnersPage cÃ³ thá»ƒ chá»©a <NavLink> hoáº·c cÃ¡c hook cá»§a react-router,
// nÃªn chÃºng ta cáº§n bá»c nÃ³ trong <BrowserRouter> khi test.
const MockWrapper = ({ children }) => <BrowserRouter>{children}</BrowserRouter>;

describe('Page: PartnersPage', () => {
    
    beforeEach(() => {
        // Reset mock trÆ°á»›c má»—i bÃ i test Ä‘á»ƒ Ä‘áº£m báº£o chÃºng Ä‘á»™c láº­p
        vi.clearAllMocks();
    });

    // Test case 1: Tráº¡ng thÃ¡i Ä‘ang táº£i dá»¯ liá»‡u
    it('nÃªn hiá»ƒn thá»‹ Spinner khi Ä‘ang loading', () => {
        // Arrange: Giáº£ láº­p hook tráº£ vá» tráº¡ng thÃ¡i loading
        useFirestorePagination.mockReturnValue({
            documents: [],
            loading: true,
            // CÃ¡c giÃ¡ trá»‹ khÃ¡c khÃ´ng quan trá»ng trong test case nÃ y
            isLastPage: true, 
            page: 1,
            nextPage: vi.fn(),
            prevPage: vi.fn(),
            reset: vi.fn(),
        });

        // Act: Render component
        render(<PartnersPage />, { wrapper: MockWrapper });

        // Assert:
        // - TiÃªu Ä‘á» trang pháº£i luÃ´n hiá»ƒn thá»‹
        expect(screen.getByRole('heading', { name: /Quáº£n LÃ½ Äá»‘i TÃ¡c/i })).toBeInTheDocument();
        // - Spinner khÃ´ng cÃ³ text, nÃªn ta kiá»ƒm tra sá»± Váº®NG Máº¶T cá»§a ná»™i dung báº£ng
        expect(screen.queryByText('MÃ£ Äá»‘i TÃ¡c')).toBeNull(); 
    });

    // Test case 2: Táº£i thÃ nh cÃ´ng vÃ  cÃ³ dá»¯ liá»‡u
    it('nÃªn hiá»ƒn thá»‹ báº£ng vá»›i dá»¯ liá»‡u Ä‘á»‘i tÃ¡c khi táº£i thÃ nh cÃ´ng', () => {
        // Arrange: Giáº£ láº­p hook tráº£ vá» má»™t máº£ng dá»¯ liá»‡u máº«u
        const mockPartners = [
            { id: 'NCC-01', partnerName: 'NhÃ  Cung Cáº¥p A', partnerType: 'supplier' },
            { id: 'KH-01', partnerName: 'KhÃ¡ch HÃ ng B', partnerType: 'customer' },
        ];
        useFirestorePagination.mockReturnValue({
            documents: mockPartners,
            loading: false,
            // ... cÃ¡c giÃ¡ trá»‹ khÃ¡c
        });

        // Act
        render(<PartnersPage />, { wrapper: MockWrapper });

        // Assert: Kiá»ƒm tra xem cÃ¡c tÃªn Ä‘á»‘i tÃ¡c cÃ³ Ä‘Æ°á»£c render ra khÃ´ng
        expect(screen.getByText('NhÃ  Cung Cáº¥p A')).toBeInTheDocument();
        expect(screen.getByText('KhÃ¡ch HÃ ng B')).toBeInTheDocument();
        // Kiá»ƒm tra cáº£ loáº¡i Ä‘á»‘i tÃ¡c
        expect(screen.getByText('NhÃ  Cung Cáº¥p')).toBeInTheDocument();
        expect(screen.getByText('KhÃ¡ch HÃ ng')).toBeInTheDocument();
    });

    // Test case 3: Táº£i thÃ nh cÃ´ng nhÆ°ng khÃ´ng cÃ³ dá»¯ liá»‡u
    it('nÃªn hiá»ƒn thá»‹ thÃ´ng bÃ¡o khi khÃ´ng cÃ³ Ä‘á»‘i tÃ¡c nÃ o', () => {
        // Arrange: Giáº£ láº­p hook tráº£ vá» má»™t máº£ng rá»—ng
        useFirestorePagination.mockReturnValue({
            documents: [],
            loading: false,
            // ... cÃ¡c giÃ¡ trá»‹ khÃ¡c
        });

        // Act
        render(<PartnersPage />, { wrapper: MockWrapper });

        // Assert: Kiá»ƒm tra thÃ´ng bÃ¡o "ChÆ°a cÃ³ Ä‘á»‘i tÃ¡c nÃ o." Ä‘Ã£ Ä‘Æ°á»£c hiá»ƒn thá»‹
        expect(screen.getByText('ChÆ°a cÃ³ Ä‘á»‘i tÃ¡c nÃ o.')).toBeInTheDocument();
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\ProductsPage.jsx ---


// src/pages/ProductsPage.jsx
import React, { useState, useMemo } from 'react';
import { collection, query, orderBy, where, documentId } from 'firebase/firestore';
import { FiEdit, FiTrash2, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { db } from '../firebaseConfig';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { useRealtimeNotification } from '../hooks/useRealtimeNotification';
import { deleteProduct } from '../services/productService';
import AddProductModal from '../components/AddProductModal';
import EditProductModal from '../components/EditProductModal';
import ConfirmationModal from '../components/ConfirmationModal';
import Spinner from '../components/Spinner';
import NewDataNotification from '../components/NewDataNotification';
import HighlightText from '../components/HighlightText';

const ProductsPage = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [currentProduct, setCurrentProduct] = useState(null);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });

  const baseQuery = useMemo(() => {
    // Sáº¯p xáº¿p theo 'createdAt' Ä‘á»ƒ luÃ´n láº¥y Ä‘Æ°á»£c sáº£n pháº©m má»›i nháº¥t lÃªn Ä‘áº§u
    let q = query(collection(db, 'products'));
    if (searchTerm) {
        // TÃ¬m kiáº¿m váº«n dÃ¹ng documentId vÃ¬ hiá»‡u quáº£ hÆ¡n
        const upperSearchTerm = searchTerm.toUpperCase();
        q = query(collection(db, 'products'), where(documentId(), '>=', upperSearchTerm), where(documentId(), '<=', upperSearchTerm + '\uf8ff'));
    }
    return q;
  }, [searchTerm]);

  const {
    documents: products,
    loading,
    isLastPage,
    page,
    nextPage,
    prevPage,
    reset,
  } = useFirestorePagination(baseQuery, PAGE_SIZE);

  const { hasNewData, setHasNewData } = useRealtimeNotification(baseQuery, products, page, searchTerm);

  const handleRefresh = () => {
      dismissNewData();
      reset();
  };

  const handleProductAdded = () => {
    setIsAddModalOpen(false);
    // Náº¿u Ä‘ang tÃ¬m kiáº¿m thÃ¬ xÃ³a tÃ¬m kiáº¿m Ä‘á»ƒ tháº¥y sáº£n pháº©m má»›i, náº¿u khÃ´ng thÃ¬ reset
    if (searchTerm) setSearchTerm('');
    else reset();
  };

  const handleProductUpdated = () => {
    setIsEditModalOpen(false);
    reset();
  };

  const promptForDelete = (product) => {
    setConfirmModal({
        isOpen: true,
        item: product,
        title: "XÃ¡c nháº­n xÃ³a sáº£n pháº©m?",
        message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a "${product.productName}" (ID: ${product.id}) khÃ´ng?`
    });
  };

  const handleDelete = async () => {
    const { item } = confirmModal;
    if (!item) return;
    try {
        await deleteProduct(item.id);
        toast.success('XÃ³a sáº£n pháº©m thÃ nh cÃ´ng!');
        if (searchTerm) setSearchTerm('');
        else reset();
    } catch (error) {
        console.error("Lá»—i khi xÃ³a sáº£n pháº©m: ", error);
        toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ³a sáº£n pháº©m.');
    } finally {
        setConfirmModal({ isOpen: false, item: null });
    }
  };

  const openEditModal = (product) => {
    setCurrentProduct(product);
    setIsEditModalOpen(true);
  };

  return (
    <div className="products-page-container">
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={handleDelete}
        onCancel={() => setConfirmModal({ isOpen: false, item: null })}
        confirmText="Váº«n xÃ³a"
      />

      <div className="page-header">
        <h1>Quáº£n LÃ½ HÃ ng HÃ³a</h1>
        <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">ThÃªm sáº£n pháº©m</button>
      </div>

      <div className="controls-container" style={{justifyContent: 'flex-start'}}>
        <div className="search-container" style={{maxWidth: '400px'}}>
            <input
                type="text"
                placeholder="TÃ¬m theo MÃ£ hÃ ng..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
            />
        </div>
      </div>
      
      {isAddModalOpen && <AddProductModal onClose={() => setIsAddModalOpen(false)} onProductAdded={handleProductAdded} />}
      {isEditModalOpen && <EditProductModal onClose={() => setIsEditModalOpen(false)} onProductUpdated={handleProductUpdated} productToEdit={currentProduct} />}
      
      <NewDataNotification
        isVisible={hasNewData}
        onRefresh={handleRefresh}
        message="CÃ³ sáº£n pháº©m má»›i Ä‘Æ°á»£c thÃªm!"
      />

      {loading ? <Spinner /> : (
        <>
          <table className="products-table">
            <thead>
              <tr>
                <th>MÃ£ hÃ ng</th>
                <th>TÃªn hÃ ng</th>
                <th>ÄÆ¡n vá»‹ tÃ­nh</th>
                <th>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</th>
                <th>Nhiá»‡t Ä‘á»™ BQ</th>
                <th>HÃ£ng sáº£n xuáº¥t</th>
                <th>Team</th>
                <th>Thao tÃ¡c</th>
              </tr>
            </thead>
            {/* DÃ¡n Ä‘oáº¡n mÃ£ nÃ y Ä‘á»ƒ thay tháº¿ cho toÃ n bá»™ khá»‘i <tbody> hiá»‡n táº¡i trong file ProductsPage.jsx */}
<tbody>
  {products.length > 0 ? (
      products.map(product => (
      <tr key={product.id}>
        <td>
            {/* Highlight MÃ£ hÃ ng */}
            <HighlightText text={product.id} highlight={searchTerm} />
        </td>
        <td>
            {/* Highlight TÃªn hÃ ng */}
            <HighlightText text={product.productName} highlight={searchTerm} />
        </td>
        <td>{product.unit}</td>
        <td>{product.packaging}</td>
        <td>{product.storageTemp}</td>
        <td>{product.manufacturer}</td>
        <td>{product.team}</td>
        <td>
          <div className="action-buttons">
            <button className="btn-icon btn-edit" onClick={() => openEditModal(product)}>
              <FiEdit />
            </button>
            <button className="btn-icon btn-delete" onClick={() => promptForDelete(product)}>
              <FiTrash2 />
            </button>
          </div>
        </td>
      </tr>
    ))
  ) : (
      <tr>
          <td colSpan="8" style={{textAlign: 'center'}}>
            KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m nÃ o.
          </td>
      </tr>
  )}
</tbody>
          </table>

          <div className="pagination-controls">
              <button onClick={prevPage} disabled={page <= 1 || loading}>
                 <FiChevronLeft /> Trang TrÆ°á»›c
              </button>
              <span>Trang {page}</span>
              <button onClick={nextPage} disabled={isLastPage || loading}>
                  Trang Tiáº¿p <FiChevronRight />
              </button>
          </div>
        </>
      )}
    </div>
  );
};

export default ProductsPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\ProductsPage.test.jsx ---


// src/pages/ProductsPage.test.jsx

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { BrowserRouter } from 'react-router-dom';

// Mock hook vÃ  cÃ¡c component con
import { useFirestorePagination } from '../hooks/useFirestorePagination';
vi.mock('../hooks/useFirestorePagination');

// Import component cáº§n test
import ProductsPage from './ProductsPage';

const MockWrapper = ({ children }) => <BrowserRouter>{children}</BrowserRouter>;

describe('Page: ProductsPage', () => {
    
    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('nÃªn hiá»ƒn thá»‹ Spinner khi Ä‘ang loading', () => {
        // Arrange
        useFirestorePagination.mockReturnValue({
            documents: [],
            loading: true,
        });

        // Act
        render(<ProductsPage />, { wrapper: MockWrapper });

        // Assert
        expect(screen.getByRole('heading', { name: /Quáº£n LÃ½ HÃ ng HÃ³a/i })).toBeInTheDocument();
        // Kiá»ƒm tra sá»± váº¯ng máº·t cá»§a header báº£ng
        expect(screen.queryByText('MÃ£ hÃ ng')).toBeNull(); 
    });

    it('nÃªn hiá»ƒn thá»‹ báº£ng sáº£n pháº©m khi táº£i thÃ nh cÃ´ng', () => {
        // Arrange
        const mockProducts = [
            { id: 'SP001', productName: 'BÃ´ng cá»“n', unit: 'Há»™p', team: 'MED' },
            { id: 'SP002', productName: 'GÄƒng tay y táº¿', unit: 'ThÃ¹ng', team: 'BIO' },
        ];
        useFirestorePagination.mockReturnValue({
            documents: mockProducts,
            loading: false,
        });

        // Act
        render(<ProductsPage />, { wrapper: MockWrapper });

        // Assert
        expect(screen.getByText('BÃ´ng cá»“n')).toBeInTheDocument();
        expect(screen.getByText('GÄƒng tay y táº¿')).toBeInTheDocument();
        // Láº¥y táº¥t cáº£ cÃ¡c dÃ²ng trong báº£ng (bao gá»“m cáº£ header)
        const rows = screen.getAllByRole('row');
        // Mong Ä‘á»£i cÃ³ 1 dÃ²ng header + 2 dÃ²ng dá»¯ liá»‡u = 3 dÃ²ng
        expect(rows).toHaveLength(3);
    });
    
    it('nÃªn hiá»ƒn thá»‹ thÃ´ng bÃ¡o khi khÃ´ng tÃ¬m tháº¥y sáº£n pháº©m nÃ o', () => {
        // Arrange: Giáº£ láº­p hook tráº£ vá» máº£ng rá»—ng
        useFirestorePagination.mockReturnValue({
            documents: [],
            loading: false,
        });

        // Act
        render(<ProductsPage />, { wrapper: MockWrapper });

        // Assert
        expect(screen.getByText('KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m nÃ o.')).toBeInTheDocument();
    });

    it('nÃªn cáº­p nháº­t giÃ¡ trá»‹ cá»§a Ã´ tÃ¬m kiáº¿m khi ngÆ°á»i dÃ¹ng nháº­p liá»‡u', () => {
        // Arrange
        useFirestorePagination.mockReturnValue({
            documents: [],
            loading: false,
        });
        render(<ProductsPage />, { wrapper: MockWrapper });

        // Act
        const searchInput = screen.getByPlaceholderText('TÃ¬m theo MÃ£ hÃ ng...');
        // MÃ´ phá»ng ngÆ°á»i dÃ¹ng gÃµ "TEST-SEARCH"
        fireEvent.change(searchInput, { target: { value: 'TEST-SEARCH' } });

        // Assert: Kiá»ƒm tra xem giÃ¡ trá»‹ cá»§a Ã´ input Ä‘Ã£ Ä‘Æ°á»£c cáº­p nháº­t Ä‘Ãºng chÆ°a
        expect(searchInput.value).toBe('TEST-SEARCH');
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\StocktakeListPage.jsx ---


// src/pages/StocktakeListPage.jsx
import React, { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, serverTimestamp, orderBy, doc, setDoc, writeBatch, onSnapshot, limit } from 'firebase/firestore';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { useRealtimeNotification } from '../hooks/useRealtimeNotification';
import NewDataNotification from '../components/NewDataNotification';
import CreateStocktakeModal from '../components/CreateStocktakeModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { deleteStocktakeSession } from '../services/stocktakeService';
import { toast } from 'react-toastify';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';
import { FiChevronLeft, FiChevronRight, FiTrash2 } from 'react-icons/fi';

const StocktakeListPage = () => {
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
    const [isCreating, setIsCreating] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });
    const navigate = useNavigate();
    
    const baseQuery = useMemo(() => query(collection(db, "stocktakes"), orderBy("createdAt", "desc")), []);
    const {
        documents: stocktakeSessions,
        loading,
        isLastPage,
        page,
        nextPage,
        prevPage,
        reset
    } = useFirestorePagination(baseQuery, PAGE_SIZE);

    const { hasNewData, dismissNewData } = useRealtimeNotification(baseQuery);

    const handleRefresh = () => {
        dismissNewData();
        reset();
    };

    const handleCreateStocktake = async (sessionData) => {
        setIsCreating(true);
        toast.info("Äang láº¥y dá»¯ liá»‡u tá»“n kho, vui lÃ²ng chá»...");
        try {
            let inventoryQuery;
            if (sessionData.scope === 'all') {
                inventoryQuery = query(collection(db, "inventory_lots"), where("quantityRemaining", ">", 0));
            } else {
                inventoryQuery = query(collection(db, "inventory_lots"), where("team", "==", sessionData.scope), where("quantityRemaining", ">", 0));
            }
            const querySnapshot = await getDocs(inventoryQuery);
            const inventorySnapshotItems = querySnapshot.docs.map(doc => ({
                lotId: doc.id, ...doc.data(), systemQty: doc.data().quantityRemaining, countedQty: null, isNew: false,
                unit: doc.data().unit || '',          // Láº¥y Ä‘Æ¡n vá»‹ tÃ­nh
                packaging: doc.data().packaging || '' // Láº¥y quy cÃ¡ch
            }));

            const newStocktakeSessionRef = doc(collection(db, 'stocktakes'));
            await setDoc(newStocktakeSessionRef, {
                name: sessionData.sessionName, scope: sessionData.scope, status: 'in_progress', createdAt: serverTimestamp(),
            });

            toast.info(`ÄÃ£ láº¥y ${inventorySnapshotItems.length} má»¥c. Báº¯t Ä‘áº§u ghi dá»¯ liá»‡u...`);
            const itemsCollectionRef = collection(db, 'stocktakes', newStocktakeSessionRef.id, 'items');
            const MAX_BATCH_SIZE = 500;
            for (let i = 0; i < inventorySnapshotItems.length; i += MAX_BATCH_SIZE) {
                const batch = writeBatch(db);
                const chunk = inventorySnapshotItems.slice(i, i + MAX_BATCH_SIZE);
                chunk.forEach(item => {
                    const newItemRef = doc(itemsCollectionRef, item.lotId);
                    batch.set(newItemRef, item);
                });
                await batch.commit();
            }
            
            toast.success("Táº¡o phiÃªn kiá»ƒm kÃª má»›i thÃ nh cÃ´ng!");
            setIsCreateModalOpen(false);
            navigate(`/stocktakes/${newStocktakeSessionRef.id}`);
        } catch (error) {
            console.error("Lá»—i khi táº¡o phiÃªn kiá»ƒm kÃª: ", error);
            toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi táº¡o phiÃªn kiá»ƒm kÃª.");
        } finally {
            setIsCreating(false);
        }
    };

    const promptForDelete = (session) => {
        setConfirmModal({
            isOpen: true,
            item: session,
            title: "XÃ¡c nháº­n xÃ³a phiÃªn kiá»ƒm kÃª?",
            message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a phiÃªn "${session.name}" khÃ´ng? ToÃ n bá»™ dá»¯ liá»‡u Ä‘áº¿m cá»§a phiÃªn nÃ y sáº½ bá»‹ máº¥t vÄ©nh viá»…n vÃ  khÃ´ng thá»ƒ khÃ´i phá»¥c.`,
            onConfirm: handleDeleteSession,
            confirmText: "Váº«n xÃ³a"
        });
    };

    const handleDeleteSession = async () => {
        const sessionToDelete = confirmModal.item;
        if (!sessionToDelete) return;

        try {
            toast.info(`Äang xÃ³a phiÃªn "${sessionToDelete.name}"...`);
            await deleteStocktakeSession(sessionToDelete.id);
            toast.success(`ÄÃ£ xÃ³a thÃ nh cÃ´ng phiÃªn kiá»ƒm kÃª.`);
            reset();
        } catch (error) {
            console.error("Lá»—i khi xÃ³a phiÃªn kiá»ƒm kÃª: ", error);
            toast.error("ÄÃ£ xáº£y ra lá»—i khi xÃ³a phiÃªn kiá»ƒm kÃª.");
        } finally {
            setConfirmModal({ isOpen: false, item: null });
        }
    };

    return (
        <div className="stocktake-list-page-container">
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={handleDeleteSession}
                onCancel={() => setConfirmModal({ isOpen: false, item: null })}
                confirmText={confirmModal.confirmText}
            />

            {isCreateModalOpen && (
                <CreateStocktakeModal onClose={() => setIsCreateModalOpen(false)} onCreate={handleCreateStocktake} isCreating={isCreating} />
            )}
            <div className="page-header">
                <h1>Danh sÃ¡ch PhiÃªn Kiá»ƒm KÃª Kho</h1>
                <button onClick={() => setIsCreateModalOpen(true)} className="btn-primary">Táº¡o PhiÃªn Má»›i</button>
            </div>
      
            <NewDataNotification
                isVisible={hasNewData}
                onRefresh={handleRefresh}
                message="CÃ³ phiÃªn kiá»ƒm kÃª má»›i!"
            />

            {hasNewData && (
                <div className="new-data-notification">
                    <p>CÃ³ phiÃªn kiá»ƒm kÃª má»›i!</p>
                    <button onClick={handleRefresh} className="btn-primary">Táº£i láº¡i danh sÃ¡ch</button>
                </div>
            )}

            {loading ? <Spinner /> : (
                <>
                    <table className="products-table list-page-table">
                        <thead>
                            <tr>
                                <th>TÃªn PhiÃªn Kiá»ƒm KÃª</th>
                                <th>NgÃ y Táº¡o</th>
                                <th>Pháº¡m Vi</th>
                                <th>Tráº¡ng ThÃ¡i</th>
                                <th>Thao TÃ¡c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {stocktakeSessions.length > 0 ? (
                                stocktakeSessions.map(session => (
                                    <tr key={session.id}>
                                        <td>{session.name}</td>
                                        <td>{session.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
                                        <td>{session.scope === 'all' ? 'ToÃ n bá»™ kho' : session.scope}</td>
                                        <td><StatusBadge status={session.status} /></td>
                                        <td>
                                            <div className="action-buttons">
                                                <button 
                                                    className="btn-secondary" 
                                                    style={{padding: '5px 10px', width: 'auto'}}
                                                    onClick={() => navigate(`/stocktakes/${session.id}`)}
                                                >
                                                    Xem/Thá»±c hiá»‡n
                                                </button>
                                                
                                                {session.status === 'in_progress' && (
                                                    <button
                                                        className="btn-icon btn-delete"
                                                        title="XÃ³a phiÃªn kiá»ƒm kÃª"
                                                        onClick={() => promptForDelete(session)}
                                                    >
                                                        <FiTrash2 />
                                                    </button>
                                                )}
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr><td colSpan="5" style={{textAlign: 'center'}}>ChÆ°a cÃ³ phiÃªn kiá»ƒm kÃª nÃ o.</td></tr>
                            )}
                        </tbody>
                    </table>

                    <div className="pagination-controls">
                        <button onClick={prevPage} disabled={page <= 1 || loading}>
                            <FiChevronLeft /> Trang TrÆ°á»›c
                        </button>
                        <span>Trang {page}</span>
                        <button onClick={nextPage} disabled={isLastPage || loading}>
                            Trang Tiáº¿p <FiChevronRight />
                        </button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StocktakeListPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\StocktakeSessionPage.jsx ---


// src/pages/StocktakeSessionPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { doc, getDoc, updateDoc, writeBatch, collection, addDoc, serverTimestamp, query, orderBy, limit, startAfter, getDocs, where, getCountFromServer, setDoc } from 'firebase/firestore';
import '../styles/StocktakePage.css';
import AddUnlistedItemModal from '../components/AddUnlistedItemModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';
import { FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import useStocktakeStore from '../stores/stocktakeStore';

const PAGE_SIZE = 50;

// Component con khÃ´ng thay Ä‘á»•i
const CountInput = ({ item, onCountSubmit }) => {
    const { id, countedQty, isNew } = item;
    const updateItemCountInUI = useStocktakeStore(state => state.updateItemCountInUI);
    const sessionData = useStocktakeStore(state => state.sessionData);
    const isSessionInProgress = sessionData?.status === 'in_progress';
    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.target.blur();
        }
    };

    return (
        <input 
            type="text"
            placeholder="Nháº­p sá»‘ Ä‘áº¿m" 
            value={countedQty ?? ''}
            onChange={e => updateItemCountInUI(id, e.target.value)}
            onBlur={e => onCountSubmit(id, e.target.value)}
            onKeyDown={handleKeyDown} 
            disabled={!isSessionInProgress}
            style={{ 
                backgroundColor: isNew ? '#fff9e6' : 
                    ((countedQty !== null && countedQty !== '') ? '#e6fffa' : '#fff') 
            }}
        />
    );
};

// =================================================================
// === Báº®T Äáº¦U HÃ€M HELPER Má»šI Äá»‚ TÃNH TOÃN BIá»‚U THá»¨C AN TOÃ€N ===
// =================================================================
/**
 * TÃ­nh toÃ¡n má»™t biá»ƒu thá»©c toÃ¡n há»c Ä‘Æ¡n giáº£n má»™t cÃ¡ch an toÃ n.
 * Há»— trá»£ cÃ¡c chuá»—i nhÆ° "300+200", "600-100".
 * @param {string} str - Chuá»—i biá»ƒu thá»©c Ä‘áº§u vÃ o.
 * @returns {number|NaN} - Káº¿t quáº£ tÃ­nh toÃ¡n hoáº·c NaN náº¿u khÃ´ng há»£p lá»‡.
 */
const evaluateMathExpression = (str) => {
    try {
        // Chá»‰ cho phÃ©p cÃ¡c kÃ½ tá»± sá»‘, +, -, vÃ  khoáº£ng tráº¯ng
        if (/[^0-9\s+\-]/.test(str)) {
            return NaN;
        }
        // Thay tháº¿ nhiá»u dáº¥u -- thÃ nh +
        const sanitizedStr = str.replace(/--/g, '+');
        
        // Sá»­ dá»¥ng Function constructor Ä‘á»ƒ trÃ¡nh rá»§i ro báº£o máº­t cá»§a eval()
        return new Function(`return ${sanitizedStr}`)();
    } catch (error) {
        return NaN;
    }
};
// ===============================================================
// === Káº¾T THÃšC HÃ€M HELPER Má»šI ===
// ===============================================================


const StocktakeSessionPage = () => {
    const { sessionId } = useParams();
    const navigate = useNavigate();
    const {
        sessionData, items, discrepancyItems, checkedItems, summaryStats, loading,
        initializeSession, setItems, setSummary, setSessionStatus,
        toggleCheckedItem, toggleAllCheckedItems, clearStore, updateItemCountInUI
    } = useStocktakeStore();
    const [loadingItems, setLoadingItems] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [lastVisible, setLastVisible] = useState(null);
    const [page, setPage] = useState(1);
    const [isLastPage, setIsLastPage] = useState(false);
    const [isAddItemModalOpen, setIsAddItemModalOpen] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });

    const performCountUpdate = async (itemId, finalCount) => {
        updateItemCountInUI(itemId, finalCount);
        const itemRef = doc(db, 'stocktakes', sessionId, 'items', itemId);
        try {
            await updateDoc(itemRef, { countedQty: finalCount });
            await fetchStatsAndDiscrepancies();
            return true;
        } catch (error) {
            toast.error("Lá»—i: KhÃ´ng thá»ƒ lÆ°u sá»‘ lÆ°á»£ng.");
            return false;
        }
    };

    // =================================================================
    // === Báº®T Äáº¦U PHáº¦N LOGIC handleCountSubmit ÄÃƒ ÄÆ¯á»¢C VIáº¾T Láº I HOÃ€N TOÃ€N ===
    // =================================================================
    const handleCountSubmit = (itemId, value) => {
        const item = useStocktakeStore.getState().items.find(i => i.id === itemId);
        if (!item) return;

        const prevCountedQty = item.countedQtyBeforeSubmit ?? 0;
        const rawValue = String(value).trim();
        
        if (rawValue === String(item.countedQtyBeforeSubmit ?? '')) return;
        
        if (rawValue === '') {
            performCountUpdate(itemId, null);
            return;
        }

        let finalCount = NaN;

        // TrÆ°á»ng há»£p 1: Cá»™ng dá»“n nhanh (báº¯t Ä‘áº§u báº±ng '+')
        if (rawValue.startsWith('+')) {
            const addedValue = evaluateMathExpression(rawValue.substring(1));
            if (!isNaN(addedValue) && addedValue > 0) {
                finalCount = prevCountedQty + addedValue;
            } else {
                 toast.warn("GiÃ¡ trá»‹ cá»™ng dá»“n khÃ´ng há»£p lá»‡.");
            }
        } else {
            // TrÆ°á»ng há»£p 2: TÃ­nh toÃ¡n biá»ƒu thá»©c hoáº·c ghi Ä‘Ã¨ sá»‘
            finalCount = evaluateMathExpression(rawValue);
        }

        // Kiá»ƒm tra káº¿t quáº£ cuá»‘i cÃ¹ng
        if (isNaN(finalCount) || finalCount < 0) {
            toast.warn("GiÃ¡ trá»‹ nháº­p khÃ´ng há»£p lá»‡.");
            updateItemCountInUI(itemId, item.countedQtyBeforeSubmit ?? null); // HoÃ n láº¡i giÃ¡ trá»‹ cÅ©
        } else {
            performCountUpdate(itemId, finalCount);
        }
    };
    // ===============================================================
    // === Káº¾T THÃšC PHáº¦N LOGIC handleCountSubmit Má»šI ===
    // ===============================================================

    const fetchStatsAndDiscrepancies = useCallback(async () => {
        if (!sessionId) return;
        const itemsRef = collection(db, 'stocktakes', sessionId, 'items');
        const totalQuery = query(itemsRef, where('isNew', '==', false));
        const countedQuery = query(itemsRef, where('countedQty', '!=', null));
        
        const [totalSnap, countedDocsSnap] = await Promise.all([
             getCountFromServer(totalQuery),
             getDocs(countedQuery)
        ]);
        
        const discrepancies = [];
        countedDocsSnap.forEach(doc => {
            const data = doc.data();
            if (data.systemQty !== data.countedQty) {
                discrepancies.push({ id: doc.id, ...data });
            }
        });

        const newSummary = {
            totalItems: totalSnap.data().count,
            countedItems: countedDocsSnap.size,
            discrepancies: discrepancies.length
        };
        const sortedDiscrepancies = discrepancies.sort((a, b) => a.productId.localeCompare(b.productId));
        setSummary(newSummary, sortedDiscrepancies);
    }, [sessionId, setSummary]);

    useEffect(() => {
        const fetchSessionData = async () => {
            const docRef = doc(db, 'stocktakes', sessionId);
            const docSnap = await getDoc(docRef);
            if (docSnap.exists()) {
                await fetchStatsAndDiscrepancies();
                const storeState = useStocktakeStore.getState();
                initializeSession(
                    { id: docSnap.id, ...docSnap.data() }, 
                    storeState.summaryStats, 
                    storeState.discrepancyItems
                );
            } else {
                toast.error("KhÃ´ng tÃ¬m tháº¥y phiÃªn kiá»ƒm kÃª!");
                navigate('/stocktakes');
            }
        };
        fetchSessionData();
        return () => {
            clearStore();
        }
    }, [sessionId, navigate, initializeSession, clearStore, fetchStatsAndDiscrepancies]);

    const buildItemsQuery = useCallback(() => {
        const itemsCollectionRef = collection(db, 'stocktakes', sessionId, 'items');
        let q = query(itemsCollectionRef, orderBy('productId'));
        if (searchTerm) {
            const upperSearchTerm = searchTerm.toUpperCase();
            q = query(q, where('productId', '>=', upperSearchTerm), where('productId', '<=', upperSearchTerm + '\uf8ff'));
        }
        return q;
    }, [sessionId, searchTerm]);

    const fetchItemsPage = useCallback(async (newQuery, isNextPage = false) => {
        if (!sessionId) return;
        setLoadingItems(true);
        try {
            const docSnapshots = await getDocs(newQuery);
            const itemsList = docSnapshots.docs.map(doc => ({ 
                id: doc.id, 
                ...doc.data()
            }));
            setLastVisible(docSnapshots.docs[docSnapshots.docs.length - 1]);
            setIsLastPage(docSnapshots.docs.length < PAGE_SIZE);
            setItems(itemsList);
            if (!isNextPage) setPage(1);
        } catch (error) {
            console.error("Lá»—i khi táº£i váº­t tÆ° kiá»ƒm kÃª: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch váº­t tÆ°.");
        } finally {
            setLoadingItems(false);
        }
    }, [sessionId, setItems]);

    useEffect(() => {
        const q = buildItemsQuery();
        const firstPageQuery = query(q, limit(PAGE_SIZE));
        const debounce = setTimeout(() => {
            fetchItemsPage(firstPageQuery);
        }, 500);
        return () => clearTimeout(debounce);
    }, [searchTerm, buildItemsQuery, fetchItemsPage]);

    const handleFinalizeCount = async () => {
        setConfirmModal({isOpen: false});
        const sessionRef = doc(db, 'stocktakes', sessionId);
        await updateDoc(sessionRef, { status: 'completed' });
        setSessionStatus('completed');
        toast.success("ÄÃ£ hoÃ n táº¥t phiÃªn kiá»ƒm kÃª!");
    };
    
    const promptForFinalize = () => {
        const uncountedItems = summaryStats.totalItems - summaryStats.countedItems;
        let message = "Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n hoÃ n táº¥t vÃ  khÃ³a phiÃªn kiá»ƒm kÃª nÃ y? Sau khi hoÃ n táº¥t, báº¡n cÃ³ thá»ƒ xá»­ lÃ½ chÃªnh lá»‡ch.";
        if (uncountedItems > 0) {
            message = `Cáº¢NH BÃO: Váº«n cÃ²n ${uncountedItems} mÃ£ hÃ ng chÆ°a Ä‘Æ°á»£c Ä‘áº¿m. Náº¿u báº¡n hoÃ n táº¥t, sá»‘ lÆ°á»£ng cá»§a chÃºng sáº½ Ä‘Æ°á»£c coi lÃ  0. ` + message;
        }
        setConfirmModal({
            isOpen: true,
            title: "HoÃ n táº¥t phiÃªn kiá»ƒm kÃª?",
            message: message,
            onConfirm: handleFinalizeCount,
            confirmText: "Váº«n hoÃ n táº¥t"
        });
    };

    const handleAddUnlistedItem = async (newItem) => {
        const itemsRef = collection(db, 'stocktakes', sessionId, 'items');
        try {
            const docRef = doc(itemsRef, newItem.lotId);
            await setDoc(docRef, newItem);
            toast.success("ÄÃ£ thÃªm máº·t hÃ ng má»›i vÃ o phiÃªn kiá»ƒm kÃª.");
            const q = buildItemsQuery();
            const firstPageQuery = query(q, limit(PAGE_SIZE));
            fetchItemsPage(firstPageQuery);
            setIsAddItemModalOpen(false);
        } catch (error) {
            toast.error("CÃ³ lá»—i khi lÆ°u máº·t hÃ ng má»›i, vui lÃ²ng thá»­ láº¡i.");
        }
    };

    const handleAdjustInventory = async () => {
        setConfirmModal({isOpen: false});
        const itemsToAdjust = discrepancyItems.filter(item => checkedItems[item.id]);
        if (itemsToAdjust.length === 0) {
            return toast.warn("Vui lÃ²ng chá»n má»¥c Ä‘á»ƒ Ä‘iá»u chá»‰nh.");
        }
        try {
            const batch = writeBatch(db);
            const adjustmentsCollectionRef = collection(db, 'inventory_adjustments');
            for (const item of itemsToAdjust) {
                const finalCountedQty = item.countedQty ?? 0;
                if (!item.isNew) {
                    const inventoryLotRef = doc(db, 'inventory_lots', item.lotId);
                    batch.update(inventoryLotRef, { quantityRemaining: finalCountedQty });
                }
                const newAdjustmentRef = doc(adjustmentsCollectionRef);
                batch.set(newAdjustmentRef, {
                    createdAt: serverTimestamp(), stocktakeId: sessionId, productId: item.productId,
                    productName: item.productName, lotNumber: item.lotNumber, quantityBefore: item.systemQty,
                    quantityAfter: finalCountedQty, variance: finalCountedQty - item.systemQty,
                    reason: `Äiá»u chá»‰nh sau kiá»ƒm kÃª phiÃªn: ${sessionData.name}`
                });
            }
            const sessionRef = doc(db, 'stocktakes', sessionId);
            batch.update(sessionRef, { status: 'adjusted' });
            await batch.commit();
            setSessionStatus('adjusted');
            toast.success("ÄÃ£ Ä‘iá»u chá»‰nh tá»“n kho thÃ nh cÃ´ng!");
        } catch (error) {
            toast.error("ÄÃ£ xáº£y ra lá»—i khi Ä‘iá»u chá»‰nh tá»“n kho.");
        }
    };
    
    const promptForAdjust = () => {
        const itemsToAdjust = discrepancyItems.filter(item => checkedItems[item.id]);
        if (itemsToAdjust.length === 0) return toast.warn("Vui lÃ²ng chá»n Ã­t nháº¥t má»™t máº·t hÃ ng Ä‘á»ƒ Ä‘iá»u chá»‰nh.");
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n Ä‘iá»u chá»‰nh tá»“n kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n Ä‘iá»u chá»‰nh tá»“n kho cho ${itemsToAdjust.length} máº·t hÃ ng Ä‘Ã£ chá»n khÃ´ng? Thao tÃ¡c nÃ y khÃ´ng thá»ƒ hoÃ n tÃ¡c.`,
            onConfirm: handleAdjustInventory,
            confirmText: "Äá»“ng Ã½ Ä‘iá»u chá»‰nh"
        });
    };
    
    if (loading) return <Spinner />;
    if (!sessionData) return <div>KhÃ´ng tÃ¬m tháº¥y dá»¯ liá»‡u cho phiÃªn kiá»ƒm kÃª nÃ y.</div>;

    const isSessionInProgress = sessionData.status === 'in_progress';

    return (
        <div className="stocktake-session-page-container">
            <ConfirmationModal 
                isOpen={confirmModal.isOpen} 
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={confirmModal.onCancel ?? (() => setConfirmModal({ isOpen: false }))}
                confirmText={confirmModal.confirmText}
                cancelText={confirmModal.cancelText}
            />
            {isAddItemModalOpen && (<AddUnlistedItemModal onClose={() => setIsAddItemModalOpen(false)} onAddItem={handleAddUnlistedItem} />)}

            <div className="page-header">
                <h1>{sessionData.name} <StatusBadge status={sessionData.status} /></h1>
                <div>
                    {isSessionInProgress && (<button onClick={promptForFinalize} className="btn-primary">HoÃ n táº¥t Ä‘áº¿m</button>)}
                </div>
            </div>

            {(sessionData.status === 'completed' || sessionData.status === 'adjusted') && (
                 <div className="form-section">
                    <div className="compact-info-grid" style={{gridTemplateColumns: '1fr 1fr 1fr'}}>
                        <div><label>Tá»•ng sá»‘ mÃ£ cáº§n Ä‘áº¿m</label><p><strong>{summaryStats.totalItems}</strong></p></div>
                        <div><label>Sá»‘ mÃ£ Ä‘Ã£ Ä‘áº¿m</label><p style={{color: 'green'}}><strong>{summaryStats.countedItems}</strong></p></div>
                        <div><label>Sá»‘ mÃ£ cÃ³ chÃªnh lá»‡ch</label><p style={{color: 'red'}}><strong>{summaryStats.discrepancies}</strong></p></div>
                    </div>
                </div>
            )}

            <div className="controls-container">
                <div className="search-container">
                     <input type="text" placeholder="TÃ¬m theo MÃ£ hÃ ng..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="search-input" />
                </div>
                {isSessionInProgress && (
                    <button onClick={() => setIsAddItemModalOpen(true)} className="btn-secondary" style={{whiteSpace: 'nowrap'}}>+ ThÃªm HÃ ng NgoÃ i DS</button>
                )}
            </div>

            {loadingItems ? <Spinner /> : (
                <>
                    <div className="table-container">
                        <table className="products-table">
                            <thead>
                                 <tr>
                                    <th>MÃ£ hÃ ng</th><th>TÃªn hÃ ng</th><th>Sá»‘ lÃ´</th>
                                    <th>HSD</th><th>ÄVT</th><th>Quy cÃ¡ch</th><th>Tá»“n há»‡ thá»‘ng</th><th>Tá»“n thá»±c táº¿</th>
                                </tr>
                            </thead>
                            <tbody>
                                 {items.map((item) => (
        <tr key={item.id}>
            <td>{item.productId}</td>
            <td>{item.productName}</td>
            <td>{item.lotNumber}</td>
            <td>{formatDate(item.expiryDate)}</td>
            <td>{item.unit}</td>
            <td>{item.packaging}</td>
            <td>{item.systemQty}</td>
            <td>
                <CountInput item={item} onCountSubmit={handleCountSubmit} />
                                        </td>
                                     </tr>
                                ))}
                            </tbody>
                        </table>
                     </div>
                    {!searchTerm && (
                        <div className="pagination-controls">
                            <button onClick={() => {
                                     const q = buildItemsQuery();
                                     const firstPageQuery = query(q, limit(PAGE_SIZE));
                                fetchItemsPage(firstPageQuery);
                            }} disabled={page <= 1}>
                                <FiChevronLeft /> Trang Äáº§u
                            </button>
                             <span>Trang {page}</span>
                            <button onClick={() => {
                                const q = buildItemsQuery();
                                const nextPageQuery = query(q, startAfter(lastVisible), limit(PAGE_SIZE));
                                fetchItemsPage(nextPageQuery, true);
                                setPage(p => p + 1);
                            }} disabled={isLastPage}>
                                Trang Tiáº¿p <FiChevronRight />
                            </button>
                        </div>
                     )}
                </>
            )}

            {(sessionData.status === 'completed' || sessionData.status === 'adjusted') && (
                <div className="form-section" style={{marginTop: '20px'}}>
                    <h3 style={{color: '#dc3545'}}>Xá»­ LÃ½ ChÃªnh Lá»‡ch</h3>
                    {discrepancyItems.length > 0 ? (
                        <>
                            <table className="products-table discrepancy-table">
                                 <thead>
                                    <tr>
                                        <th><input type="checkbox" onChange={(e) => toggleAllCheckedItems(e.target.checked)} disabled={sessionData.status === 'adjusted'} /></th>
                                         <th>MÃ£ hÃ ng</th><th>TÃªn hÃ ng</th><th>Sá»‘ lÃ´</th>
                                        <th>Tá»“n há»‡ thá»‘ng</th><th>Tá»“n thá»±c táº¿</th><th>ChÃªnh lá»‡ch</th>
                                   </tr>
                                </thead>
                                <tbody>
                                     {discrepancyItems.map(item => (
                                        <tr key={item.id}>
                                             <td><input type="checkbox" checked={!!checkedItems[item.id]} onChange={() => toggleCheckedItem(item.id)} disabled={sessionData.status === 'adjusted'} /></td>
                                            <td>{item.productId}</td><td>{item.productName}</td><td>{item.lotNumber}</td>
                                             <td>{item.systemQty}</td><td><strong>{item.countedQty ?? 0}</strong></td>
                                            <td style={{color: (item.countedQty ?? 0) > item.systemQty ? 'green' : 'red', fontWeight: 'bold'}}>{(item.countedQty ?? 0) - item.systemQty}</td>
                                        </tr>
                                    ))}
                                 </tbody>
                            </table>
                            {sessionData.status !== 'adjusted' && (
                                 <div className="page-actions">
                                    <button onClick={promptForAdjust} className="btn-primary">XÃ¡c Nháº­n Äiá»u Chá»‰nh Tá»“n Kho</button>
                                </div>
                             )}
                        </>
                    ) : <p>KhÃ´ng cÃ³ chÃªnh lá»‡ch nÃ o Ä‘Æ°á»£c ghi nháº­n.</p>
                    }
                 </div>
            )}
        </div>
    );
};

export default StocktakeSessionPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\pages\UsersPage.jsx ---


// src/pages/UsersPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, getDocs, query, orderBy } from 'firebase/firestore'; 
import Spinner from '../components/Spinner';
import { FiPlus, FiTrash2, FiEdit } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { getFunctions, httpsCallable } from "firebase/functions";
import ConfirmationModal from '../components/ConfirmationModal';
import AddAllowedUserModal from '../components/AddAllowedUserModal';
import EditAllowedUserModal from '../components/EditAllowedUserModal'; // <-- 1. Import modal má»›i

const UsersPage = () => {
  const [allowedUsers, setAllowedUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false });

  // --- 2. ThÃªm state cho viá»‡c chá»‰nh sá»­a ---
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [userToEdit, setUserToEdit] = useState(null);

  const fetchAllowedUsers = useCallback(async () => {
    setLoading(true);
    try {
      const q = query(collection(db, "allowlist"), orderBy("addedAt", "desc"));
      const querySnapshot = await getDocs(q);
      const list = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setAllowedUsers(list);
    } catch (error) {
      console.error("Lá»—i khi táº£i danh sÃ¡ch cho phÃ©p: ", error);
      toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch cho phÃ©p.");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchAllowedUsers();
  }, [fetchAllowedUsers]);
  
  // --- 3. HÃ m Ä‘á»ƒ má»Ÿ modal chá»‰nh sá»­a ---
  const openEditModal = (user) => {
    setUserToEdit(user);
    setIsEditModalOpen(true);
  };

  const handleDelete = async (user) => {
    setConfirmModal({ isOpen: false });
    toast.info(`Äang xÃ³a ${user.email}...`);
    try {
        const functions = getFunctions();
        const deleteFunc = httpsCallable(functions, 'deleteUserAndAllowlist');
        // Cáº§n tÃ¬m UID tÆ°Æ¡ng á»©ng náº¿u cÃ³ Ä‘á»ƒ xÃ³a triá»‡t Ä‘á»ƒ
        // Logic nÃ y cÃ³ thá»ƒ Ä‘Æ°á»£c cáº£i thiá»‡n thÃªm, nhÆ°ng hiá»‡n táº¡i sáº½ xÃ³a khá»i allowlist trÆ°á»›c
        await deleteFunc({ email: user.email });
        toast.success(`ÄÃ£ xÃ³a ${user.email} khá»i danh sÃ¡ch.`);
        fetchAllowedUsers();
    } catch (error) {
        console.error("Lá»—i khi xÃ³a:", error);
        toast.error(error.message);
    }
  };

  const promptForDelete = (user) => {
    setConfirmModal({
        isOpen: true,
        title: "XÃ¡c nháº­n xÃ³a?",
        message: `Báº¡n cÃ³ cháº¯c muá»‘n xÃ³a ${user.email} khá»i danh sÃ¡ch Ä‘Æ°á»£c phÃ©p truy cáº­p khÃ´ng?`,
        onConfirm: () => handleDelete(user),
        confirmText: "Váº«n xÃ³a",
        confirmButtonType: 'danger'
    });
  };

  return (
    <div>
      <ConfirmationModal {...confirmModal} onCancel={() => setConfirmModal({ isOpen: false })} />
      {isAddModalOpen && <AddAllowedUserModal onClose={() => setIsAddModalOpen(false)} onUserAdded={fetchAllowedUsers} />}
      {/* --- 4. Render modal chá»‰nh sá»­a --- */}
      {isEditModalOpen && <EditAllowedUserModal onClose={() => setIsEditModalOpen(false)} onUserUpdated={fetchAllowedUsers} userToEdit={userToEdit} />}

      <div className="page-header">
        <h1>Quáº£n lÃ½ Quyá»n Truy cáº­p</h1>
        <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">
            <FiPlus style={{ marginRight: '5px' }} />
            ThÃªm Email
        </button>
      </div>
      
      <p>ÄÃ¢y lÃ  danh sÃ¡ch cÃ¡c email Ä‘Æ°á»£c phÃ©p Ä‘Äƒng nháº­p vÃ o há»‡ thá»‘ng báº±ng tÃ i khoáº£n Google cá»§a há».</p>

      {loading ? <Spinner /> : (
        <table className="products-table">
          <thead>
            <tr>
              <th>Email</th> 
              <th>Vai trÃ² (Role)</th>
              <th>Thao tÃ¡c</th>
            </tr>
          </thead>
          <tbody>
            {allowedUsers.length > 0 ? (
              allowedUsers.map(user => (
                <tr key={user.id}>
                  <td><strong>{user.email}</strong></td>
                  <td>
                    <span className={`status-badge ${user.role === 'owner' ? 'status-completed' : (user.role === 'admin' ? 'status-pending' : 'status-cancelled')}`}>
                      {user.role}
                    </span>
                  </td>
                  <td>
                    <div className="action-buttons">
                        {/* --- 5. ThÃªm nÃºt sá»­a vÃ  logic Ä‘iá»u kiá»‡n --- */}
                        <button 
                            className="btn-icon btn-edit" 
                            title="Chá»‰nh sá»­a vai trÃ²"
                            onClick={() => openEditModal(user)}
                            disabled={user.role === 'owner'} // VÃ´ hiá»‡u hÃ³a nÃºt sá»­a cho owner
                        >
                            <FiEdit />
                        </button>
                        <button 
                            className="btn-icon btn-delete" 
                            title="XÃ³a quyá»n truy cáº­p" 
                            onClick={() => promptForDelete(user)}
                            disabled={user.role === 'owner'} // VÃ´ hiá»‡u hÃ³a nÃºt xÃ³a cho owner
                        >
                            <FiTrash2 />
                        </button>
                    </div>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="3" style={{ textAlign: 'center' }}>ChÆ°a cÃ³ email nÃ o trong danh sÃ¡ch Ä‘Æ°á»£c phÃ©p.</td>
              </tr>
            )}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default UsersPage;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\dashboardService.js ---


// src/services/dashboardService.js
import { collection, getDocs, query, where, orderBy, limit, Timestamp, getCountFromServer } from 'firebase/firestore';
import { db } from '../firebaseConfig';

// --- Báº®T Äáº¦U THÃŠM Láº I CÃC HÃ€M Bá»Š THIáº¾U ---

/**
 * Láº¥y danh sÃ¡ch cÃ¡c phiáº¿u nháº­p Ä‘ang á»Ÿ tráº¡ng thÃ¡i "pending".
 */
export const getPendingImportTickets = async () => {
    const ticketsQuery = query(
        collection(db, 'import_tickets'),
        where("status", "==", "pending"),
        orderBy("createdAt", "desc"),
        limit(15)
    );
    const querySnapshot = await getDocs(ticketsQuery);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

/**
 * Láº¥y danh sÃ¡ch cÃ¡c phiáº¿u xuáº¥t Ä‘ang á»Ÿ tráº¡ng thÃ¡i "pending".
 */
export const getPendingExportTickets = async () => {
    const ticketsQuery = query(
        collection(db, 'export_tickets'),
        where("status", "==", "pending"),
        orderBy("createdAt", "desc"),
        limit(15)
    );
    const querySnapshot = await getDocs(ticketsQuery);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

// --- Káº¾T THÃšC PHáº¦N THÃŠM Láº I ---


/**
 * Láº¥y cÃ¡c thá»‘ng kÃª nhanh cho Dashboard.
 */
export const getDashboardStats = async () => {
    // 1. Äáº¿m sá»‘ lÃ´ sáº¯p háº¿t háº¡n (trong 120 ngÃ y tá»›i)
    const today = new Date();
    const futureDate = new Date();
    futureDate.setDate(today.getDate() + 120);
    const nearExpiryQuery = query(
        collection(db, "inventory_lots"),
        where("expiryDate", ">=", Timestamp.now()),
        where("expiryDate", "<=", Timestamp.fromDate(futureDate))
    );
    const nearExpirySnap = await getCountFromServer(nearExpiryQuery);

    // 2. Äáº¿m sá»‘ lÃ´ Ä‘Ã£ háº¿t háº¡n
    const expiredQuery = query(
        collection(db, "inventory_lots"),
        where("expiryDate", "<", Timestamp.now())
    );
    const expiredSnap = await getCountFromServer(expiredQuery);

    // 3. Äáº¿m tá»•ng sá»‘ mÃ£ hÃ ng (SKU)
    const productsQuery = query(collection(db, "products"));
    const productsSnap = await getCountFromServer(productsQuery);
    
    // 4. Äáº¿m tá»•ng sá»‘ Ä‘á»‘i tÃ¡c
    const partnersQuery = query(collection(db, "partners"));
    const partnersSnap = await getCountFromServer(partnersQuery);

    return {
        nearExpiryCount: nearExpirySnap.data().count,
        expiredCount: expiredSnap.data().count,
        skuCount: productsSnap.data().count,
        partnerCount: partnersSnap.data().count,
    };
};

/**
 * Láº¥y danh sÃ¡ch cÃ¡c phiáº¿u nháº­p Ä‘Ã£ hoÃ n thÃ nh gáº§n Ä‘Ã¢y.
 */
export const getRecentCompletedImports = async (count = 5) => {
    const ticketsQuery = query(
        collection(db, 'import_tickets'),
        where("status", "==", "completed"),
        orderBy("createdAt", "desc"),
        limit(count)
    );
    const querySnapshot = await getDocs(ticketsQuery);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

/**
 * Láº¥y danh sÃ¡ch cÃ¡c phiáº¿u xuáº¥t Ä‘Ã£ hoÃ n thÃ nh gáº§n Ä‘Ã¢y.
 */
export const getRecentCompletedExports = async (count = 5) => {
    const ticketsQuery = query(
        collection(db, 'export_tickets'),
        where("status", "==", "completed"),
        orderBy("createdAt", "desc"),
        limit(count)
    );
    const querySnapshot = await getDocs(ticketsQuery);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

/**
 * Láº¥y dá»¯ liá»‡u cho cÃ¡c biá»ƒu Ä‘á»“.
 */
export const getChartData = async () => {
    // 1. Dá»¯ liá»‡u cho biá»ƒu Ä‘á»“ HSD
    const today = new Date();
    const futureDate = new Date();
    futureDate.setDate(today.getDate() + 120);

    const safeQuery = query(collection(db, "inventory_lots"), where("expiryDate", ">", Timestamp.fromDate(futureDate)));
    const nearExpiryQuery = query(collection(db, "inventory_lots"), where("expiryDate", ">=", Timestamp.now()), where("expiryDate", "<=", Timestamp.fromDate(futureDate)));
    const expiredQuery = query(collection(db, "inventory_lots"), where("expiryDate", "<", Timestamp.now()));

    const [safeSnap, nearExpirySnap, expiredSnap] = await Promise.all([
        getCountFromServer(safeQuery),
        getCountFromServer(nearExpiryQuery),
        getCountFromServer(expiredQuery),
    ]);
    
    const expiryData = {
        safe: safeSnap.data().count,
        near_expiry: nearExpirySnap.data().count,
        expired: expiredSnap.data().count,
    };

    // 2. Dá»¯ liá»‡u cho biá»ƒu Ä‘á»“ Team
    const productsSnapshot = await getDocs(collection(db, "products"));
    const teamCounts = { MED: 0, BIO: 0, 'Spare Part': 0 };
    productsSnapshot.forEach(doc => {
        const team = doc.data().team;
        if (team in teamCounts) {
            teamCounts[team]++;
        }
    });

    return { expiryData, teamData: teamCounts };
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\partnerService.js ---


// src/services/partnerService.js

import { db } from '../firebaseConfig';
import {
    doc,
    setDoc,
    updateDoc,
    deleteDoc,
    serverTimestamp // <-- THÃŠM IMPORT
} from 'firebase/firestore';

/**
 * ThÃªm má»™t Ä‘á»‘i tÃ¡c má»›i vÃ o Firestore.
 * ID cá»§a Ä‘á»‘i tÃ¡c sáº½ Ä‘Æ°á»£c chuyá»ƒn thÃ nh chá»¯ hoa.
 * @param {string} partnerId - ID cá»§a Ä‘á»‘i tÃ¡c má»›i.
 * @param {object} partnerData - Dá»¯ liá»‡u cá»§a Ä‘á»‘i tÃ¡c (partnerName, partnerType).
 */
export const addPartner = async (partnerId, partnerData) => {
    // LuÃ´n chuyá»ƒn ID thÃ nh chá»¯ hoa Ä‘á»ƒ Ä‘áº£m báº£o tÃ­nh nháº¥t quÃ¡n
    const partnerRef = doc(db, 'partners', partnerId.toUpperCase());
    // <-- THÃŠM Dá»® LIá»†U createdAt VÃ€O ÄÃ‚Y
    await setDoc(partnerRef, { ...partnerData, createdAt: serverTimestamp() });
};

/**
 * Cáº­p nháº­t thÃ´ng tin má»™t Ä‘á»‘i tÃ¡c Ä‘Ã£ tá»“n táº¡i.
 * @param {string} partnerId - ID cá»§a Ä‘á»‘i tÃ¡c cáº§n cáº­p nháº­t.
 * @param {object} partnerData - Dá»¯ liá»‡u má»›i cá»§a Ä‘á»‘i tÃ¡c (partnerName, partnerType).
 */
export const updatePartner = async (partnerId, partnerData) => {
    const partnerDocRef = doc(db, 'partners', partnerId);
    await updateDoc(partnerDocRef, partnerData);
};

/**
 * XÃ³a má»™t Ä‘á»‘i tÃ¡c khá»i Firestore dá»±a vÃ o ID.
 * @param {string} partnerId - ID cá»§a Ä‘á»‘i tÃ¡c cáº§n xÃ³a.
 */
export const deletePartner = async (partnerId) => {
    const partnerDocRef = doc(db, 'partners', partnerId);
    await deleteDoc(partnerDocRef);
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\partnerService.test.js ---


// src/services/partnerService.test.js

import { describe, it, expect, vi, beforeEach } from 'vitest';

// Bá»• sung getFirestore vÃ  serverTimestamp vÃ o mock
vi.mock('firebase/firestore', () => ({
    doc: vi.fn(),
    setDoc: vi.fn(),
    updateDoc: vi.fn(),
    deleteDoc: vi.fn(),
    getFirestore: vi.fn(),
    // ThÃªm mock cho serverTimestamp Ä‘á»ƒ test cÃ³ thá»ƒ cháº¡y
    serverTimestamp: vi.fn(() => 'MOCK_SERVER_TIMESTAMP'),
}));

// Import cÃ¡c hÃ m SAU KHI Ä‘Ã£ mock
import { doc, setDoc, updateDoc, deleteDoc, serverTimestamp } from 'firebase/firestore';
import { addPartner, updatePartner, deletePartner } from './partnerService';
import { db } from '../firebaseConfig';

describe('Service: partnerService', () => {

    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('hÃ m addPartner nÃªn gá»i doc vÃ  setDoc vá»›i ID viáº¿t hoa vÃ  cÃ³ createdAt', async () => {
        const partnerId = 'ncc-test';
        const partnerData = { partnerName: 'Äá»‘i tÃ¡c Test', partnerType: 'supplier' };
        const mockDocRef = { id: 'mockDocRef' };
        
        doc.mockReturnValue(mockDocRef);

        await addPartner(partnerId, partnerData);

        // Kiá»ƒm tra ID Ä‘Ã£ Ä‘Æ°á»£c chuyá»ƒn thÃ nh chá»¯ hoa
        expect(doc).toHaveBeenCalledWith(db, 'partners', 'NCC-TEST');
        
        // **PHáº¦N Sá»¬A Lá»–I:**
        // Kiá»ƒm tra ráº±ng setDoc Ä‘Æ°á»£c gá»i vá»›i dá»¯ liá»‡u gá»‘c VÃ€ trÆ°á»ng createdAt
        expect(setDoc).toHaveBeenCalledWith(mockDocRef, { 
            ...partnerData, 
            createdAt: serverTimestamp() 
        });
    });

    it('hÃ m updatePartner nÃªn gá»i doc vÃ  updateDoc vá»›i cÃ¡c tham sá»‘ chÃ­nh xÃ¡c', async () => {
        const partnerId = 'KH-01';
        const partnerData = { partnerName: 'KhÃ¡ch hÃ ng A' };
        const mockDocRef = { id: 'mockDocRef' };
     
        doc.mockReturnValue(mockDocRef);

        await updatePartner(partnerId, partnerData);

        expect(doc).toHaveBeenCalledWith(db, 'partners', partnerId);
        expect(updateDoc).toHaveBeenCalledWith(mockDocRef, partnerData);
    });

    it('hÃ m deletePartner nÃªn gá»i doc vÃ  deleteDoc vá»›i tham sá»‘ chÃ­nh xÃ¡c', async () => {
        const partnerId = 'KH-02';
        const mockDocRef = { id: 'mockDocRef' };
        doc.mockReturnValue(mockDocRef);

        await deletePartner(partnerId);

        expect(doc).toHaveBeenCalledWith(db, 'partners', partnerId);
        expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\productService.js ---


// src/services/productService.js

import { db } from '../firebaseConfig';
import {
    doc,
    setDoc,
    updateDoc,
    deleteDoc,
    serverTimestamp // <-- THÃŠM IMPORT
} from 'firebase/firestore';

/**
 * ThÃªm má»™t sáº£n pháº©m má»›i vÃ o Firestore.
 * @param {string} productId - ID cá»§a sáº£n pháº©m má»›i.
 * @param {object} productData - Dá»¯ liá»‡u cá»§a sáº£n pháº©m.
 */
export const addProduct = async (productId, productData) => {
    const productRef = doc(db, 'products', productId);
    // <-- THÃŠM Dá»® LIá»†U createdAt VÃ€O ÄÃ‚Y
    await setDoc(productRef, { ...productData, createdAt: serverTimestamp() });
};

/**
 * Cáº­p nháº­t thÃ´ng tin má»™t sáº£n pháº©m Ä‘Ã£ cÃ³.
 * @param {string} productId - ID cá»§a sáº£n pháº©m cáº§n cáº­p nháº­t.
 * @param {object} productData - Dá»¯ liá»‡u má»›i cá»§a sáº£n pháº©m.
 */
export const updateProduct = async (productId, productData) => {
    const productDocRef = doc(db, 'products', productId);
    await updateDoc(productDocRef, productData);
};

/**
 * XÃ³a má»™t sáº£n pháº©m khá»i Firestore dá»±a vÃ o ID.
 * @param {string} productId - ID cá»§a sáº£n pháº©m cáº§n xÃ³a.
 */
export const deleteProduct = async (productId) => {
    const productDocRef = doc(db, 'products', productId);
    await deleteDoc(productDocRef);
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\productService.test.js ---


// src/services/productService.test.js

import { describe, it, expect, vi, beforeEach } from 'vitest';

// Bá»• sung getFirestore vÃ  serverTimestamp vÃ o mock
vi.mock('firebase/firestore', () => ({
    doc: vi.fn(),
    setDoc: vi.fn(),
    updateDoc: vi.fn(),
    deleteDoc: vi.fn(),
    getFirestore: vi.fn(),
    // ThÃªm mock cho serverTimestamp Ä‘á»ƒ test cÃ³ thá»ƒ cháº¡y
    serverTimestamp: vi.fn(() => 'MOCK_SERVER_TIMESTAMP'),
}));

// Import cÃ¡c hÃ m SAU KHI Ä‘Ã£ mock
import { doc, setDoc, updateDoc, deleteDoc, serverTimestamp } from 'firebase/firestore';
import { addProduct, updateProduct, deleteProduct } from './productService';
import { db } from '../firebaseConfig';

describe('Service: productService', () => {

    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('hÃ m addProduct nÃªn gá»i doc vÃ  setDoc vá»›i createdAt', async () => {
        const productId = 'SP001';
        const productData = { productName: 'Sáº£n pháº©m Test', unit: 'CÃ¡i' };
        const mockDocRef = { id: 'mockDocRef' };
        doc.mockReturnValue(mockDocRef);

        await addProduct(productId, productData);

        expect(doc).toHaveBeenCalledWith(db, 'products', productId);

        // **PHáº¦N Sá»¬A Lá»–I:**
        // Kiá»ƒm tra ráº±ng setDoc Ä‘Æ°á»£c gá»i vá»›i dá»¯ liá»‡u gá»‘c VÃ€ trÆ°á»ng createdAt
        expect(setDoc).toHaveBeenCalledWith(mockDocRef, {
            ...productData,
            createdAt: serverTimestamp()
        });
    });

    it('hÃ m updateProduct nÃªn gá»i doc vÃ  updateDoc vá»›i cÃ¡c tham sá»‘ chÃ­nh xÃ¡c', async () => {
        const productId = 'SP002';
        const productData = { productName: 'Sáº£n pháº©m cáº­p nháº­t' };
        const mockDocRef = { id: 'mockDocRef' };
        doc.mockReturnValue(mockDocRef);

        await updateProduct(productId, productData);

        expect(doc).toHaveBeenCalledWith(db, 'products', productId);
        expect(updateDoc).toHaveBeenCalledWith(mockDocRef, productData);
    });

    it('hÃ m deleteProduct nÃªn gá»i doc vÃ  deleteDoc vá»›i tham sá»‘ chÃ­nh xÃ¡c', async () => {
        const productId = 'SP003';
        const mockDocRef = { id: 'mockDocRef' };
        doc.mockReturnValue(mockDocRef);

        await deleteProduct(productId);

        expect(doc).toHaveBeenCalledWith(db, 'products', productId);
        expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\stocktakeService.js ---


// src/services/stocktakeService.js
import { db } from '../firebaseConfig';
import { doc, deleteDoc, collection, getDocs, writeBatch } from 'firebase/firestore';
import { toast } from 'react-toastify';

/**
 * XÃ³a má»™t phiÃªn kiá»ƒm kÃª vÃ  táº¥t cáº£ cÃ¡c má»¥c váº­t tÆ° con bÃªn trong nÃ³.
 * Firestore khÃ´ng tá»± Ä‘á»™ng xÃ³a subcollection, nÃªn chÃºng ta pháº£i lÃ m viá»‡c nÃ y báº±ng tay.
 * @param {string} sessionId - ID cá»§a phiÃªn kiá»ƒm kÃª cáº§n xÃ³a.
 */
export const deleteStocktakeSession = async (sessionId) => {
    const sessionRef = doc(db, 'stocktakes', sessionId);
    const itemsRef = collection(db, 'stocktakes', sessionId, 'items');

    // BÆ°á»›c 1: Láº¥y táº¥t cáº£ cÃ¡c má»¥c váº­t tÆ° trong subcollection 'items'
    const itemsSnapshot = await getDocs(itemsRef);
    
    if (itemsSnapshot.empty) {
        // Náº¿u khÃ´ng cÃ³ má»¥c con nÃ o, chá»‰ cáº§n xÃ³a document cha
        await deleteDoc(sessionRef);
        return;
    }

    // BÆ°á»›c 2: XÃ³a táº¥t cáº£ cÃ¡c má»¥c váº­t tÆ° con theo tá»«ng lÃ´ (batch) Ä‘á»ƒ Ä‘áº£m báº£o hiá»‡u nÄƒng
    // Firestore giá»›i háº¡n 500 thao tÃ¡c/batch
    const MAX_BATCH_SIZE = 500;
    let batch = writeBatch(db);
    let count = 0;

    for (const itemDoc of itemsSnapshot.docs) {
        batch.delete(itemDoc.ref);
        count++;
        if (count === MAX_BATCH_SIZE) {
            // Khi Ä‘á»§ 500, thá»±c thi batch vÃ  táº¡o batch má»›i
            await batch.commit();
            batch = writeBatch(db);
            count = 0;
            toast.info("Äang xÃ³a dá»¯ liá»‡u kiá»ƒm kÃª...");
        }
    }

    // Thá»±c thi batch cuá»‘i cÃ¹ng náº¿u cÃ²n thao tÃ¡c
    if (count > 0) {
        await batch.commit();
    }

    // BÆ°á»›c 3: Sau khi Ä‘Ã£ xÃ³a háº¿t cÃ¡c má»¥c con, xÃ³a document cha (phiÃªn kiá»ƒm kÃª)
    await deleteDoc(sessionRef);
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\services\stocktakeService.test.js ---


// src/services/stocktakeService.test.js

import { describe, it, expect, vi, beforeEach } from 'vitest';

// Bá»• sung getFirestore vÃ o mock
vi.mock('firebase/firestore', () => ({
    doc: vi.fn(),
    deleteDoc: vi.fn(),
    collection: vi.fn(),
    getDocs: vi.fn(),
    writeBatch: vi.fn(() => ({
        delete: vi.fn(),
        commit: vi.fn(),
    })),
    getFirestore: vi.fn(), // <-- THÃŠM DÃ’NG NÃ€Y
}));

import { doc, deleteDoc, collection, getDocs, writeBatch } from 'firebase/firestore';
import { deleteStocktakeSession } from './stocktakeService';
import { db } from '../firebaseConfig';

describe('Service: stocktakeService', () => {

    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('nÃªn xÃ³a cÃ¡c item con trÆ°á»›c khi xÃ³a document cha', async () => {
        const sessionId = 'session-with-items';
        const mockSessionRef = { id: 'sessionRef' };
        const mockItemsCollectionRef = { id: 'itemsCollectionRef' };
        
        const mockItemsSnapshot = {
            empty: false,
            docs: [
                { id: 'item1', ref: { id: 'item1Ref' } },
                { id: 'item2', ref: { id: 'item2Ref' } },
            ],
        };
        const mockBatch = { delete: vi.fn(), commit: vi.fn() };

        doc.mockReturnValue(mockSessionRef);
        collection.mockReturnValue(mockItemsCollectionRef);
        getDocs.mockResolvedValue(mockItemsSnapshot);
        writeBatch.mockReturnValue(mockBatch);

        await deleteStocktakeSession(sessionId);

        expect(collection).toHaveBeenCalledWith(db, 'stocktakes', sessionId, 'items');
        expect(getDocs).toHaveBeenCalledWith(mockItemsCollectionRef);
        expect(writeBatch).toHaveBeenCalledWith(db);
        expect(mockBatch.delete).toHaveBeenCalledTimes(2);
        expect(mockBatch.commit).toHaveBeenCalledTimes(1);
        expect(deleteDoc).toHaveBeenCalledWith(mockSessionRef);
    });

    it('nÃªn chá»‰ xÃ³a document cha náº¿u khÃ´ng cÃ³ item con', async () => {
        const sessionId = 'session-no-items';
        const mockSessionRef = { id: 'sessionRef' };
        const mockItemsCollectionRef = { id: 'itemsCollectionRef' };

        const mockItemsSnapshot = { empty: true, docs: [] };
        
        doc.mockReturnValue(mockSessionRef);
        collection.mockReturnValue(mockItemsCollectionRef);
        getDocs.mockResolvedValue(mockItemsSnapshot);

        await deleteStocktakeSession(sessionId);

        expect(getDocs).toHaveBeenCalledWith(mockItemsCollectionRef);
        expect(writeBatch).not.toHaveBeenCalled();
        expect(deleteDoc).toHaveBeenCalledWith(mockSessionRef);
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\stores\exportSlipStore.js ---


// src/stores/exportSlipStore.js

import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { toast } from 'react-toastify';

const useExportSlipStore = create(
    persist(
        (set, get) => ({
            // === STATE ===
            customerId: '',
            customerName: '',
            description: '',
            exportDate: new Date().toISOString().split('T')[0], // Äá»‹nh dáº¡ng YYYY-MM-DD
            items: [{ 
                id: Date.now(), 
                productId: '', productName: '', unit: '', packaging: '', storageTemp: '',
                availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '',
                expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '',
                isOutOfStock: false
            }],

            // === ACTIONS ===
            setCustomer: (id, name) => set({ customerId: id, customerName: name }),

            setDescription: (description) => set({ description }),

            addNewItemRow: () => set(state => ({
                items: [
                    ...state.items,
                    { 
                        id: Date.now(), 
                        productId: '', productName: '', unit: '', packaging: '', storageTemp: '',
                        availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '',
                        expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '',
                        isOutOfStock: false
                    }
                ]
            })),

            removeItemRow: (indexToRemove) => set(state => {
                if (state.items.length <= 1) return {};
                return { items: state.items.filter((_, index) => index !== indexToRemove) };
            }),

            updateItem: (index, field, value) => set(state => {
                const newItems = [...state.items];
                const currentItem = { ...newItems[index] };

                if (field === 'quantityToExport') {
                    if (value === '') {
                        currentItem[field] = '';
                    } else {
                        const val = Number(value);
                        if (val < 0) return {};
                        if (val > currentItem.quantityRemaining) {
                            toast.warn('Cáº£nh bÃ¡o: Sá»‘ lÆ°á»£ng xuáº¥t vÆ°á»£t quÃ¡ sá»‘ lÆ°á»£ng tá»“n!');
                            currentItem[field] = currentItem.quantityRemaining;
                        } else {
                            currentItem[field] = value;
                        }
                    }
                } else {
                    currentItem[field] = value;
                }

                if (field === 'productId') {
                    currentItem.isOutOfStock = false;
                }

                newItems[index] = currentItem;
                return { items: newItems };
            }),
            
            replaceItem: (index, newItemData) => set(state => {
                const newItems = [...state.items];
                newItems[index] = { ...newItems[index], ...newItemData };
                return { items: newItems };
            }),

            resetSlip: () => set({
                customerId: '',
                customerName: '',
                description: '',
                items: [{ 
                    id: Date.now(), 
                    productId: '', productName: '', unit: '', packaging: '', storageTemp: '',
                    availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '',
                    expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '',
                    isOutOfStock: false
                }]
            })
        }),
        {
            name: 'export-slip-storage', // TÃªn Ä‘á»‹nh danh Ä‘á»ƒ lÆ°u trong localStorage
        }
    )
);

export default useExportSlipStore;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\stores\importSlipStore.js ---


// src/stores/importSlipStore.js

import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { formatDate } from '../utils/dateUtils';

// State khá»Ÿi táº¡o cho má»™t dÃ²ng item má»›i, giÃºp trÃ¡nh láº·p láº¡i code
const initialItemState = {
    id: Date.now(),
    productId: '',
    productName: '',
    lotNumber: '',
    expiryDate: '',
    unit: '',
    packaging: '',
    quantity: '',
    notes: '',
    storageTemp: '',
    team: '',
    manufacturer: '',
    productNotFound: false,
    lotStatus: 'unchecked', // 'unchecked', 'exists', 'new', 'declared'
    existingLotInfo: null
};

// State khá»Ÿi táº¡o cho toÃ n bá»™ store
const initialState = {
    supplierId: '',
    supplierName: '',
    description: '',
    items: [{ ...initialItemState, id: Date.now() }]
};

const useImportSlipStore = create(
    persist(
        (set) => ({
            // === STATE ===
            ...initialState,

            // === ACTIONS ===
            setSupplier: (id, name) => set({ supplierId: id, supplierName: name }),
            
            setDescription: (description) => set({ description }),

            addNewItemRow: () => set(state => ({
                items: [...state.items, { ...initialItemState, id: Date.now() }]
            })),
            
            removeItemRow: (indexToRemove) => set(state => {
                // KhÃ´ng cho xÃ³a náº¿u chá»‰ cÃ²n 1 dÃ²ng
                if (state.items.length <= 1) return {};
                return { items: state.items.filter((_, index) => index !== indexToRemove) };
            }),

            // Action chung Ä‘á»ƒ cáº­p nháº­t má»™t trÆ°á»ng báº¥t ká»³ cá»§a má»™t item
            updateItem: (index, field, value) => set(state => {
                const newItems = [...state.items];
                const currentItem = { ...newItems[index] };
                currentItem[field] = value;

                // Náº¿u thay Ä‘á»•i productId hoáº·c lotNumber, reset cÃ¡c tráº¡ng thÃ¡i liÃªn quan
                if (field === 'productId' || field === 'lotNumber') {
                    currentItem.lotStatus = 'unchecked';
                    currentItem.expiryDate = '';
                    currentItem.existingLotInfo = null;
                }

                newItems[index] = currentItem;
                return { items: newItems };
            }),
            
            // Action Ä‘á»ƒ xá»­ lÃ½ káº¿t quáº£ sau khi tÃ¬m kiáº¿m sáº£n pháº©m
            handleProductSearchResult: (index, productData, found) => set(state => {
                const newItems = [...state.items];
                const currentItem = { ...newItems[index] };
                if (found) {
                    Object.assign(currentItem, {
                        productName: productData.productName || '',
                        unit: productData.unit || '',
                        packaging: productData.packaging || '',
                        storageTemp: productData.storageTemp || '',
                        team: productData.team || '',
                        manufacturer: productData.manufacturer || '',
                        productNotFound: false,
                    });
                } else {
                    Object.assign(currentItem, {
                        productName: '', unit: '', packaging: '', storageTemp: '',
                        team: '', manufacturer: '', productNotFound: true,
                    });
                }
                newItems[index] = currentItem;
                return { items: newItems };
            }),

            // Action Ä‘á»ƒ xá»­ lÃ½ káº¿t quáº£ sau khi kiá»ƒm tra sá»‘ lÃ´
            handleLotCheckResult: (index, lotData, exists) => set(state => {
                const newItems = [...state.items];
                const currentItem = { ...newItems[index] };
                if (exists) {
                    currentItem.lotStatus = 'exists';
                    currentItem.expiryDate = formatDate(lotData.expiryDate);
                    currentItem.existingLotInfo = {
                        quantityRemaining: lotData.quantityRemaining,
                        expiryDate: formatDate(lotData.expiryDate),
                    };
                } else {
                    currentItem.lotStatus = 'new';
                    currentItem.existingLotInfo = null;
                }
                newItems[index] = currentItem;
                return { items: newItems };
            }),
            
            // Action Ä‘á»ƒ khai bÃ¡o HSD cho lÃ´ má»›i tá»« modal
            declareNewLot: (index, declaredExpiryDate) => set(state => {
                const newItems = [...state.items];
                const currentItem = { ...newItems[index] };
                currentItem.expiryDate = declaredExpiryDate;
                currentItem.lotStatus = 'declared';
                newItems[index] = currentItem;
                return { items: newItems };
            }),

            // Action Ä‘á»ƒ Ä‘iá»n dá»¯ liá»‡u tá»« viá»‡c táº¡o sáº£n pháº©m má»›i nhanh
            fillNewProductData: (index, newData) => set(state => {
                const newItems = [...state.items];
                newItems[index] = {
                    ...newItems[index],
                    ...newData,
                    productNotFound: false,
                };
                return { items: newItems };
            }),

            // Action Ä‘á»ƒ reset toÃ n bá»™ form vá» tráº¡ng thÃ¡i ban Ä‘áº§u
            resetSlip: () => set({ ...initialState, items: [{ ...initialItemState, id: Date.now() }]})
        }),
        {
            name: 'import-slip-storage', // TÃªn Ä‘á»‹nh danh Ä‘á»ƒ lÆ°u trong localStorage
        }
    )
);

export default useImportSlipStore;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\stores\stocktakeStore.js ---


// src/stores/stocktakeStore.js
import { create } from 'zustand';

const initialState = {
    sessionData: null,
    items: [],
    discrepancyItems: [],
    checkedItems: {},
    summaryStats: { totalItems: 0, countedItems: 0, discrepancies: 0 },
    loading: true,
};

const useStocktakeStore = create((set, get) => ({
    ...initialState,

    // === ACTIONS ===

    initializeSession: (sessionData, summaryStats, discrepancyItems) => set({
        sessionData,
        summaryStats,
        discrepancyItems,
        loading: false,
        checkedItems: {},
    }),

    setItems: (items) => set({
        items: items.map(item => ({
            ...item,
            countedQtyBeforeSubmit: item.countedQty ?? null
        }))
    }),

    updateItemCountInUI: (itemId, newCount) => set(state => ({
        items: state.items.map(item =>
            item.id === itemId ? { ...item, countedQty: newCount } : item
        ),
    })),

    setSessionStatus: (status) => set(state => ({
        sessionData: state.sessionData ? { ...state.sessionData, status: status } : null,
    })),

    setSummary: (summaryStats, discrepancyItems) => set({ 
        summaryStats, 
        discrepancyItems 
    }),

    toggleCheckedItem: (itemId) => set(state => ({
        checkedItems: {
            ...state.checkedItems,
            [itemId]: !state.checkedItems[itemId],
        },
    })),
    
    toggleAllCheckedItems: (shouldCheck) => set(state => {
        if (!shouldCheck) {
            return { checkedItems: {} };
        }
        const allChecked = state.discrepancyItems.reduce((acc, item) => {
            acc[item.id] = true;
            return acc;
        }, {});
        return { checkedItems: allChecked };
    }),

    // Reset store vá» tráº¡ng thÃ¡i ban Ä‘áº§u khi rá»i khá»i trang
    clearStore: () => set({ ...initialState }),
})); // <-- Lá»–I ÄÃƒ ÄÆ¯á»¢á»¢C Sá»¬A á»ž ÄÃ‚Y (bá» bá»›t 1 dáº¥u '}')

export default useStocktakeStore;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\AdminLayout.css ---


:root {
  --header-height: 60px;
  --primary-color: #007bff;
  --text-color: #333;
  --bg-color: #f8f9fa;
  --border-color: #dee2e6;
  --transition-speed: 0.3s ease;
}

/* --- Bá» Cá»¤C LAYOUT NGANG Má»šI --- */
.admin-layout-horizontal {
  display: flex;
  flex-direction: column; /* Xáº¿p chá»“ng Navbar vÃ  Main Content */
  min-height: 100vh;
}

/* --- THANH NAVBAR TRÃŠN CÃ™NG --- */
.top-navbar {
  height: var(--header-height);
  width: 100%;
  background-color: #ffffff;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  padding: 0 20px;
  
  /* --- Quan trá»ng: Giá»¯ thanh menu cá»‘ Ä‘á»‹nh khi cuá»™n --- */
  position: sticky;
  top: 0;
  z-index: 1000;
}

.navbar-brand {
  color: var(--text-color);
  margin-right: auto; /* Äáº©y cÃ¡c icon menu vá» bÃªn pháº£i */
}

.nav-items {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  gap: 15px; /* Khoáº£ng cÃ¡ch giá»¯a cÃ¡c icon */
}

.nav-items li a {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px;
  text-decoration: none;
  color: #555;
  border-radius: 8px;
  transition: background-color var(--transition-speed);
}

.nav-items li a:hover {
  background-color: #f1f1f1;
}

/* ThÃªm style cho má»¥c menu Ä‘ang Ä‘Æ°á»£c chá»n (active) */
.nav-items li a.active {
  background-color: var(--primary-color);
  color: #ffffff;
}

.nav-icon {
  font-size: 24px; /* KÃ­ch thÆ°á»›c icon to, rÃµ rÃ ng */
}

/* --- Ná»˜I DUNG CHÃNH --- */
.main-content {
  flex-grow: 1;
  padding: 20px;
  background-color: var(--bg-color);
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

/* --- Báº¢NG products-table (ÄÆ¡n giáº£n) --- */
.products-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.products-table th,
.products-table td {
  border: 1px solid var(--border-color);
  padding: 12px 15px;
  text-align: center;
  vertical-align: middle; /* ThÃªm dÃ²ng nÃ y */
  white-space: normal;
}

.products-table th {
  background-color: var(--bg-color);
  font-weight: bold;
}

.products-table tbody tr:nth-of-type(even) {
  background-color: #f8f9fa;
}

.products-table tbody tr:hover {
  background-color: #e9ecef;
}

/* src/styles/AdminLayout.css */

/* --- Báº¢NG inventory-table (PHIÃŠN Báº¢N HOÃ€N CHá»ˆNH Má»šI) --- */
.inventory-table {
  width: 100%;
  border-collapse: collapse;
}

.inventory-table th, .inventory-table td {
  padding: 12px 15px;
  border-bottom: 1px solid var(--border-color);
  border-right: 1px solid var(--border-color);
  white-space: nowrap; /* Giá»¯ ná»™i dung trÃªn má»™t dÃ²ng theo máº·c Ä‘á»‹nh */
  vertical-align: middle;
  background-color: #ffffff;
  box-sizing: border-box;
}

/* THAY Äá»”I: ThÃªm quy táº¯c má»›i Ä‘á»ƒ cho phÃ©p tiÃªu Ä‘á» cá»™t 1 xuá»‘ng dÃ²ng */
.inventory-table th:nth-child(1) {
  white-space: normal;
}

.inventory-table th {
  background-color: #f8f9fa !important;
  position: sticky;
  top: 0;
  z-index: 2;
}

.inventory-table th, .inventory-table td {
  background-color: #ffffff;
}
.inventory-table tbody tr:hover td {
  background-color: #e9ecef;
}
.inventory-table tbody tr.selected-row td {
  background-color: #d6eaff !important;
}

/* CÃ¡c cá»™t Ä‘Æ°á»£c ghim (sticky) - PHIÃŠN Báº¢N Sá»¬A Lá»–I CUá»I CÃ™NG */
.inventory-table th:nth-child(1), .inventory-table td:nth-child(1) { position: sticky; left: 0; z-index: 1; }
.inventory-table th:nth-child(2), .inventory-table td:nth-child(2) { position: sticky; left: 90px; z-index: 1; }
.inventory-table th:nth-child(3), .inventory-table td:nth-child(3) { position: sticky; left: 229px; z-index: 1; } /* <-- GIáº¢I PHÃP CHá»’NG LÃŠN 1px */

.inventory-table th:nth-child(1), .inventory-table th:nth-child(2), .inventory-table th:nth-child(3) { z-index: 3; }

.inventory-table td:nth-child(1), .inventory-table td:nth-child(2), .inventory-table td:nth-child(3) { background-color: #ffffff; }
.inventory-table tbody tr:hover td:nth-child(1), .inventory-table tbody tr:hover td:nth-child(2), .inventory-table tbody tr:hover td:nth-child(3) { background-color: #e9ecef; }
.inventory-table tbody tr.selected-row td:nth-child(1), .inventory-table tbody tr:selected-row td:nth-child(2), .inventory-table tbody tr.selected-row td:nth-child(3) { background-color: #d6eaff !important; }

/* --- ÄIá»€U CHá»ˆNH Láº I Äá»˜ Rá»˜NG CÃC Cá»˜T --- */
.inventory-table th:nth-child(1), .inventory-table td:nth-child(1) { min-width: 90px; } /* THAY Äá»”I: Giáº£m tá»« 110px -> NgÃ y nháº­p */
.inventory-table th:nth-child(2), .inventory-table td:nth-child(2) { min-width: 140px; } /* MÃ£ hÃ ng */
.inventory-table th:nth-child(3), .inventory-table td:nth-child(3) { min-width: 280px; white-space: normal; text-align: left;} /* TÃªn hÃ ng (xuá»‘ng dÃ²ng, cÄƒn trÃ¡i) */
.inventory-table th:nth-child(4), .inventory-table td:nth-child(4) { min-width: 150px; } /* Sá»‘ lÃ´ */
.inventory-table th:nth-child(5), .inventory-table td:nth-child(5) { min-width: 120px; } /* HSD */
.inventory-table th:nth-child(6), .inventory-table td:nth-child(6) { min-width: 80px; }  /* ÄVT */
.inventory-table th:nth-child(7), .inventory-table td:nth-child(7) { min-width: 150px; white-space: normal; } /* Quy cÃ¡ch (xuá»‘ng dÃ²ng) */
.inventory-table th:nth-child(8), .inventory-table td:nth-child(8) { min-width: 100px; } /* SL Nháº­p */
.inventory-table th:nth-child(9), .inventory-table td:nth-child(9) { min-width: 100px; font-weight: bold; } /* SL CÃ²n láº¡i */
.inventory-table th:nth-child(10),.inventory-table td:nth-child(10){ min-width: 200px; white-space: normal; } /* Ghi chÃº */
.inventory-table th:nth-child(11),.inventory-table td:nth-child(11){ min-width: 150px; } /* Nhiá»‡t Ä‘á»™ BQ */
.inventory-table th:nth-child(12),.inventory-table td:nth-child(12){ min-width: 180px; white-space: normal; } /* HÃ£ng SX */
.inventory-table th:nth-child(13),.inventory-table td:nth-child(13){ min-width: 120px; } /* Team */

/* --- MODAL (POPUP) --- */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1010; /* TÄƒng z-index Ä‘á»ƒ ná»•i trÃªn navbar */
}

.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  width: 500px;
  max-width: 90%;
  display: flex;
  flex-direction: column;
  max-height: 90vh;
}

.modal-content h2 {
  margin-top: 0;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

/* THÃŠM ÄOáº N MÃƒ NÃ€Y VÃ€O */
.modal-body {
  flex-grow: 1; /* Cho phÃ©p khu vá»±c nÃ y giÃ£n ra Ä‘á»ƒ chiáº¿m khÃ´ng gian trá»‘ng */
  overflow-y: auto; /* Tá»± Ä‘á»™ng hiá»ƒn thá»‹ thanh cuá»™n dá»c khi ná»™i dung quÃ¡ dÃ i */
  padding: 10px 5px; /* ThÃªm má»™t chÃºt Ä‘á»‡m Ä‘á»ƒ ná»™i dung khÃ´ng dÃ­nh sÃ¡t viá»n */
  margin: 0 -5px; /* BÃ¹ láº¡i pháº§n padding Ä‘á»ƒ cÄƒn lá» tháº³ng hÃ ng */
}

/* --- BUTTONS & FORMS --- */
.btn-primary {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}
.btn-primary:hover {
  opacity: 0.9;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}
.btn-secondary:hover {
  opacity: 0.9;
}

.action-buttons {
  display: flex;
  gap: 10px;
  flex-wrap: wrap; /* ThÃªm dÃ²ng nÃ y */
}

.btn-icon {
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  font-size: 18px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.btn-edit { color: #007bff; }
.btn-edit:hover { background-color: #e7f3ff; }

.btn-delete { color: #dc3545; }
.btn-delete:hover { background-color: #fbebee; }

.btn-confirm { color: #28a745; }
.btn-confirm:hover { background-color: #eaf6ec; }

.btn-view { color: #17a2b8; }
.btn-view:hover { background-color: #e8f6f8; }

.form-section {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form-row {
  display: flex;
  gap: 20px;
}

.form-row .form-group {
  flex: 1;
}

/* PhiÃªn báº£n sá»­a lá»—i - Gá»™p chung input, select, vÃ  textarea */
.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 14px;
}
.form-group select {
  background-color: white;
}

.page-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
  gap: 10px;
}

/* --- GRID NHáº¬P LIá»†U --- */
.item-details-grid, .item-details-grid-edit {
  display: grid;
  gap: 10px;
  background-color: #fff;
  padding: 10px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
}

.item-details-grid {
  grid-template-columns: 1fr 2fr 1.1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 1.5fr 1fr 0.5fr;
}

.item-details-grid-edit {
  grid-template-columns: 1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr auto;
}

.grid-header {
  font-weight: bold;
  padding-bottom: 10px;
  border-bottom: 2px solid var(--border-color);
}

.grid-cell {
  padding: 5px 0;
  display: flex;
  align-items: center;
}

.grid-cell input,
.grid-cell textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.grid-cell textarea {
  resize: vertical;
  min-height: 38px;
}

.grid-cell input[readOnly],
.grid-cell textarea[readOnly] {
  background-color: #f0f0f0;
  cursor: not-allowed;
}

/* --- Bá»˜ Lá»ŒC & TRáº NG THÃI --- */
.status-badge {
  padding: 5px 10px;
  border-radius: 15px;
  font-size: 12px;
  color: white;
  font-weight: bold;
  line-height: 1.2;
  min-width: 80px; /* ThÃªm dÃ²ng nÃ y Ä‘á»ƒ Ä‘áº·t chiá»u rá»™ng tá»‘i thiá»ƒu */
  text-align: center; /* CÄƒn giá»¯a ná»™i dung */
  display: inline-block; /* Äáº£m báº£o nÃ³ hoáº¡t Ä‘á»™ng vá»›i min-width */
}

.status-pending {
  background-color: #ffc107;
  color: #333;
}

.status-completed {
  background-color: #28a745;
}

.status-cancelled {
  background-color: #6c757d;
}

/* --- THÃŠM CLASS Má»šI NÃ€Y --- */
.status-adjusted {
  background-color: #6f42c1;
}

.filters-container {
  background-color: #fff;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

.filter-group {
  display: flex;
  gap: 10px;
  align-items: center;
}

.filter-group button {
  background-color: #ffffff;
  border: 1px solid #adb5bd;
  color: #495057;
  padding: 8px 15px;
  border-radius: 20px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
}

.filter-group button:hover {
  background-color: #e9ecef;
  border-color: #495057;
}

.filter-group button.active {
  background-color: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.inventory-table td {
  text-align: center;
}

.inventory-table td:nth-child(3) {
  text-align: left;
}

/* --- CSS Má»šI: CHO Cáº¢NH BÃO Háº N Sá»¬ Dá»¤NG (DÃ¹ng chung, bá» gáº¡ch ngang) --- */

/* Ãp dá»¥ng mÃ u cho cÃ¡c Ã´ cá»§a dÃ²ng cÃ³ class tÆ°Æ¡ng á»©ng */
tr.near-expiry-yellow td { background-color: #fff3cd !important; color: #5a5a5a !important; }
tr.near-expiry-orange td { background-color: #ffe8cc !important; color: #5a5a5a !important; }
tr.near-expiry-red td { background-color: #f8d7da !important; color: #5a5a5a !important; }
tr.expired-black td { background-color: #212529 !important; color: #fff !important; }

/* In Ä‘áº­m chá»¯ cho cÃ¡c dÃ²ng cáº£nh bÃ¡o */
tr.near-expiry-yellow td,
tr.near-expiry-orange td,
tr.near-expiry-red td {
    font-weight: 500;
}

tr.expired-black td {
    font-weight: bold;
}

/* Äáº£m báº£o mÃ u hover váº«n hoáº¡t Ä‘á»™ng */
tbody tr:hover td {
  background-color: #d6eaff !important;
  color: #000 !important; /* Äáº£m báº£o chá»¯ luÃ´n Ä‘á»c Ä‘Æ°á»£c khi hover */
}

/* DÃ²ng Ä‘Æ°á»£c chá»n cÃ³ mÃ u Æ°u tiÃªn cao nháº¥t */
tbody tr.selected-row td {
  background-color: #cce5ff !important;
  color: #000 !important;
}

/* --- BADGES (TEAM & TEMP) --- */
.team-badge {
  display: inline-flex; /* Chuyá»ƒn sang inline-flex Ä‘á»ƒ cÄƒn giá»¯a ná»™i dung */
  align-items: center; /* CÄƒn giá»¯a theo chiá»u dá»c */
  justify-content: center; /* CÄƒn giá»¯a theo chiá»u ngang */
  padding: 5px 10px;
  border-radius: 15px; /* Bo trÃ²n hÆ¡n má»™t chÃºt */
  font-size: 12px;
  font-weight: 500;
  color: #fff;
  line-height: 1.2; /* TÄƒng khoáº£ng cÃ¡ch dÃ²ng cho dá»… Ä‘á»c khi xuá»‘ng dÃ²ng */
  min-height: 38px; /* Äáº·t chiá»u cao tá»‘i thiá»ƒu Ä‘á»ƒ chá»©a Ä‘Æ°á»£c 2 dÃ²ng */
  box-sizing: border-box; /* Äáº£m báº£o padding khÃ´ng lÃ m tÄƒng kÃ­ch thÆ°á»›c */
}
.team-badge.team-med { background-color: #007bff; }
.team-badge.team-bio { background-color: #28a745; }
.team-badge.team-sparepart { background-color: #6c757d; }

.temp-badge {
  padding: 4px 10px;
  border-radius: 4px;
  font-size: 13px;
  font-weight: 500;
  display: inline-block;
}
.temp-badge.temp-cool { background-color: #a7d9f2; color: #0056b3; }
.temp-badge.temp-frozen { background-color: #c9b6e7; color: #4a148c; }
.temp-badge.temp-room { background-color: #b3e6b3; color: #28a745; }
.temp-badge.temp-other { background-color: #ced4da; color: #343a40; border: 1px solid #adb5bd; }

/* --- TÃŒM KIáº¾M & Bá»˜ Lá»ŒC --- */
.controls-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 20px;
}

.search-container {
  flex-grow: 1;
  max-width: 400px;
}

.search-input {
  width: 100%;
  padding: 10px 15px;
  font-size: 14px;
  border-radius: 20px;
  border: 1px solid #dee2e6;
  outline: none;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.search-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

.filters-container {
  margin-bottom: 0;
  box-shadow: none;
  padding: 0;
  background-color: transparent;
}

/* --- DROPDOWN Sá» LÃ” (FEFO) --- */
.lot-option-near-expiry { background-color: #ffe08a; color: #333; }
.lot-option-expired { background-color: #ef9a9a; color: #fff; font-weight: bold; text-decoration: line-through; }

/* --- HIá»‚N THá»Š LÃ” ÄÃƒ CHá»ŒN --- */
.selected-lot-view {
  display: flex;
  align-items: center;
  width: 100%;
  height: 38px;
}

.selected-lot-input {
  width: calc(100% - 38px); 
  height: 100%;
  border-right: none !important;
  border-radius: 4px 0 0 4px !important;
  background-color: #e9ecef !important;
  margin: 0 !important;
  box-sizing: border-box;
}

.change-lot-btn {
  width: 38px;
  height: 100%;
  border: 1px solid #ced4da;
  border-left: none;
  border-radius: 0 4px 4px 0;
  background: #f8f9fa;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 !important;
  margin: 0 !important;
  box-sizing: border-box;
}

.change-lot-btn svg {
  width: 16px;
  height: 16px;
  color: #495057;
}

.change-lot-btn:hover {
  background-color: #e2e6ea;
}

/* --- GIAO DIá»†N XEM CHI TIáº¾T NHá»Ž Gá»ŒN --- */
.compact-info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 0px 20px;
  border: 1px solid var(--border-color);
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 10px;
}

.compact-info-grid div {
  margin-bottom: 5px;
}

.compact-info-grid label {
  font-size: 13px;
  color: #6c757d;
  margin: 0;
}

.compact-info-grid p {
  margin: 0;
  font-size: 15px;
}

.compact-info-grid .info-description {
  grid-column: 1 / -1;
  margin-top: 5px;
}

/* CSS Má»šI: Cho há»™p thÃ´ng tin lÃ´ hÃ ng Ä‘Ã£ tá»“n táº¡i */
.existing-lot-info {
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 12px;
  color: #004085; /* MÃ u chá»¯ xanh Ä‘áº­m */
  background-color: #cce5ff; /* MÃ u ná»n xanh nháº¡t */
  padding: 5px 8px;
  border-radius: 4px;
  margin-top: 5px;
  width: 100%;
  border: 1px solid #b8daff;
}

/* CSS CHO GIAO DIá»†N Tá»’N KHO Tá»”NG Há»¢P */
.lot-details-row td {
    padding: 0 !important;
    background-color: #fff !important;
    border-top: none !important;
}

.lot-details-container {
    padding: 15px 20px 15px 50px; /* Thá»¥t vÃ o Ä‘á»ƒ táº¡o cáº¥p báº­c */
    background-color: #fdfdfe;
}

.lot-details-container h4 {
    margin: 0 0 10px 0;
    font-weight: 500;
}

.lot-details-container ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.lot-details-container li {
    display: flex;
    gap: 20px;
    padding: 8px;
    border-radius: 4px;
    background-color: #e9ecef;
    font-size: 14px;
}

/* ========================================================================= */
/* === TÃ™Y CHá»ˆNH RIÃŠNG CHO TRANG QUáº¢N LÃ HÃ€NG HÃ“A (ProductsPage) === */
/* ========================================================================= */
.products-page-container .products-table {
    table-layout: fixed;
}
/* Cá»™t 2 (TÃªn hÃ ng) -> Rá»˜NG RA */
.products-page-container .products-table th:nth-child(2),
.products-page-container .products-table td:nth-child(2) {
    width: 40%;
    text-align: left;
    white-space: normal;
    word-break: break-word;
}
/* Cá»™t 3 (ÄVT) -> Háº¸P Láº I */
.products-page-container .products-table th:nth-child(3),
.products-page-container .products-table td:nth-child(3) {
    width: 120px;
    text-align: center;
}

/* ========================================================================= */
/* === TÃ™Y CHá»ˆNH RIÃŠNG CHO TRANG CHI TIáº¾T KIá»‚M KÃŠ (StocktakeSessionPage) === */
/* ========================================================================= */
.stocktake-session-page-container .products-table {
    table-layout: fixed;
}
/* Cá»™t 2 (TÃªn hÃ ng) -> Rá»˜NG RA */
.stocktake-session-page-container .products-table th:nth-child(2),
.stocktake-session-page-container .products-table td:nth-child(2) {
    width: 40%;
    text-align: left;
    white-space: normal;
    word-break: break-word;
}
/* Cá»™t 3 (Sá»‘ lÃ´) -> Háº¸P Láº I */
.stocktake-session-page-container .products-table th:nth-child(3),
.stocktake-session-page-container .products-table td:nth-child(3) {
    width: 150px;
    text-align: center;
}

.stocktake-session-page-container .products-table td:nth-child(8) input {
    width: 100%;
    box-sizing: border-box; /* Äáº£m báº£o padding khÃ´ng lÃ m trÃ n input */
}

/* CSS Má»šI: Cho mÃ u ná»n cá»§a tá»«ng lÃ´ hÃ ng con */
.lot-item {
    transition: background-color 0.2s; /* Hiá»‡u á»©ng chuyá»ƒn mÃ u mÆ°á»£t mÃ  */
}

/* LÃ´ bÃ¬nh thÆ°á»ng cÃ³ mÃ u ná»n máº·c Ä‘á»‹nh */
.lot-item {
    background-color: #e9ecef;
}

/* CÃ¡c lÃ´ cÃ³ cáº£nh bÃ¡o sáº½ cÃ³ mÃ u riÃªng */
.lot-item.lot-item-yellow {
    background-color: #fff3cd;
    border-left: 3px solid #ffeeba;
}
.lot-item.lot-item-orange {
    background-color: #ffe8cc;
    border-left: 3px solid #ffd8b8;
}
.lot-item.lot-item-red {
    background-color: #f8d7da;
    border-left: 3px solid #f5c6cb;
}
.lot-item.lot-item-expired {
    background-color: #d6d8db;
    border-left: 3px solid #c6c8ca;
    font-weight: bold;
}

    /* ThÃªm vÃ o cuá»‘i file src/styles/AdminLayout.css */

/* --- CSS CHO CÃC NÃšT PHÃ‚N TRANG --- */
.pagination-controls {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 15px;
  margin-top: 20px;
}

.pagination-controls button {
  background-color: #fff;
  border: 1px solid #dee2e6;
  color: var(--primary-color);
  padding: 8px 15px;
  border-radius: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 5px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.pagination-controls button:hover:not(:disabled) {
  background-color: #f8f9fa;
}

.pagination-controls button:disabled {
  color: #adb5bd;
  cursor: not-allowed;
}

.pagination-controls span {
  font-weight: 500;
  color: #495057;
}

/* --- TÃ™Y CHá»ˆNH KÃCH THÆ¯á»šC & CÄ‚N Lá»€ Báº¢NG QUáº¢N LÃ HÃ€NG HÃ“A --- */
/* ÄOáº N CODE NÃ€Y PHáº¢I Náº°M BÃŠN NGOÃ€I Báº¤T Ká»² KHá»I @media NÃ€O */

/* Thiáº¿t láº­p cho cá»™t 'TÃªn hÃ ng' (cá»™t thá»© 2) Rá»˜NG RA vÃ  cÄƒn lá» TRÃI */
.products-page-container .products-table th:nth-child(2),
.products-page-container .products-table td:nth-child(2) {
Â  Â  width: 40%;
Â  Â  text-align: left;
Â  Â  white-space: normal;
Â  Â  word-break: break-word;
}

/* Thiáº¿t láº­p cho cá»™t 'ÄÆ¡n vá»‹ tÃ­nh' (cá»™t thá»© 3) Háº¸P Láº I vÃ  cÄƒn GIá»®A */
.products-page-container .products-table th:nth-child(3),
.products-page-container .products-table td:nth-child(3) {
Â  Â  width: 120px;
Â  Â  text-align: center;
}

/* --- Báº®T BUá»˜C Báº¢NG PHáº¢I TUÃ‚N THEO KÃCH THÆ¯á»šC ÄÃƒ Äá»ŠNH --- */
.products-page-container .products-table {
    table-layout: fixed;
}

/* --- TÃ™Y CHá»ˆNH CÄ‚N Lá»€ CHO TRANG Tá»’N KHO Tá»”NG Há»¢P (PHIÃŠN Báº¢N Má»šI NHáº¤T) --- */

/* BÆ¯á»šC 1: ÄÆ°a Táº¤T Cáº¢ thÃ´ng tin trong báº£ng ra giá»¯a Ã´ (ká»ƒ cáº£ tiÃªu Ä‘á» 'TÃªn hÃ ng') */
.inventory-summary-page .products-table th,
.inventory-summary-page .products-table td {
    text-align: center !important;
    vertical-align: middle !important;
}

/* BÆ¯á»šC 2: Ghi Ä‘Ã¨, Ä‘Æ°a RIÃŠNG pháº§n Dá»® LIá»†U cá»§a cá»™t "TÃªn hÃ ng" (cá»™t thá»© 3) vá» cÄƒn lá» trÃ¡i */
.inventory-summary-page .products-table td:nth-child(3) {
    text-align: left !important;
}

/* ThÃªm vÃ o cuá»‘i file AdminLayout.css */

/* Class dÃ¹ng chung Ä‘á»ƒ cÄƒn giá»¯a cÃ¡c báº£ng danh sÃ¡ch */
.list-page-table th,
.list-page-table td {
    text-align: center;
    vertical-align: middle;
}

/* ThÃªm vÃ o cuá»‘i file AdminLayout.css */

/* CÄƒn chá»‰nh cho báº£ng trong phiÃªn kiá»ƒm kÃª */
.stocktake-session-page-container .products-table th,
.stocktake-session-page-container .products-table td {
    text-align: center;
    vertical-align: middle;
}

.stocktake-session-page-container .products-table th:nth-child(2),
.stocktake-session-page-container .products-table td:nth-child(2) {
    text-align: left;
}

/* === FIX: CÄ‚N GIá»®A CHO CÃC Báº¢NG DANH SÃCH (PHIÃŠN Báº¢N CUá»I CÃ™NG) === */
/* ThÃªm !important Ä‘á»ƒ Ä‘áº£m báº£o quy táº¯c nÃ y Ä‘Æ°á»£c Æ°u tiÃªn cao nháº¥t */
.products-table.list-page-table th,
.products-table.list-page-table td {
    text-align: center !important;
    vertical-align: middle;
}

/* Ghi Ä‘Ã¨ cÄƒn trÃ¡i cho cá»™t TÃªn hÃ ng (cá»™t thá»© 3 trong báº£ng Tá»“n Kho Tá»•ng Há»£p) */
.summary-table th:nth-child(3),
.summary-table td:nth-child(3) {
    text-align: left;
}

/* ThÃªm vÃ o cuá»‘i file src/styles/AdminLayout.css */

.new-data-notification {
  background-color: #e7f3ff;
  border: 1px solid #b3d7ff;
  color: #004085;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  animation: fadeIn 0.5s ease;
}

.new-data-notification p {
  margin: 0;
  font-weight: 500;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* ThÃªm vÃ o cuá»‘i file src/styles/AdminLayout.css */

.inline-warning {
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 13px;
  color: #dc3545; /* MÃ u Ä‘á» */
  width: 100%;
  padding: 8px;
  background-color: #fbebee;
  border-radius: 4px;
}

/* --- NÃšT Báº¤M Ná»”I (Äáº¶T á»ž NGOÃ€I) --- */
.floating-toggle-btn {
  position: fixed;
  bottom: 25px;
  right: 25px;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: var(--primary-color);
  color: white;
  border: none;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 28px;
  z-index: 10000;
  transition: transform 0.2s ease;
}

.floating-toggle-btn:hover {
  transform: scale(1.1);
}

/* Bá»” SUNG ÄOáº N NÃ€Y VÃ€O CUá»I FILE */
/* Fix cho input autocomplete náº±m trong grid */
.grid-cell > div {
    position: relative;
    z-index: 10;
}

  /* ThÃªm vÃ o cuá»‘i file src/styles/AdminLayout.css */

.new-data-notification {
  background-color: #e7f3ff;
  border: 1px solid #b3d7ff;
  color: #004085;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  animation: fadeIn 0.5s ease;
}

.new-data-notification p {
  margin: 0;
  font-weight: 500;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

  /* ThÃªm vÃ o cuá»‘i file src/styles/AdminLayout.css */

.new-data-notification {
  background-color: #e7f3ff;
  border: 1px solid #b3d7ff;
  color: #004085;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  animation: fadeIn 0.5s ease;
}

.new-data-notification p {
  margin: 0;
  font-weight: 500;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* ThÃªm Ä‘oáº¡n mÃ£ nÃ y vÃ o cuá»‘i file */
.item-details-grid {
    overflow: visible;
}

/* === CSS CHO LAYOUT Má»šI Cá»¦A TRANG VIEWER === */
.viewer-layout-container {
  padding: 15px;
}

.viewer-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 20px;
  margin-bottom: 20px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--border-color);
}

.viewer-header-left, .viewer-header-right, .viewer-header-center {
  display: flex;
  align-items: center;
  gap: 15px;
}

.viewer-header-left {
  justify-content: flex-start;
  flex: 1;
}

.viewer-header-center {
  flex-direction: column; /* Logo vÃ  tiÃªu Ä‘á» xáº¿p dá»c */
  justify-content: center;
  flex-shrink: 0;
}

.viewer-header-center .header-logo {
  max-width: 277px; /* TÄƒng kÃ­ch thÆ°á»›c logo má»™t chÃºt */
  height: auto;
  margin-bottom: 5px;
}

.viewer-header-center h1 {
  margin: 0;
  font-size: 20px;
  white-space: nowrap;
}

.viewer-header-right {
  justify-content: flex-end;
  flex: 1;
}

.viewer-main-content {
  padding-top: 10px;
}

/* --- CSS CHO GIAO DIá»†N RESPONSIVE TRÃŠN DI Äá»˜NG --- */
@media (max-width: 768px) {
  /* Pháº§n nÃ y Ã¡p dá»¥ng cho cáº£ 2 báº£ng:
   - Báº£ng tá»“n kho chi tiáº¿t (inventory-table)
   - Báº£ng tá»“n kho tá»•ng há»£p (products-table)
  */

  /* BÆ°á»›c 1: áº¨n Ä‘i pháº§n tiÃªu Ä‘á» (thead) cá»§a báº£ng gá»‘c */
  .inventory-table thead,
  .products-table thead {
    display: none;
  }

  /* BÆ°á»›c 2: Biáº¿n báº£ng vÃ  cÃ¡c dÃ²ng thÃ nh cÃ¡c khá»‘i card riÃªng biá»‡t */
  .inventory-table, 
  .inventory-table tbody, 
  .inventory-table tr,
  .products-table,
  .products-table tbody,
  .products-table tr {
    display: block;
    width: 100%;
  }

  .inventory-table tr,
  .products-table tr {
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    padding: 10px;
  }

  /* BÆ°á»›c 3: Biáº¿n cÃ¡c Ã´ (td) thÃ nh cÃ¡c hÃ ng dá»c vÃ  thÃªm nhÃ£n cho chÃºng */
  .inventory-table td,
  .products-table td {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 5px;
    border: none;
    border-bottom: 1px solid #eee;
    text-align: right;
    white-space: normal;
  }

  .inventory-table td:last-child,
  .products-table td:last-child {
    border-bottom: none;
  }
  
  /* ÄÃ¢y lÃ  pháº§n quan trá»ng nháº¥t: Láº¥y ná»™i dung tá»« attribute 'data-label' lÃ m nhÃ£n */
  .inventory-table td::before,
  .products-table td::before {
    content: attr(data-label);
    font-weight: bold;
    text-align: left;
    padding-right: 10px;
    color: #333;
  }
  
  /* Loáº¡i bá» cÃ¡c style khÃ´ng cáº§n thiáº¿t trÃªn di Ä‘á»™ng */
  .inventory-table td,
  .inventory-table th {
    position: static !important;
    min-width: auto !important;
  }

  /* Äiá»u chá»‰nh láº¡i cho cÃ¡c Ã´ chá»©a badge Ä‘á»ƒ hiá»ƒn thá»‹ Ä‘áº¹p hÆ¡n */
  .inventory-table td .team-badge,
  .inventory-table td .temp-badge {
    font-size: 13px;
  }
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\Dashboard.css ---


/* src/styles/Dashboard.css */

.dashboard-container {
    padding: 20px;
    background-color: #f8f9fa;
    height: calc(100vh - 60px);
    overflow-y: auto;
}

.dashboard-header {
    margin-bottom: 20px;
}

.dashboard-header h1 {
    margin: 0;
    color: #343a40;
}

.dashboard-grid-layout {
    display: grid;
    gap: 20px;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 20px;
}

.stat-card {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    display: flex;
    align-items: center;
    gap: 20px;
    border: 1px solid #e9ecef;
}

.stat-card-icon {
    font-size: 28px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    flex-shrink: 0;
}
.stat-card:nth-child(1) .stat-card-icon { background-color: #ffc107; } /* Yellow */
.stat-card:nth-child(2) .stat-card-icon { background-color: #dc3545; } /* Red */
.stat-card:nth-child(3) .stat-card-icon { background-color: #17a2b8; } /* Teal */
.stat-card:nth-child(4) .stat-card-icon { background-color: #6c757d; } /* Gray */


.stat-card-info h4 {
    margin: 0 0 5px 0;
    font-size: 14px;
    color: #6c757d;
    font-weight: 500;
}

.stat-card-info p {
    margin: 0;
    font-size: 28px;
    font-weight: 600;
    color: #343a40;
}

.chart-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 20px;
}

.table-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

.card {
    background-color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.card h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 16px;
    color: #495057;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
}

.recent-activity-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.recent-activity-list li {
    display: grid;
    grid-template-columns: 1fr 2fr auto;
    gap: 15px;
    padding: 10px 5px;
    border-bottom: 1px solid #f1f1f1;
    font-size: 14px;
    align-items: center;
}

.recent-activity-list li:last-child {
    border-bottom: none;
}

.recent-activity-list span:last-child {
    color: #6c757d;
    font-size: 13px;
    text-align: right;
}

.empty-message {
  padding: 20px;
  text-align: center;
  color: #888;
  font-style: italic;
}

.table-link {
  color: #007bff;
  font-weight: 500;
  text-decoration: none;
  transition: color 0.2s;
}

.table-link:hover {
  text-decoration: underline;
  color: #0056b3;
}

/* Responsive */
@media (max-width: 992px) {
    .chart-grid {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 768px) {
    .table-grid {
        grid-template-columns: 1fr;
    }
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\DashboardPage.module.css ---


/* src/styles/DashboardPage.module.css */

.dashboardContainer {
  padding: 20px;
}

.cardsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.dashboardCard {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  padding: 20px;
  border-left: 5px solid;
}

.cardIcon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 24px;
  margin-right: 20px;
}

.cardInfo {
  display: flex;
  flex-direction: column;
}

.cardTitle {
  color: #6c757d;
  font-size: 14px;
  margin-bottom: 5px;
}

.cardValue {
  color: #343a40;
  font-size: 28px;
  font-weight: bold;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\DataImportPage.module.css ---


/* src/styles/DataImportPage.module.css */

.dataImportPage {
    padding: 20px;
}

.importContainer {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: 30px;
    margin-top: 20px;
}

.importControls, .importActions {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.importControls h3, .importActions h3 {
    margin-top: 0;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 15px;
}

.importTypeSelector {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.importTypeSelector button {
    flex-grow: 1;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    color: #495057;
    transition: all 0.2s ease;
}

.importTypeSelector button.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.importInstructions {
    margin-top: 20px;
    padding: 15px;
    background-color: #e7f3ff;
    border-left: 4px solid #007bff;
    display: flex;
    gap: 10px;
    align-items: flex-start;
}
.importInstructions svg {
    font-size: 20px;
    color: #007bff;
    flex-shrink: 0;
    margin-top: 3px;
}
.importInstructions ul {
    margin: 0;
    padding-left: 20px;
    font-size: 14px;
    color: #333;
}
.importInstructions li {
    margin-bottom: 5px;
}

.importMethod {
    margin-bottom: 25px;
}
.importMethod h4 {
    margin-top: 0;
    margin-bottom: 10px;
}
.importMethod input[type="file"] {
    width: 100%;
}
.importMethod textarea {
    width: 100%;
    font-family: monospace;
    font-size: 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
}

.importLogContainer {
    margin-top: 20px;
}
.importLog {
    background-color: #2d333b;
    color: #cdd9e5;
    font-family: monospace;
    font-size: 13px;
    padding: 15px;
    border-radius: 6px;
    height: 200px;
    overflow-y: auto;
}
.importLog p {
    margin: 0 0 5px 0;
    white-space: pre-wrap;
    word-break: break-all;
}

.logItem.log-info { color: #cdd9e5; }
.logItem.log-success { color: #56d364; }
.logItem.log-warn { color: #e3b341; }
.logItem.log-error { color: #f85149; font-weight: bold; }

@media (max-width: 992px) {
    .importContainer {
        grid-template-columns: 1fr;
    }
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\ExpiryNotificationBanner.css ---


/* src/styles/ExpiryNotificationBanner.css */

.expiry-notification-banner {
    background-color: #fffbe6;
    border: 1px solid #ffe58f;
    border-radius: 8px;
    padding: 16px;
    margin: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

.banner-header {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #d46b08;
}

.banner-header svg {
    font-size: 24px;
}

.banner-header h4 {
    margin: 0;
    font-size: 16px;
}

.expiry-notification-banner > p {
    margin: 8px 0 16px 0;
    color: #666;
}

.notification-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.notification-list li {
    background-color: #fff;
    padding: 12px;
    border-radius: 6px;
    border: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 15px;
    transition: background-color 0.3s;
}

.notification-list li.processing {
    background-color: #f5f5f5;
    opacity: 0.7;
}

.notification-list .message {
    flex-grow: 1;
    font-size: 14px;
}

.confirm-button {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 6px 12px;
    font-size: 13px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
    white-space: nowrap;
}

.confirm-button:hover {
    background-color: #218838;
}

.confirm-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\MobileInventoryPage.module.css ---


/* src/styles/MobileInventoryPage.module.css */

.container {
    padding: 10px;
}

.searchBox {
    position: relative;
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    background-color: #fff;
    border-radius: 25px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.searchBox input {
    width: 100%;
    padding: 10px 20px;
    border: none;
    background: transparent;
    font-size: 16px;
    outline: none;
    padding-right: 50px;
}

.searchIcon {
    position: absolute;
    right: 20px;
    color: #888;
    font-size: 20px;
}

.resultsContainer {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.generalInfoCard, .lotListCard {
    background-color: #fff;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.generalInfoCard h3, .lotListCard h3 {
    margin: 0 0 15px 0;
    font-size: 18px;
    font-weight: 600;
    color: #333;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
}

.infoGrid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
}

.infoGrid > div {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.infoGrid strong {
    font-weight: bold;
    color: #6c757d;
    font-size: 13px;
}

.infoGrid span {
    font-size: 14px;
    color: #333;
}

.totalInfo {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px dashed #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.totalInfo strong {
    font-weight: bold;
    color: #495057;
    font-size: 15px;
}

.totalInfo span {
    font-size: 1.2rem;
    font-weight: bold;
    color: green;
}

.lotItem {
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 10px 0;
    border-bottom: 1px solid #eee;
}

.lotItem:last-child {
    border-bottom: none;
}

.lotItem div {
    display: flex;
    justify-content: space-between;
}

.lotItem strong {
    font-weight: bold;
    color: #6c757d;
    font-size: 13px;
}

.lotItem span {
    font-size: 14px;
    color: #333;
    text-align: right;
}

.noResults, .emptyMessage {
    text-align: center;
    color: #888;
    font-style: italic;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}

.noResults svg {
    font-size: 24px;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\print.css ---


/* src/styles/print.css (PhiÃªn báº£n cuá»‘i cÃ¹ng) */

@media print {
  /* --- CÃ€I Äáº¶T TRANG IN CHUNG --- */
  @page {
    size: portrait; /* In khá»• dá»c */
    margin: 5mm;
  }

  body {
    -webkit-print-color-adjust: exact !important;
    color-adjust: exact !important;
    font-size: 9pt; 
  }

  /* --- QUY Táº®C áº¨N/HIá»†N --- */
  body * { visibility: hidden; }
  .printable-area, .printable-area *, 
  .printable-inventory-area, .printable-inventory-area * {
    visibility: visible;
  }

  /* === BÆ¯á»šC Sá»¬A Lá»–I QUAN TRá»ŒNG NHáº¤T (PHIÃŠN Báº¢N Má»šI) === */
  /* ÄÆ°a khu vá»±c in ra khá»i luá»“ng vÃ  Ä‘áº·t láº¡i vá»‹ trÃ­ á»Ÿ gÃ³c trÃªn cÃ¹ng bÃªn trÃ¡i */
  .printable-area {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: auto !important;
    margin: 0 !important;
    padding: 0 !important;
    border: none !important;
    box-shadow: none !important;
  }
  
  .printable-inventory-area {
    position: absolute; left: 0; top: 0; width: 100%;
  }

  .printable-area table, .printable-area tbody, .printable-area thead, 
  .printable-area tr, .printable-area th, .printable-area td {
    display: revert !important;
    position: static !important;
    width: auto !important;
    min-width: 0 !important;
  }
  .printable-area td::before { content: "" !important; display: none !important; }

  /* --- QUY Táº®C IN PHIáº¾U (NHáº¬P/XUáº¤T) --- */
  .printable-area .modal-actions { display: none; }
  .printable-area h2 { font-size: 20pt; text-align: center; margin-bottom: 25px; }
  .printable-area .compact-info-grid { border: none; padding: 0; font-size: 11pt; margin-bottom: 25px; }
  .printable-area .products-table { table-layout: fixed; width: 100%; font-size: 10pt; border-collapse: collapse; margin-top: 20px; }
  .printable-area .products-table th, .printable-area .products-table td { border: 1px solid #333; padding: 8px; word-wrap: break-word; vertical-align: middle; text-align: center; }
  .printable-area .products-table th { background-color: #f2f2f2 !important; font-weight: bold; }
  .printable-area .products-table td:nth-child(2) { text-align: left; }
  
  /* --- TÃ™Y CHá»ˆNH Äá»˜ Rá»˜NG Cá»˜T CHO Tá»ªNG LOáº I PHIáº¾U --- */
  
  /* 1. DÃ nh cho Phiáº¿u Nháº­p (7 cá»™t) */
  .import-slip .products-table th:nth-child(1) { width: 11%; }
  .import-slip .products-table th:nth-child(2) { width: 45%; }
  .import-slip .products-table th:nth-child(3) { width: 11%; }
  .import-slip .products-table th:nth-child(4) { width: 11%; }
  .import-slip .products-table th:nth-child(5) { width: 8%; }
  .import-slip .products-table th:nth-child(6) { width: 6%; }
  .import-slip .products-table th:nth-child(7) { width: 8%; }

  /* 2. DÃ nh cho Phiáº¿u Xuáº¥t (8 cá»™t) */
  .export-slip .products-table th:nth-child(1) { width: 9%; }
  .export-slip .products-table th:nth-child(2) { width: 40%; }
  .export-slip .products-table th:nth-child(3) { width: 9%; }
  .export-slip .products-table th:nth-child(4) { width: 9%; }
  .export-slip .products-table th:nth-child(5) { width: 6%; }
  .export-slip .products-table th:nth-child(6) { width: 10%; }
  .export-slip .products-table th:nth-child(7) { width: 7%; }
  .export-slip .products-table th:nth-child(8) { width: 10%; }

  /* --- QUY Táº®C IN BÃO CÃO Tá»’N KHO --- */
  /* (CÃ¡c quy táº¯c bÃªn dÆ°á»›i giá»¯ nguyÃªn) */
  .printable-inventory-area .page-header,
  .printable-inventory-area .controls-container,
  .printable-inventory-area .pagination-controls,
  .printable-inventory-area .view-toggle,
  .printable-inventory-area th:first-child,
  .printable-inventory-area td:first-child {
    display: none;
  }

  .printable-inventory-area table, .printable-inventory-area tbody, .printable-inventory-area thead, 
  .printable-inventory-area tr, .printable-inventory-area th, .printable-inventory-area td {
      display: revert !important;
      position: static !important;
      width: auto !important;
      min-width: 0 !important;
  }
  .printable-inventory-area td::before { content: "" !important; display: none !important; }

  .printable-inventory-area table {
    width: 100% !important;
    border-collapse: collapse; box-shadow: none; table-layout: auto;
  }
  .printable-inventory-area th, .printable-inventory-area td {
    border: 1px solid #666;
    padding: 5px; text-align: left; white-space: normal;
  }
  .printable-inventory-area th { background-color: #f2f2f2 !important; font-weight: bold; }
  
  .printable-inventory-area th:nth-child(6), .printable-inventory-area td:nth-child(6),
  .printable-inventory-area th:nth-child(8), .printable-inventory-area td:nth-child(8),
  .printable-inventory-area th:nth-child(9), .printable-inventory-area td:nth-child(9)
  {
      text-align: center !important;
  }
  .printable-inventory-area .inventory-table td:nth-child(9) { font-weight: bold; }

  .printable-inventory-area .lot-details-row {
    display: table-row !important;
  }
  .printable-inventory-area .lot-details-row td {
    background-color: #f8f9fa !important;
    padding-left: 20px !important;
  }
  .printable-inventory-area .lot-details-container ul {
      display: block !important;
  }
  .printable-inventory-area .lot-details-container li {
      display: block !important;
      margin-bottom: 3px;
  }
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\Responsive.css ---


/* src/styles/Responsive.css */

/* Bá»c báº£ng Ä‘á»ƒ cho phÃ©p cuá»™n ngang trÃªn mÃ n hÃ¬nh nhá» */
.table-responsive-wrapper {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch; /* GiÃºp cuá»™n mÆ°á»£t hÆ¡n trÃªn iOS */
}

/* Äáº£m báº£o báº£ng khÃ´ng bá»‹ co láº¡i má»™t cÃ¡ch khÃ´ng kiá»ƒm soÃ¡t */
.table-responsive-wrapper .products-table {
    min-width: 700px; /* Äáº·t chiá»u rá»™ng tá»‘i thiá»ƒu cho báº£ng */
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\styles\StocktakePage.css ---


/* src/styles/StocktakePage.css */

/* áº¨n khu vá»±c dÃ¹ng Ä‘á»ƒ in ra khá»i mÃ n hÃ¬nh hiá»ƒn thá»‹ thÃ´ng thÆ°á»ng */
.printable-stocktake-area {
    display: none;
}

/* Máº·c Ä‘á»‹nh, áº©n giao diá»‡n tháº» trÃªn mÃ n hÃ¬nh lá»›n */
.stocktake-card-container {
    display: none;
}

/* --- GIAO DIá»†N Dáº NG THáºº CHO ÄIá»†N THOáº I --- */
@media (max-width: 768px) {
    /* áº¨n giao diá»‡n báº£ng trÃªn mÃ n hÃ¬nh nhá» */
    .stocktake-table-container {
        display: none;
    }

    /* Hiá»ƒn thá»‹ giao diá»‡n tháº» */
    .stocktake-card-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .stocktake-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 15px;
        border-left: 5px solid var(--primary-color);
    }

    .stocktake-card .card-header {
        margin-bottom: 10px;
    }

    .stocktake-card .card-product-id {
        font-weight: bold;
        font-size: 16px;
        color: var(--text-color);
        display: block;
    }
    .stocktake-card .card-product-name {
        font-size: 14px;
        color: #555;
    }

    .stocktake-card .card-info-row {
        display: flex;
        justify-content: space-between;
        font-size: 13px;
        color: #666;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 10px;
    }

    .stocktake-card .card-count-area {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .stocktake-card .count-box {
        flex: 1;
    }

    .stocktake-card .count-box label {
        font-size: 12px;
        color: #555;
        margin-bottom: 4px;
        display: block;
    }
    
    .stocktake-card .system-count p {
        font-size: 20px;
        font-weight: bold;
        color: var(--text-color);
        margin: 0;
        padding: 8px;
    }

    .stocktake-card .actual-count input {
        width: 100%;
        padding: 8px;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
        border: 1px solid var(--border-color);
        border-radius: 5px;
    }

    .stocktake-card .card-footer-info {
        font-size: 12px;
        color: #666;
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid var(--border-color);
    }
}


/* <-- NÃ‚NG Cáº¤P Sá»¬A Lá»–I: TÄƒng Ä‘á»™ Æ°u tiÃªn cá»§a CSS --> */
.products-table.discrepancy-table {
    table-layout: fixed;
    width: 100%;
}

.products-table.discrepancy-table th:nth-child(1),
.products-table.discrepancy-table td:nth-child(1) {
    width: 5%;
}

.products-table.discrepancy-table th:nth-child(2),
.products-table.discrepancy-table td:nth-child(2) {
    width: 15%;
}

.products-table.discrepancy-table th:nth-child(3),
.products-table.discrepancy-table td:nth-child(3) {
    width: 35%; /* Cho cá»™t tÃªn hÃ ng rá»™ng nháº¥t */
    white-space: normal;
    word-break: break-word;
}

.products-table.discrepancy-table th:nth-child(4) { width: 15%; }
.products-table.discrepancy-table th:nth-child(5) { width: 10%; }
.products-table.discrepancy-table th:nth-child(6) { width: 10%; }
.products-table.discrepancy-table th:nth-child(7) { width: 10%; }



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\test\__mocks__\firebaseFirestore.js ---


// src/test/__mocks__/firebaseFirestore.js
import { vi } from 'vitest';

// Dá»¯ liá»‡u máº«u
const mockDataPage1 = [
    { id: 'partner-01', data: () => ({ partnerName: 'CÃ´ng ty A' }) },
    { id: 'partner-02', data: () => ({ partnerName: 'CÃ´ng ty B' }) },
];

const mockDataPage2 = [
    { id: 'partner-03', data: () => ({ partnerName: 'CÃ´ng ty C' }) },
    { id: 'partner-04', data: () => ({ partnerName: 'CÃ´ng ty D' }) },
];

// Táº¡o hÃ m mock getDocs
const mockGetDocs = vi.fn();

// HÃ m tiá»‡n Ã­ch Ä‘á»ƒ thiáº¿t láº­p dá»¯ liá»‡u tráº£ vá» cho getDocs
export const setupMockData = (page) => {
    let docs = [];
    if (page === 1) {
        docs = mockDataPage1;
    } else if (page === 2) {
        docs = mockDataPage2;
    }

    mockGetDocs.mockResolvedValue({
        docs: docs,
        empty: docs.length === 0,
    });
};

// Mock cÃ¡c hÃ m khÃ¡c mÃ  hook sá»­ dá»¥ng
export const getDocs = mockGetDocs;
export const query = vi.fn((...args) => ({ _query: args, type: 'query' }));
export const limit = vi.fn((...args) => ({ _limit: args, type: 'limit' }));
export const startAfter = vi.fn((...args) => ({ _startAfter: args, type: 'startAfter' }));
export const endBefore = vi.fn((...args) => ({ _endBefore: args, type: 'endBefore' }));
export const limitToLast = vi.fn((...args) => ({ _limitToLast: args, type: 'limitToLast' }));
export const collection = vi.fn((...args) => ({ _collection: args, type: 'collection' }));
export const orderBy = vi.fn((...args) => ({ _orderBy: args, type: 'orderBy' }));
export const documentId = vi.fn(() => 'mockDocumentId');



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\test\setup.js ---


// src/test/setup.js
import { expect, afterEach } from 'vitest';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

// Má»Ÿ rá»™ng expect cá»§a vitest vá»›i cÃ¡c matchers tá»« jest-dom
expect.extend(matchers);

// Tá»± Ä‘á»™ng dá»n dáº¹p DOM áº£o sau má»—i bÃ i test
afterEach(() => {
  cleanup();
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\utils\dateUtils.js ---


// src/utils/dateUtils.js

/**
 * Chuyá»ƒn Ä‘á»•i má»™t Ä‘á»‘i tÆ°á»£ng Firebase Timestamp hoáº·c Date thÃ nh chuá»—i dd/mm/yyyy.
 * @param {object | Date} dateOrTimestamp - Äá»‘i tÆ°á»£ng Timestamp cá»§a Firebase hoáº·c Ä‘á»‘i tÆ°á»£ng Date.
 * @returns {string} - Chuá»—i ngÃ y thÃ¡ng Ä‘Ã£ Ä‘á»‹nh dáº¡ng hoáº·c 'N/A'.
 */
export const formatDate = (dateOrTimestamp) => {
  // --- Báº®T Äáº¦U NÃ‚NG Cáº¤P ---
  let date;

  // Kiá»ƒm tra xem cÃ³ pháº£i lÃ  Timestamp cá»§a Firebase khÃ´ng vÃ  chuyá»ƒn Ä‘á»•i nÃ³
  if (dateOrTimestamp && typeof dateOrTimestamp.toDate === 'function') {
    date = dateOrTimestamp.toDate();
  }
  // Náº¿u khÃ´ng, kiá»ƒm tra xem nÃ³ cÃ³ pháº£i lÃ  má»™t Ä‘á»‘i tÆ°á»£ng Date cá»§a JavaScript khÃ´ng
  else if (dateOrTimestamp instanceof Date) {
    date = dateOrTimestamp;
  }
  // Náº¿u khÃ´ng pháº£i cáº£ hai, chÃºng ta khÃ´ng thá»ƒ Ä‘á»‹nh dáº¡ng nÃ³
  else {
    return 'N/A';
  }

  // Äáº£m báº£o chÃºng ta cÃ³ má»™t ngÃ y há»£p lá»‡ trÆ°á»›c khi tiáº¿p tá»¥c
  if (isNaN(date.getTime())) {
      return 'N/A';
  }
  // --- Káº¾T THÃšC NÃ‚NG Cáº¤P ---

  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

/**
 * Chuyá»ƒn Ä‘á»•i má»™t chuá»—i dd/mm/yyyy thÃ nh Ä‘á»‘i tÆ°á»£ng Date.
 * @param {string} dateString - Chuá»—i ngÃ y thÃ¡ng theo Ä‘á»‹nh dáº¡ng dd/mm/yyyy.
 * @returns {Date | null} - Äá»‘i tÆ°á»£ng Date hoáº·c null náº¿u Ä‘á»‹nh dáº¡ng sai.
 */
export const parseDateString = (dateString) => {
  if (!dateString) return null;
  try {
    const parts = dateString.split('/');
    if (parts.length !== 3) return null;
    const [day, month, year] = parts;
    const dateObj = new Date(year, month - 1, day);
    if (dateObj.getFullYear() != year || dateObj.getMonth() != month - 1 || dateObj.getDate() != day) {
      return null;
    }
    return dateObj;
  } catch (error) {
    console.error("Lá»—i Ä‘á»‹nh dáº¡ng ngÃ y thÃ¡ng:", dateString, error);
    return null;
  }
};

/**
 * Äá»‹nh dáº¡ng má»™t chuá»—i sá»‘ thÃ nh Ä‘á»‹nh dáº¡ng ngÃ y dd/mm/yyyy khi ngÆ°á»i dÃ¹ng gÃµ.
 * @param {string} value - GiÃ¡ trá»‹ tá»« Ã´ input.
 * @returns {string} - Chuá»—i Ä‘Ã£ Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng.
 */
export const formatExpiryDate = (value) => {
    if (!value) return '';
    const digitsOnly = value.replace(/\D/g, '');
    const truncatedDigits = digitsOnly.slice(0, 8);
    const len = truncatedDigits.length;

    if (len <= 2) {
        return truncatedDigits;
    }
    if (len <= 4) {
        return `${truncatedDigits.slice(0, 2)}/${truncatedDigits.slice(2)}`;
    }
    return `${truncatedDigits.slice(0, 2)}/${truncatedDigits.slice(2, 4)}/${truncatedDigits.slice(4)}`;
};

/**
 * XÃ¡c Ä‘á»‹nh class mÃ u sáº¯c cho má»™t dÃ²ng dá»±a trÃªn ngÃ y háº¿t háº¡n.
 * @param {object} expiryDate - Äá»‘i tÆ°á»£ng Timestamp cá»§a Firebase.
 * @returns {string} - TÃªn class CSS tÆ°Æ¡ng á»©ng.
 */
export const getRowColorByExpiry = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'expired-black';
    if (diffDays <= 60) return 'near-expiry-red';
    if (diffDays <= 90) return 'near-expiry-orange';
    if (diffDays <= 120) return 'near-expiry-yellow';
    return '';
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\utils\dateUtils.test.js ---


import { describe, it, expect } from 'vitest';
import { formatDate, formatExpiryDate } from './dateUtils';

// NhÃ³m cÃ¡c bÃ i test cho file dateUtils
describe('CÃ¡c hÃ m xá»­ lÃ½ ngÃ y thÃ¡ng', () => {

    // NhÃ³m cÃ¡c bÃ i test cho hÃ m formatDate
    describe('hÃ m formatDate', () => {

        // Test trÆ°á»ng há»£p 1: NÃ³ pháº£i Ä‘á»‹nh dáº¡ng Ä‘Ãºng
        it('pháº£i Ä‘á»‹nh dáº¡ng má»™t Ä‘á»‘i tÆ°á»£ng Timestamp thÃ nh chuá»—i dd/mm/yyyy', () => {
            const mockTimestamp = { toDate: () => new Date(2025, 11, 25) }; // ThÃ¡ng 11 lÃ  thÃ¡ng 12
            const ketQua = formatDate(mockTimestamp);
            expect(ketQua).toBe('25/12/2025');
        });

        // Test trÆ°á»ng há»£p 2: NÃ³ pháº£i tráº£ vá» chuá»—i rá»—ng náº¿u Ä‘áº§u vÃ o lÃ  null
        it('pháº£i tráº£ vá» chuá»—i rá»—ng náº¿u Ä‘áº§u vÃ o lÃ  null', () => {
            expect(formatDate(null)).toBe('');
        });
    });

    // NhÃ³m cÃ¡c bÃ i test cho hÃ m formatExpiryDate
    describe('hÃ m formatExpiryDate', () => {
        it('pháº£i tá»± Ä‘á»™ng thÃªm dáº¥u gáº¡ch chÃ©o', () => {
            expect(formatExpiryDate('31122025')).toBe('31/12/2025');
        });

        it('pháº£i bá» qua cÃ¡c kÃ½ tá»± khÃ´ng pháº£i lÃ  sá»‘', () => {
            expect(formatExpiryDate('31-abc-12-2025')).toBe('31/12/2025');
        });
    });
});



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\utils\numberUtils.js ---


// src/utils/numberUtils.js

/**
 * Äá»‹nh dáº¡ng má»™t sá»‘ (dÃ¹ng '.' lÃ m ngÄƒn cÃ¡ch tháº­p phÃ¢n) sang chuá»—i kiá»ƒu Viá»‡t Nam.
 * VÃ­ dá»¥: 1234.5 -> "1.234,5"
 * @param {number | string} value - GiÃ¡ trá»‹ cáº§n Ä‘á»‹nh dáº¡ng.
 * @returns {string} - Chuá»—i Ä‘Ã£ Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng.
 */
export const formatNumber = (value) => {
  if (value === null || value === undefined || value === '') return '';
  
  const numStr = String(value);
  const parts = numStr.split('.');
  const integerPart = parts[0];
  const decimalPart = parts.length > 1 ? parts[1] : '';

  const formattedIntegerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

  return decimalPart ? `${formattedIntegerPart},${decimalPart}` : formattedIntegerPart;
};

/**
 * Chuyá»ƒn Ä‘á»•i chuá»—i ngÆ°á»i dÃ¹ng nháº­p vá» dáº¡ng sá»‘ thÃ´ (dÃ¹ng '.' lÃ m ngÄƒn cÃ¡ch tháº­p phÃ¢n).
 * Cho phÃ©p ngÆ°á»i dÃ¹ng gÃµ dáº¥u ',' hoáº·c '.' cho pháº§n tháº­p phÃ¢n.
 * VÃ­ dá»¥: "1.234,5" -> "1234.5"
 */
export const parseFormattedNumber = (value) => {
  if (typeof value !== 'string') return String(value);
  // Thay tháº¿ dáº¥u pháº©y báº±ng dáº¥u cháº¥m Ä‘á»ƒ chuáº©n hÃ³a
  const standardDecimal = value.replace(/,/g, '.');
  // XÃ³a táº¥t cáº£ cÃ¡c dáº¥u cháº¥m trá»« dáº¥u cháº¥m cuá»‘i cÃ¹ng (náº¿u cÃ³)
  const parts = standardDecimal.split('.');
  if (parts.length > 1) {
    const integerPart = parts.slice(0, -1).join('');
    const decimalPart = parts[parts.length - 1];
    return `${integerPart}.${decimalPart}`;
  }
  return standardDecimal;
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\utils\stringUtils.js ---


// src/utils/stringUtils.js
export const normalizeString = (str) => {
  if (!str) return '';
  return str
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/Ä‘/g, "d");
};

/**
 * TÃ¡ch má»™t chuá»—i thÃ nh má»™t máº£ng cÃ¡c tá»« khÃ³a Ä‘Ã£ Ä‘Æ°á»£c chuáº©n hÃ³a.
 * VÃ­ dá»¥: "CÃ´ng ty Anh KhÃ´i" -> ["cong", "ty", "anh", "khoi"]
 * @param {string} name - Chuá»—i tÃªn cáº§n xá»­ lÃ½.
 * @returns {string[]} - Máº£ng cÃ¡c tá»« khÃ³a.
 */
export const generateKeywords = (name) => {
  if (!name) return [];
  const normalizedName = normalizeString(name);
  const keywords = normalizedName.split(' ');
  return keywords.filter(keyword => keyword.length > 0); // Loáº¡i bá» cÃ¡c chuá»—i rá»—ng
};



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\App.jsx ---


// src/App.jsx

import React from 'react';
import './styles/AdminLayout.css';
import LoginPage from './components/LoginPage';
import AdminLayout from './components/AdminLayout';
import ViewerLayout from './components/ViewerLayout';
// import './App.css'; // KhÃ´ng cáº§n import App.css ná»¯a
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { AuthProvider, useAuth } from './context/UserContext';
import ErrorBoundary from './components/ErrorBoundary';

// Import login styles Ä‘á»ƒ dÃ¹ng cho wrapper
import loginStyles from './components/LoginPage.module.css';

const AppRoutes = () => {
  const { user, userRole, loading } = useAuth();
  if (loading) {
    return null; 
  }

  return (
    <>
      {user ? (
        <Routes>
          {userRole === 'owner' ? (
            <Route path="/*" element={<AdminLayout />} />
          ) : (
            <Route path="/*" element={<Navigate to="/view" />} />
          )}
          <Route path="/view/*" element={<ViewerLayout />} />
        </Routes>
      ) : (
        <div className={loginStyles.loginPageWrapper}>
          <LoginPage />
        </div>
      )}
    </>
  );
};

function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <ToastContainer
          position="top-right"
          autoClose={3000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
          closeButton={false} 
        />
        <ErrorBoundary>
          <AppRoutes />
        </ErrorBoundary>
      </AuthProvider>
    </BrowserRouter>
  );
}

export default App;



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\constants.js ---


/// src/constants.js

// <-- THÃŠM Má»šI: Háº±ng sá»‘ dÃ¹ng chung cho viá»‡c phÃ¢n trang
export const PAGE_SIZE = 15;

export const TEMP_OPTIONS = ["Nhiá»‡t Ä‘á»™ phÃ²ng", "2 â†’ 8Â°C", "-25 â†’ -15Â°C"];

export const MANUFACTURER_OPTIONS = ["Becton Dickinson", "Smiths Medical", "DentaLife", "Schulke", "Intra", "Rovers", "Corning", "Thermo Fisher", "Cytiva"];

export const UNIT_OPTIONS = ["CÃ¡i", "Há»™p", "ThÃ¹ng", "Chai", "á»ng", "Lá»", "Sá»£i", "CÃ¢y", "Can", "TuÃ½p", "Bá»™", "MÃ¡ng", "GÃ³i", "Khay"];



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\firebaseConfig.js ---


// src/firebaseConfig.js
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { getFunctions } from "firebase/functions";

// Äá»c thÃ´ng tin cáº¥u hÃ¬nh tá»« biáº¿n mÃ´i trÆ°á»ng
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

// Khá»Ÿi táº¡o cÃ¡c dá»‹ch vá»¥ Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
const functions = getFunctions(app);

// Xuáº¥t ra cÃ¡c dá»‹ch vá»¥ Ä‘á»ƒ sá»­ dá»¥ng trong toÃ n bá»™ á»©ng dá»¥ng
export { db, auth, functions };




--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\index.css ---


/* src/index.css */

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f0f2f5; /* ThÃªm má»™t mÃ u ná»n xÃ¡m nháº¡t cho toÃ n bá»™ trang */
}

* {
  box-sizing: border-box;
}



--- FILE: C:\Users\Asus Vivobook\quan-ly-kho\src\main.jsx ---


// src/main.jsx
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import * as Sentry from "@sentry/react";

import './index.css';
import App from './App.jsx';
import './styles/print.css';

// <-- PHáº¦N ÄÃƒ Sá»¬A Lá»–I CÃš PHÃP -->
Sentry.init({
  dsn: import.meta.env.VITE_SENTRY_DSN,
  integrations: [ // Lá»—i sai á»Ÿ Ä‘Ã¢y: Cáº§n cÃ³ key "integrations" lÃ  má»™t máº£ng
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration(),
  ],
  // We recommend adjusting this value in production, or using tracesSampler
  // for finer control
  tracesSampleRate: 1.0,
  // Session Replay
  replaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.
  replaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.
});
// <-- Káº¾T THÃšC PHáº¦N Sá»¬A Lá»–I -->

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
);



