--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddNewLotModal.jsx ---


// src/components/AddNewLotModal.jsx
import React, { useState } from 'react';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const AddNewLotModal = ({ productId, productName, lotNumber, onClose, onSave }) => {
    const [expiryDate, setExpiryDate] = useState('');

    const handleSave = () => {
        if (!expiryDate || expiryDate.length < 10) {
            toast.warn('Vui lÃ²ng nháº­p Háº¡n Sá»­ Dá»¥ng há»£p lá»‡ (dd/mm/yyyy).');
            return;
        }
        onSave(expiryDate);
    };

    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };
    
    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSave();
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <h2>Khai BÃ¡o LÃ´ HÃ ng Má»›i</h2>
                <div className="form-group">
                    <label>MÃ£ hÃ ng</label>
                    <input type="text" value={`${productId} - ${productName}`} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Sá»‘ lÃ´ má»›i</label>
                    <input type="text" value={lotNumber} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Háº¡n Sá»­ Dá»¥ng (dd/mm/yyyy) (*)</label>
                    <input
                        type="text"
                        value={expiryDate}
                        onChange={(e) => setExpiryDate(e.target.value)}
                        onBlur={handleExpiryDateBlur}
                        onKeyDown={handleKeyDown}
                        placeholder="Nháº­p HSD cho lÃ´ má»›i..."
                        autoFocus
                    />
                </div>
                
                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                    <button type="button" onClick={handleSave} className="btn-primary">XÃ¡c nháº­n</button>
                </div>
            </div>
        </div>
    );
};

export default AddNewLotModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddNewProductAndLotModal.jsx ---


// src/components/AddNewProductAndLotModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const tempOptions = ["Nhiá»‡t Ä‘á»™ phÃ²ng", "2 â†’ 8Â°C", "-25 â†’ -15Â°C"];
const manufacturerOptions = ["Becton Dickinson", "Smiths Medical", "DentaLife", "Schulke", "Intra", "Rovers", "Corning", "Thermo Fisher", "Cytiva"];
const unitOptions = ["CÃ¡i", "Há»™p", "ThÃ¹ng", "Chai", "á»‘ng", "Lá»", "Sá»£i", "CÃ¢y", "Can", "TuÃ½p", "Bá»™", "MÃ¡ng", "GÃ³i", "Khay"];

const AddNewProductAndLotModal = ({ productId, onClose, onSave }) => {
    const [productName, setProductName] = useState('');
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('MED');
    const [isSaving, setIsSaving] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!productName || !lotNumber || !unit) {
            toast.warn('Vui lÃ²ng Ä‘iá»n cÃ¡c thÃ´ng tin báº¯t buá»™c: TÃªn hÃ ng, Sá»‘ lÃ´, ÄVT.');
            return;
        }
        setIsSaving(true);
        const newProductData = {
            productName, unit, packaging, storageTemp, manufacturer, team,
        };
        try {
            const productRef = doc(db, 'products', productId);
            await setDoc(productRef, newProductData);
            onSave({
                ...newProductData, productId, lotNumber, expiryDate, quantity: '', notes: '',
            });
            toast.success("Táº¡o sáº£n pháº©m vÃ  lÃ´ hÃ ng má»›i thÃ nh cÃ´ng!");
        } catch (error) {
            console.error("Lá»—i khi táº¡o sáº£n pháº©m má»›i: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi táº¡o sáº£n pháº©m.');
        } finally {
            setIsSaving(false);
        }
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{width: '600px'}}>
                <h2>Táº¡o Nhanh Sáº£n Pháº©m Má»›i</h2>
                <p>MÃ£ hÃ ng <strong>{productId}</strong> chÆ°a tá»“n táº¡i. Vui lÃ²ng cung cáº¥p thÃ´ng tin chi tiáº¿t.</p>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ hÃ ng (ID)</label>
                        <input type="text" value={productId} readOnly disabled />
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>TÃªn hÃ ng (*)</label>
                            <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} required />
                        </div>
                        <div className="form-group">
                            <label>Team</label>
                            <select value={team} onChange={(e) => setTeam(e.target.value)}>
                                <option value="MED">MED</option>
                                <option value="BIO">BIO</option>
                                <option value="Spare Part">Spare Part</option>
                            </select>
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Sá»‘ lÃ´ (*)</label>
                            <input type="text" value={lotNumber} onChange={(e) => setLotNumber(e.target.value)} required />
                        </div>
                        <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                               type="text" 
                                value={expiryDate} 
                                onChange={(e) => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>ÄÆ¡n vá»‹ tÃ­nh (*)</label>
                            <input
                                list="unit-options"
                                value={unit}
                                onChange={(e) => setUnit(e.target.value)}
                                required
                                placeholder="Chá»n hoáº·c nháº­p ÄVT..."
                            />
                            <datalist id="unit-options">
                                {unitOptions.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
                            <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
                            <input
                                list="temp-options"
                                value={storageTemp}
                                onChange={(e) => setStorageTemp(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p nhiá»‡t Ä‘á»™..."
                            />
                            <datalist id="temp-options">
                                {tempOptions.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>HÃ£ng sáº£n xuáº¥t</label>
                            <input
                                list="manufacturer-options"
                                value={manufacturer}
                                onChange={(e) => setManufacturer(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p hÃ£ng SX..."
                            />
                            <datalist id="manufacturer-options">
                                {manufacturerOptions.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u vÃ  Chá»n'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddNewProductAndLotModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddPartnerModal.jsx ---


// src/components/AddPartnerModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const AddPartnerModal = ({ onClose, onPartnerAdded }) => {
    const [partnerId, setPartnerId] = useState('');
    const [partnerName, setPartnerName] = useState('');
    const [partnerType, setPartnerType] = useState('supplier'); // Máº·c Ä‘á»‹nh lÃ  nhÃ  cung cáº¥p
    const [isSaving, setIsSaving] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!partnerId || !partnerName) {
            toast.warn('MÃ£ vÃ  TÃªn Ä‘á»‘i tÃ¡c khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.');
            return;
        }
        setIsSaving(true);
        try {
            const newPartnerData = { partnerName, partnerType };
            const partnerRef = doc(db, 'partners', partnerId.toUpperCase());
            await setDoc(partnerRef, newPartnerData);

            toast.success('ThÃªm Ä‘á»‘i tÃ¡c má»›i thÃ nh cÃ´ng!');
            onPartnerAdded();
        } catch (error) {
            console.error("Lá»—i khi thÃªm Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi thÃªm Ä‘á»‘i tÃ¡c.');
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>ThÃªm Äá»‘i TÃ¡c Má»›i</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ Äá»‘i TÃ¡c (ID)</label>
                        <input type="text" value={partnerId} onChange={(e) => setPartnerId(e.target.value)} required />
                    </div>
                    <div className="form-group">
                        <label>TÃªn Äá»‘i TÃ¡c</label>
                        <input type="text" value={partnerName} onChange={(e) => setPartnerName(e.target.value)} required />
                    </div>
                    <div className="form-group">
                        <label>PhÃ¢n Loáº¡i</label>
                        <select value={partnerType} onChange={(e) => setPartnerType(e.target.value)}>
                            <option value="supplier">NhÃ  Cung Cáº¥p</option>
                            <option value="customer">KhÃ¡ch HÃ ng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddPartnerModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddProductModal.jsx ---


// src/components/AddProductModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const tempOptions = ["Nhiá»‡t Ä‘á»™ phÃ²ng", "2 â†’ 8Â°C", "-25 â†’ -15Â°C"];
const manufacturerOptions = ["Becton Dickinson", "Smiths Medical", "DentaLife", "Schulke", "Intra", "Rovers", "Corning", "Thermo Fisher", "Cytiva"];
const unitOptions = ["CÃ¡i", "Há»™p", "ThÃ¹ng", "Chai", "á»‘ng", "Lá»", "Sá»£i", "CÃ¢y", "Can", "TuÃ½p", "Bá»™", "MÃ¡ng", "GÃ³i", "Khay"];

const AddProductModal = ({ onClose, onProductAdded }) => {
  const [productId, setProductId] = useState('');
  const [productName, setProductName] = useState('');
  const [unit, setUnit] = useState('');
  const [packaging, setPackaging] = useState('');
  const [storageTemp, setStorageTemp] = useState('');
  const [manufacturer, setManufacturer] = useState('');
  const [team, setTeam] = useState('MED');
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!productId) {
      toast.warn('MÃ£ hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.');
      return;
    }
    setIsSaving(true);
    try {
      const newProductData = {
        productName,
        unit,
        packaging,
        storageTemp,
        manufacturer,
        team,
      };
      const productRef = doc(db, 'products', productId);
      await setDoc(productRef, newProductData);

      toast.success('ThÃªm sáº£n pháº©m má»›i thÃ nh cÃ´ng!');
      onProductAdded();
    } catch (error) {
      console.error("Lá»—i khi thÃªm sáº£n pháº©m: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi thÃªm sáº£n pháº©m.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>ThÃªm sáº£n pháº©m má»›i</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-row">
            <div className="form-group">
              <label>MÃ£ hÃ ng (ID)</label>
              <input type="text" value={productId} onChange={(e) => setProductId(e.target.value.toUpperCase())} required />
            </div>
            <div className="form-group">
              <label>TÃªn hÃ ng</label>
              <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} required />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>ÄÆ¡n vá»‹ tÃ­nh</label>
              <input
                list="unit-options-add"
                value={unit}
                onChange={(e) => setUnit(e.target.value)}
                required
                placeholder="Chá»n hoáº·c nháº­p ÄVT..."
              />
              <datalist id="unit-options-add">
                {unitOptions.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
              <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
              <input
                list="temp-options-add"
                value={storageTemp}
                onChange={(e) => setStorageTemp(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p nhiá»‡t Ä‘á»™..."
              />
              <datalist id="temp-options-add">
                  {tempOptions.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>HÃ£ng sáº£n xuáº¥t</label>
              <input
                list="manufacturer-options-add"
                value={manufacturer}
                onChange={(e) => setManufacturer(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p hÃ£ng SX..."
              />
              <datalist id="manufacturer-options-add">
                  {manufacturerOptions.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select value={team} onChange={(e) => setTeam(e.target.value)}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Äang lÆ°u...' : 'LÆ°u'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProductModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddUnlistedItemModal.jsx ---


// src/components/AddUnlistedItemModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const AddUnlistedItemModal = ({ onClose, onAddItem }) => {
    const [productId, setProductId] = useState('');
    const [productName, setProductName] = useState('');
    const [isNewProduct, setIsNewProduct] = useState(false);
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [countedQty, setCountedQty] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('');

    const handleProductSearch = async () => {
        if (!productId) return;
        const productRef = doc(db, 'products', productId.trim());
        const productSnap = await getDoc(productRef);
        if (productSnap.exists()) {
            const data = productSnap.data();
            setProductName(data.productName);
            setUnit(data.unit);
            setPackaging(data.packaging);
            setStorageTemp(data.storageTemp || '');
            setManufacturer(data.manufacturer || '');
            setTeam(data.team || '');
            setIsNewProduct(false);
        } else {
            setProductName('');
            setUnit('');
            setPackaging('');
            setStorageTemp('');
            setManufacturer('');
            setTeam('');
            setIsNewProduct(true);
            toast.warn("MÃ£ hÃ ng nÃ y khÃ´ng tá»“n táº¡i. Vui lÃ²ng nháº­p TÃªn hÃ ng má»›i.");
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!productId || !countedQty || (!productName && isNewProduct)) {
            toast.warn("Vui lÃ²ng Ä‘iá»n Ä‘áº§y Ä‘á»§ MÃ£ hÃ ng vÃ  Sá»‘ lÆ°á»£ng Ä‘áº¿m.");
            return;
        }
        
        onAddItem({
            productId: productId.trim(),
            productName: productName,
            lotNumber: lotNumber.trim() || 'N/A',
            expiryDate: expiryDate,
            unit: unit,
            packaging: packaging,
            systemQty: 0,
            countedQty: Number(countedQty),
            lotId: `new_${productId.trim()}_${lotNumber.trim() || Date.now()}`,
            isNew: true,
            storageTemp: storageTemp,
            manufacturer: manufacturer,
            team: team,
        });
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>ThÃªm HÃ ng NgoÃ i Danh SÃ¡ch</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ hÃ ng (Báº¯t buá»™c)</label>
                        <input type="text" value={productId} onChange={e => setProductId(e.target.value)} onBlur={handleProductSearch} required />
                    </div>
                    <div className="form-group">
                        <label>TÃªn hÃ ng</label>
                        <input type="text" value={productName} onChange={e => setProductName(e.target.value)} readOnly={!isNewProduct} required={isNewProduct} />
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Sá»‘ lÃ´</label>
                            <input type="text" value={lotNumber} onChange={e => setLotNumber(e.target.value)} />
                        </div>
                        <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={e => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                    </div>
                    <div className="form-group">
                        <label>Sá»‘ lÆ°á»£ng Ä‘áº¿m thá»±c táº¿ (Báº¯t buá»™c)</label>
                        <input type="number" value={countedQty} onChange={e => setCountedQty(e.target.value)} required />
                    </div>
                    
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                        <button type="submit" className="btn-primary">ThÃªm vÃ o Phiáº¿u</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddUnlistedItemModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AdminLayout.jsx ---


// src/components/AdminLayout.jsx

import React from 'react';
import Navbar from './Navbar';
import '../styles/AdminLayout.css';
import { Routes, Route } from 'react-router-dom';
import DashboardPage from '../pages/DashboardPage';
import ProductsPage from '../pages/ProductsPage';
import PartnersPage from '../pages/PartnersPage';
import NewImportPage from '../pages/NewImportPage';
import ImportListPage from '../pages/ImportListPage';
import NewExportPage from '../pages/NewExportPage';
import ExportListPage from '../pages/ExportListPage';
import StocktakeListPage from '../pages/StocktakeListPage';
import StocktakeSessionPage from '../pages/StocktakeSessionPage'; // Import trang má»›i
import LotTracePage from '../pages/LotTracePage';
import TestPage from '../pages/TestPage';

const AdminLayout = () => {
  return (
    <div className="admin-layout-horizontal">
      <Navbar />
      <main className="main-content">
        <Routes>
          <Route path="/" element={<DashboardPage />} />
          <Route path="/products" element={<ProductsPage />} />
          <Route path="/partners" element={<PartnersPage />} />
          <Route path="/new-import" element={<NewImportPage />} />
          <Route path="/new-export" element={<NewExportPage />} />
          <Route path="/imports" element={<ImportListPage />} />
          <Route path="/exports" element={<ExportListPage />} />
          {/* Cáº­p nháº­t Ä‘Æ°á»ng dáº«n cho Kiá»ƒm KÃª Kho */}
          <Route path="/stocktakes" element={<StocktakeListPage />} />
          <Route path="/stocktakes/:sessionId" element={<StocktakeSessionPage />} /> {/* Route má»›i cho trang chi tiáº¿t */}
          <Route path="/lot-trace" element={<LotTracePage />} />
          <Route path="/test" element={<TestPage />} />
        </Routes>
      </main>
    </div>
  );
};

export default AdminLayout;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ConfirmationModal.jsx ---


// src/components/ConfirmationModal.jsx
import React from 'react';
import { FiAlertTriangle } from 'react-icons/fi';

const ConfirmationModal = ({ isOpen, title, message, onConfirm, onCancel, confirmText = 'XÃ¡c nháº­n', cancelText = 'Há»§y' }) => {
    if (!isOpen) return null;

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                    <div style={{ color: '#f59e0b', fontSize: '32px' }}>
                        <FiAlertTriangle />
                    </div>
                    <div>
                        <h2 style={{ marginTop: 0, marginBottom: '10px' }}>{title}</h2>
                        <p style={{ margin: 0 }}>{message}</p>
                    </div>
                </div>
                <div className="modal-actions" style={{ marginTop: '25px' }}>
                    <button type="button" onClick={onCancel} className="btn-secondary">{cancelText}</button>
                    <button type="button" onClick={onConfirm} className="btn-primary" style={{ backgroundColor: '#dc3545' }}>{confirmText}</button>
                </div>
            </div>
        </div>
    );
};

export default ConfirmationModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\CreateStocktakeModal.jsx ---


// src/components/CreateStocktakeModal.jsx
import React, { useState } from 'react';
import { toast } from 'react-toastify';

const CreateStocktakeModal = ({ onClose, onCreate }) => {
    const [sessionName, setSessionName] = useState('');
    const [scope, setScope] = useState('all');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!sessionName) {
            toast.warn('Vui lÃ²ng Ä‘áº·t tÃªn cho phiÃªn kiá»ƒm kÃª.');
            return;
        }
        onCreate({ sessionName, scope });
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Táº¡o PhiÃªn Kiá»ƒm KÃª Má»›i</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>TÃªn PhiÃªn Kiá»ƒm KÃª</label>
                        <input
                            type="text"
                            value={sessionName}
                            onChange={(e) => setSessionName(e.target.value)}
                            placeholder="VÃ­ dá»¥: Kiá»ƒm kÃª cuá»‘i nÄƒm 2025"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Pháº¡m vi kiá»ƒm kÃª</label>
                        <select value={scope} onChange={(e) => setScope(e.target.value)}>
                            <option value="all">ToÃ n bá»™ kho</option>
                            <option value="MED">Chá»‰ Team MED</option>
                            <option value="BIO">Chá»‰ Team BIO</option>
                            <option value="Spare Part">Chá»‰ Team Spare Part</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                        <button type="submit" className="btn-primary">Báº¯t Ä‘áº§u</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default CreateStocktakeModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditExportSlipModal.jsx ---


// src/components/EditExportSlipModal.jsx

import React, { useState } from 'react';
import { FiPlusCircle, FiXCircle } from 'react-icons/fi';

const EditExportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });

  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    
    // --- Sá»¬A Lá»–I QUAN TRá»ŒNG Táº I ÄÃ‚Y ---
    if (field === 'quantityToExport') {
      const numericValue = Number(value); // LuÃ´n chuyá»ƒn giÃ¡ trá»‹ vá» dáº¡ng Sá»‘
      if (numericValue < 0) return; // Cháº·n sá»‘ Ã¢m
      updatedItems[index][field] = numericValue;
    } else {
      updatedItems[index][field] = value;
    }
    
    setSlipData({ ...slipData, items: updatedItems });
  };

  const addNewRow = () => {
  const newItems = [
      ...slipData.items,
      {
        // Táº¡o má»™t ID táº¡m thá»i cho key cá»§a React
        id: Date.now(),
        productId: '', 
        productName: '(Vui lÃ²ng tÃ¬m sáº£n pháº©m á»Ÿ trang Táº¡o Phiáº¿u)', 
        lotNumber: '',
        unit: '', 
        packaging: '', 
        quantityToExport: '', 
        notes: ''
      }
    ];
    setSlipData({ ...slipData, items: newItems });
  };  
  

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    const finalSlipData = {
        ...slipData,
        items: slipData.items.filter(item => item.productId && Number(item.quantityToExport) > 0)
    };
    onSave(finalSlipData);
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chá»‰nh sá»­a Phiáº¿u Xuáº¥t Kho (ID: {slipData.id})</h2>

        <h3>Chi tiáº¿t hÃ ng hÃ³a</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 1.5fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          <div className="grid-header">MÃ£ hÃ ng</div>
          <div className="grid-header">TÃªn hÃ ng</div>
          <div className="grid-header">Sá»‘ lÃ´</div>
          <div className="grid-header">ÄVT</div>
          <div className="grid-header">Quy cÃ¡ch</div>
          <div className="grid-header">SL Xuáº¥t</div>
          <div className="grid-header">Ghi chÃº</div>
          <div className="grid-header">Thao tÃ¡c</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={item.id || index}>
              <div className="grid-cell"><input type="text" value={item.productId} readOnly title="KhÃ´ng thá»ƒ sá»­a MÃ£ hÃ ng á»Ÿ Ä‘Ã¢y" /></div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} readOnly title="KhÃ´ng thá»ƒ sá»­a LÃ´ hÃ ng á»Ÿ Ä‘Ã¢y" /></div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell">
                <input 
                  type="number" 
                  value={item.quantityToExport} 
                  onChange={e => handleItemChange(index, 'quantityToExport', e.target.value)} 
                />
              </div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">ÄÃ³ng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">LÆ°u thay Ä‘á»•i</button>
        </div>
      </div>
    </div>
  );
};

export default EditExportSlipModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditImportSlipModal.jsx ---


// src/components/EditImportSlipModal.jsx
import React, { useState } from 'react';
import { FiPlusCircle, FiXCircle } from 'react-icons/fi';
import { formatExpiryDate } from '../utils/dateUtils';

const EditImportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });

  // HÃ€M Má»šI: Chá»‰ Ä‘á»‹nh dáº¡ng HSD khi ngÆ°á»i dÃ¹ng rá»i khá»i Ã´ input
  const handleExpiryDateBlur = (index, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index].expiryDate = formatExpiryDate(value);
    setSlipData({ ...slipData, items: updatedItems });
  };

  // HÃ€M CÅ¨: Giá» chá»‰ cáº­p nháº­t giÃ¡ trá»‹ thÃ´, khÃ´ng Ä‘á»‹nh dáº¡ng HSD
  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index][field] = value;
    setSlipData({ ...slipData, items: updatedItems });
  };

  const addNewRow = () => {
    const newItems = [
      ...slipData.items,
      {
        id: Date.now(),
        productId: '', productName: '', lotNumber: '', expiryDate: '',
        unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: ''
      }
    ];
    setSlipData({ ...slipData, items: newItems });
  };

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    onSave(slipData);
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chá»‰nh sá»­a Phiáº¿u Nháº­p Kho (ID: {slipData.id})</h2>
        <h3>Chi tiáº¿t hÃ ng hÃ³a</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          <div className="grid-header">MÃ£ hÃ ng</div>
          <div className="grid-header">TÃªn hÃ ng</div>
          <div className="grid-header">Sá»‘ lÃ´</div>
          <div className="grid-header">HSD</div>
          <div className="grid-header">ÄVT</div>
          <div className="grid-header">Quy cÃ¡ch</div>
          <div className="grid-header">Sá»‘ lÆ°á»£ng</div>
          <div className="grid-header">Ghi chÃº</div>
          <div className="grid-header">Thao tÃ¡c</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={index}>
              <div className="grid-cell"><input type="text" value={item.productId} onChange={e => handleItemChange(index, 'productId', e.target.value)} /></div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} onChange={e => handleItemChange(index, 'lotNumber', e.target.value)} /></div>
              <div className="grid-cell">
                <input 
                    type="text" 
                    placeholder="dd/mm/yyyy" 
                    value={item.expiryDate} 
                    onChange={e => handleItemChange(index, 'expiryDate', e.target.value)} 
                    onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell"><input type="number" value={item.quantity} onChange={e => handleItemChange(index, 'quantity', e.target.value)} /></div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <button type="button" onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>
          <FiPlusCircle style={{ marginRight: '5px' }} />
          ThÃªm dÃ²ng
        </button>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">ÄÃ³ng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">LÆ°u thay Ä‘á»•i</button>
        </div>
      </div>
    </div>
  );
};

export default EditImportSlipModal;




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditPartnerModal.jsx ---


// src/components/EditPartnerModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const EditPartnerModal = ({ onClose, onPartnerUpdated, partnerToEdit }) => {
    const [partnerData, setPartnerData] = useState({ ...partnerToEdit });
    const [isSaving, setIsSaving] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setPartnerData(prevData => ({ ...prevData, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSaving(true);
        try {
            const partnerDocRef = doc(db, 'partners', partnerToEdit.id);
            await updateDoc(partnerDocRef, {
                partnerName: partnerData.partnerName,
                partnerType: partnerData.partnerType,
            });
            toast.success('Cáº­p nháº­t thÃ´ng tin Ä‘á»‘i tÃ¡c thÃ nh cÃ´ng!');
            onPartnerUpdated();
        } catch (error) {
            console.error("Lá»—i khi cáº­p nháº­t Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Sá»­a ThÃ´ng Tin Äá»‘i TÃ¡c</h2>
                <p><strong>MÃ£ Äá»‘i TÃ¡c:</strong> {partnerToEdit.id}</p>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>TÃªn Äá»‘i TÃ¡c</label>
                        <input type="text" name="partnerName" value={partnerData.partnerName || ''} onChange={handleChange} required />
                    </div>
                    <div className="form-group">
                        <label>PhÃ¢n Loáº¡i</label>
                        <select name="partnerType" value={partnerData.partnerType} onChange={handleChange}>
                            <option value="supplier">NhÃ  Cung Cáº¥p</option>
                            <option value="customer">KhÃ¡ch HÃ ng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default EditPartnerModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditProductModal.jsx ---


// src/components/EditProductModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const EditProductModal = ({ onClose, onProductUpdated, productToEdit }) => {
  const [productData, setProductData] = useState({ ...productToEdit });
  const [isSaving, setIsSaving] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProductData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);
    try {
      const productDocRef = doc(db, 'products', productToEdit.id);
      await updateDoc(productDocRef, productData);
      toast.success('Cáº­p nháº­t sáº£n pháº©m thÃ nh cÃ´ng!');
      onProductUpdated();
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t sáº£n pháº©m: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t sáº£n pháº©m.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>Sá»­a thÃ´ng tin sáº£n pháº©m</h2>
        <p><strong>MÃ£ hÃ ng:</strong> {productToEdit.id}</p>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>TÃªn hÃ ng</label>
            <input type="text" name="productName" value={productData.productName || ''} onChange={handleChange} required />
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>ÄÆ¡n vá»‹ tÃ­nh</label>
              <input type="text" name="unit" value={productData.unit || ''} onChange={handleChange} required />
            </div>
            <div className="form-group">
              <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
              <input type="text" name="packaging" value={productData.packaging || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
              <input type="text" name="storageTemp" value={productData.storageTemp || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>HÃ£ng sáº£n xuáº¥t</label>
              <input type="text" name="manufacturer" value={productData.manufacturer || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select name="team" value={productData.team} onChange={handleChange}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditProductModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\HomePage.jsx ---


// src/components/HomePage.jsx

import React from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';

function HomePage({ user }) {
  // THAY THáº¾ CONSOLE.LOG CÅ¨ Báº°NG 4 DÃ’NG NÃ€Y
  console.log('--- DEBUGGING HOMEPAGE ---');
  console.log('ToÃ n bá»™ object user:', user);
  console.log('GiÃ¡ trá»‹ cá»§a user.email lÃ :', user?.email);
  console.log('Kiá»ƒu dá»¯ liá»‡u cá»§a user.email lÃ :', typeof user?.email);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      console.log('ÄÄƒng xuáº¥t thÃ nh cÃ´ng!');
    } catch (error) {
      console.error('Lá»—i Ä‘Äƒng xuáº¥t:', error);
    }
  };

  return (
    <div className="homepage-container">
      <h1>ChÃ o má»«ng trá»Ÿ láº¡i, {user?.email}!</h1>
      <p>ÄÃ¢y lÃ  trang quáº£n trá»‹ kho cá»§a báº¡n.</p>
      <button onClick={handleLogout} className="logout-button">
        ÄÄƒng xuáº¥t
      </button>
    </div>
  );
}

export default HomePage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\InventoryFilters.jsx ---


// src/components/InventoryFilters.jsx
import React from 'react';

const InventoryFilters = ({ userRole, onFilterChange, activeFilters }) => {
    
  const handleTeamFilter = (team) => {
    if (activeFilters.team === team) {
      onFilterChange('team', 'all');
    } else {
      onFilterChange('team', team);
    }
  };

  const handleDateFilter = (status) => {
    if (activeFilters.dateStatus === status) {
      onFilterChange('dateStatus', 'all');
    } else {
      onFilterChange('dateStatus', status);
    }
  };

  return (
    <div className="filters-container">
      {/* Bá»™ lá»c theo Team */}
      {/* Chá»‰ hiá»ƒn thá»‹ bá»™ lá»c team náº¿u lÃ  admin, owner, hoáº·c bio */}
      {(userRole === 'admin' || userRole === 'owner' || userRole === 'bio') && (
        <div className="filter-group">
          {/* Chá»‰ admin/owner má»›i tháº¥y nÃºt lá»c MED vÃ  BIO */}
          {(userRole === 'admin' || userRole === 'owner') && (
            <>
              <button
                className={activeFilters.team === 'MED' ? 'active' : ''}
                onClick={() => handleTeamFilter('MED')}
              >
                Lá»c hÃ ng MED
              </button>
              <button
                className={activeFilters.team === 'BIO' ? 'active' : ''}
                onClick={() => handleTeamFilter('BIO')}
              >
                Lá»c hÃ ng BIO
              </button>
            </>
          )}
          
          {/* Admin/owner vÃ  bio Ä‘á»u tháº¥y nÃºt nÃ y */}
          <button
            className={activeFilters.team === 'Spare Part' ? 'active' : ''}
            onClick={() => handleTeamFilter('Spare Part')}
          >
            Lá»c hÃ ng Spare Part
          </button>
        </div>
      )}
      
      {/* Bá»™ lá»c theo HSD */}
      <div className="filter-group">
        <button
          className={activeFilters.dateStatus === 'near_expiry' ? 'active' : ''}
          onClick={() => handleDateFilter('near_expiry')}
        >
          Lá»c hÃ ng cáº­n date (&lt;120 ngÃ y)
        </button>
        <button
          className={activeFilters.dateStatus === 'expired' ? 'active' : ''}
          onClick={() => handleDateFilter('expired')}
        >
          Lá»c hÃ ng Ä‘Ã£ háº¿t HSD
        </button>
      </div>
    </div>
  );
};

export default InventoryFilters;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LoginPage.jsx ---


// src/components/LoginPage.jsx
import React, { useState } from 'react';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../firebaseConfig';
import { toast } from 'react-toastify';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      console.log('ÄÄƒng nháº­p thÃ nh cÃ´ng!', userCredential.user);
      toast.success('ÄÄƒng nháº­p thÃ nh cÃ´ng!');
    } catch (error) {
      console.error('Lá»—i Ä‘Äƒng nháº­p:', error.code, error.message);
      toast.error('Sai email hoáº·c máº­t kháº©u. Vui lÃ²ng thá»­ láº¡i!');
    }
  };

  return (
    <div className="login-container">
      <h2>ÄÄƒng Nháº­p Há»‡ Thá»‘ng</h2>
      <form onSubmit={handleLogin}>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>Máº­t kháº©u</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">ÄÄƒng nháº­p</button>
      </form>
    </div>
  );
}

export default LoginPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LotJourneyExplorer.jsx ---


// src/components/LotJourneyExplorer.jsx

import React, { useMemo } from 'react';
import ReactFlow, { Background, Controls } from 'reactflow';
import 'reactflow/dist/style.css';

const processDataForFlow = (importRecords, exportHistory) => {
    const initialNodes = [];
    const initialEdges = [];

    if (importRecords.length === 0) {
        return { initialNodes, initialEdges };
    }

    const masterInfo = importRecords[0];
    const totalImported = importRecords.reduce((sum, rec) => sum + rec.quantityImported, 0);

    const supplierName = masterInfo.supplier || 'KhÃ´ng rÃµ';
    initialNodes.push({
        id: 'supplier-node',
        data: { label: `NhÃ  Cung Cáº¥p: ${supplierName}`, type: 'supplier', name: supplierName },
        position: { x: 0, y: 150 },
        style: { background: '#fde68a', borderColor: '#ca8a04', whiteSpace: 'pre-wrap' },
    });

    initialNodes.push({
        id: 'lot-node',
        data: { label: `LÃ´: ${masterInfo.lotNumber}\nTá»•ng nháº­p: ${totalImported}`, type: 'lot' },
        position: { x: 300, y: 150 },
        style: { background: '#a5b4fc', borderColor: '#4338ca', width: 180, whiteSpace: 'pre-wrap' },
    });
    
    initialEdges.push({
        id: 'edge-supplier-lot',
        source: 'supplier-node',
        target: 'lot-node',
        animated: true,
        label: `${totalImported} ${masterInfo.unit}`,
    });

    const customerNodes = {};
    exportHistory.forEach(exp => {
        if (!customerNodes[exp.customer]) {
            customerNodes[exp.customer] = { name: exp.customer, total: 0 };
        }
        customerNodes[exp.customer].total += exp.quantityExported;
    });

    const outputNodes = Object.values(customerNodes);
    const totalRemaining = totalImported - exportHistory.reduce((sum, rec) => sum + rec.quantityExported, 0);
    if (totalRemaining > 0) {
        outputNodes.push({ name: 'Tá»“n Kho', total: totalRemaining });
    }
    
    outputNodes.forEach((nodeItem, index) => {
        const yPos = index * 120;
        const nodeId = nodeItem.name.replace(/\s+/g, '-').toLowerCase();

        initialNodes.push({
            id: nodeId,
            data: { 
                label: `${nodeItem.name}\nSá»‘ lÆ°á»£ng: ${nodeItem.total}`, 
                type: nodeItem.name === 'Tá»“n Kho' ? 'stock' : 'customer',
                name: nodeItem.name
            },
            position: { x: 600, y: yPos },
            style: { 
                background: nodeItem.name === 'Tá»“n Kho' ? '#d1d5db' : '#6ee7b7',
                borderColor: nodeItem.name === 'Tá»“n Kho' ? '#4b5563' : '#047857',
                whiteSpace: 'pre-wrap'
            },
        });

        initialEdges.push({
            id: `edge-lot-${nodeId}`,
            source: 'lot-node',
            target: nodeId,
            label: `${nodeItem.total} ${masterInfo.unit}`,
        });
    });

    return { initialNodes, initialEdges };
};

const LotJourneyExplorer = ({ importRecords, exportHistory, onNodeClick, onPaneClick }) => {
    const { initialNodes, initialEdges } = useMemo(
        () => processDataForFlow(importRecords, exportHistory),
        [importRecords, exportHistory]
    );

    if (initialNodes.length === 0) {
        return null;
    }
    
    return (
        <div style={{ height: '500px', border: '1px solid #eee', borderRadius: '8px' }}>
            <ReactFlow
                nodes={initialNodes}
                edges={initialEdges}
                fitView
                onNodeClick={onNodeClick}
                onPaneClick={onPaneClick}
            >
                <Background />
                <Controls /> 
            </ReactFlow>
        </div>
    );
};

export default LotJourneyExplorer;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Navbar.jsx ---


// src/components/Navbar.jsx

import React from 'react';
import { NavLink } from 'react-router-dom';
// --- THAY Äá»”I: IMPORT Bá»˜ ICON Má»šI ---
import { 
    FiGrid, 
    FiArchive, 
    FiFilePlus,   // Icon má»›i cho Táº¡o Phiáº¿u Nháº­p
    FiFileMinus,  // Icon má»›i cho Táº¡o Phiáº¿u Xuáº¥t
    FiClipboard, 
    FiFileText, 
    FiShare2, 
    FiCheckSquare,
    FiTool, 
    FiUsers,
    FiBookOpen,
} from 'react-icons/fi';
import '../styles/AdminLayout.css';

const Navbar = () => {
  return (
    <nav className="top-navbar">
      <div className="navbar-brand">
        <h3>Kho PT Biomed</h3>
      </div>
      <ul className="nav-items">
        <li>
          <NavLink to="/view" title="Xem Sá»• CÃ¡i Tá»“n Kho">
            <FiBookOpen className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/" title="Báº£ng Ä‘iá»u khiá»ƒn">
            <FiGrid className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/products" title="Quáº£n lÃ½ hÃ ng hÃ³a">
            <FiArchive className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/partners" title="Quáº£n lÃ½ Äá»‘i tÃ¡c"><FiUsers className="nav-icon" /></NavLink> {/* <-- LINK Má»šI */}
        </li>
        {/* --- THAY Äá»”I: ICON Táº O PHIáº¾U NHáº¬P --- */}
        <li>
          <NavLink to="/new-import" title="Táº¡o Phiáº¿u Nháº­p">
            <FiFilePlus className="nav-icon" />
          </NavLink>
        </li>
        {/* --- THAY Äá»”I: ICON Táº O PHIáº¾U XUáº¤T --- */}
        <li>
          <NavLink to="/new-export" title="Táº¡o Phiáº¿u Xuáº¥t">
            <FiFileMinus className="nav-icon" />
          </NavLink>
        </li>
        {/* --- THAY Äá»”I: ICON DANH SÃCH PHIáº¾U NHáº¬P --- */}
        <li>
          <NavLink to="/imports" title="Danh sÃ¡ch Phiáº¿u Nháº­p">
            <FiClipboard className="nav-icon" />
          </NavLink>
        </li>
        {/* --- THAY Äá»”I: ICON DANH SÃCH PHIáº¾U XUáº¤T --- */}
        <li>
          <NavLink to="/exports" title="Danh sÃ¡ch Phiáº¿u Xuáº¥t">
            <FiFileText className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/stocktakes" title="Kiá»ƒm KÃª Kho">
            <FiCheckSquare className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/lot-trace" title="Truy Váº¿t LÃ´ HÃ ng">
            <FiShare2 className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/test" title="Trang Test">
            <FiTool className="nav-icon" />
          </NavLink>
        </li>
      </ul>
    </nav>
  );
};

export default Navbar;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Sidebar.jsx ---


// src/components/Sidebar.jsx

import React, { useState } from 'react';
// Cáº¬P NHáº¬T: Thay Ä‘á»•i bá»™ icon cho phÃ¹ há»£p
import { FiHome, FiArchive, FiPlusCircle, FiMinusCircle, FiFileText, FiChevronsLeft, FiChevronsRight } from 'react-icons/fi';
import { NavLink } from 'react-router-dom';
import '../styles/AdminLayout.css';

const Sidebar = () => {
  const [collapsed, setCollapsed] = useState(false);

  return (
    <div className={collapsed ? "sidebar collapsed" : "sidebar"}>
      <div className="sidebar-header">
        <h2 className="logo">{collapsed ? "K" : "Kho PT Biomed"}</h2>
        <button className="toggle-btn" onClick={() => setCollapsed(!collapsed)}>
          {collapsed ? <FiChevronsRight /> : <FiChevronsLeft />}
        </button>
      </div>
      <ul className="menu-items">
        <li>
          <NavLink to="/">
            <FiHome className="menu-icon" />
            <span className="menu-text">Báº£ng Ä‘iá»u khiá»ƒn</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/products">
            <FiArchive className="menu-icon" />
            <span className="menu-text">Quáº£n lÃ½ hÃ ng hÃ³a</span>
          </NavLink>
        </li>
        {/* Cáº¬P NHáº¬T: Äá»•i icon thÃ nh FiPlusCircle */}
        <li>
          <NavLink to="/new-import">
            <FiPlusCircle className="menu-icon" />
            <span className="menu-text">Táº¡o Phiáº¿u Nháº­p</span>
          </NavLink>
        </li>
        {/* Cáº¬P NHáº¬T: Äá»•i icon thÃ nh FiMinusCircle */}
        <li>
          <NavLink to="/new-export">
            <FiMinusCircle className="menu-icon" />
            <span className="menu-text">Táº¡o Phiáº¿u Xuáº¥t</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/imports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiáº¿u Nháº­p</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/exports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiáº¿u Xuáº¥t</span>
          </NavLink>
        </li>
      </ul>
    </div>
  );
};

export default Sidebar;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\TeamBadge.jsx ---


// src/components/TeamBadge.jsx
import React from 'react';

const TeamBadge = ({ team }) => {
  let className = 'team-badge';
  switch (team) {
    case 'MED':
      className += ' team-med';
      break;
    case 'BIO':
      className += ' team-bio';
      break;
    case 'Spare Part':
      className += ' team-sparepart';
      break;
    default:
      break;
  }

  return <span className={className}>{team}</span>;
};

export default TeamBadge;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\TempBadge.jsx ---


// src/components/TempBadge.jsx
import React from 'react';

const TempBadge = ({ temperature }) => {
  let className = 'temp-badge';
  const tempString = temperature?.toLowerCase() || '';

  if (tempString.includes('2') && tempString.includes('8')) {
    className += ' temp-cool'; // 2 -> 8Â°C
  } else if (tempString.includes('-15') || tempString.includes('-25')) {
    className += ' temp-frozen'; // -25 -> -15Â°C
  } else if (tempString.includes('phÃ²ng')) {
    className += ' temp-room'; // Nhiá»‡t Ä‘á»™ phÃ²ng
  } else {
    className += ' temp-other'; // CÃ¡c loáº¡i khÃ¡c
  }

  return <span className={className}>{temperature}</span>;
};

export default TempBadge;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewerLayout.jsx ---


// src/components/ViewerLayout.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom'; // <-- THÃŠM IMPORT
import InventoryPage from '../pages/InventoryPage';
import InventorySummaryPage from '../pages/InventorySummaryPage';

const ViewerLayout = ({ user, userRole }) => {
  const canViewDetail = userRole === 'admin' || userRole === 'owner'; // <-- OWNER CÅ¨NG CÃ“ THá»‚ XEM CHI TIáº¾T
  const [viewMode, setViewMode] = useState('summary');
  
  useEffect(() => {
    if (!canViewDetail) {
      setViewMode('summary');
    }
  }, [canViewDetail]);

  return (
    <div style={{ padding: '20px' }}>
      {/* THÃŠM NÃšT QUAY Láº I CHO OWNER */}
      {userRole === 'owner' && (
        <div style={{ marginBottom: '20px' }}>
            <Link to="/" className="btn-secondary" style={{ textDecoration: 'none' }}>
                &larr; Quay láº¡i Trang Quáº£n Trá»‹
            </Link>
        </div>
      )}

      {(canViewDetail) ? (
        <div className="view-toggle" style={{ marginBottom: '20px', display: 'flex', gap: '10px' }}>
          <button 
            onClick={() => setViewMode('summary')}
            className={viewMode === 'summary' ? 'btn-primary' : 'btn-secondary'}
            style={{width: 'auto'}}
          >
            Xem Tá»•ng Há»£p
          </button>
          <button 
            onClick={() => setViewMode('detail')}
            className={viewMode === 'detail' ? 'btn-primary' : 'btn-secondary'}
            style={{width: 'auto'}}
          >
            Xem Chi Tiáº¿t
          </button>
        </div>
      ) : (
        null 
      )}

      {(viewMode === 'detail' && canViewDetail) ?
      (
        <InventoryPage user={user} userRole={userRole} />
      ) : (
        <InventorySummaryPage user={user} userRole={userRole} />
      )}
    </div>
  );
};

export default ViewerLayout;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewExportSlipModal.jsx ---


// src/components/ViewExportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils'; // BÆ¯á»šC 1: Import hÃ m tiá»‡n Ã­ch

const ViewExportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;

    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');

    const handlePrint = () => {
        window.print();
    };
    
    const renderStatusBadge = (status) => {
        let text = status;
        switch (status) {
            case 'pending': text = 'Äang soáº¡n hÃ ng'; break;
            case 'completed': text = 'HoÃ n thÃ nh'; break;
            case 'cancelled': text = 'ÄÃ£ há»§y'; break;
            default: text = status;
        }
        return <span className={`status-badge status-${status}`}>{text}</span>;
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiáº¿t Phiáº¿u Xuáº¥t Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiáº¿u</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>KhÃ¡ch hÃ ng</label><p><strong>{slip.customer}</strong></p></div>
                    <div><label>NgÃ y táº¡o</label>
                        {/* BÆ¯á»šC 2: Sá»­ dá»¥ng hÃ m formatDate */}
                        <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Tráº¡ng thÃ¡i</label><p>{renderStatusBadge(slip.status)}</p></div>
                    <div className="info-description"><label>Diá»…n giáº£i</label><p><em>{slip.description || '(KhÃ´ng cÃ³)'}</em></p></div>
                </div>
                
                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiáº¿t hÃ ng hÃ³a</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    <th>SL xuáº¥t</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    {hasNotes && <th>Ghi chÃº</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        <td>{item.quantityToExport || item.quantityExported}</td>
                                        <td>{item.storageTemp}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiáº¿u</button>
                    <button type="button" onClick={onClose} className="btn-primary">ÄÃ³ng</button>
                </div>
            </div>
        </div>
    );
};

export default ViewExportSlipModal;




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewImportSlipModal.jsx ---


// src/components/ViewImportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils'; // BÆ¯á»šC 1: Import hÃ m tiá»‡n Ã­ch

const ViewImportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;

    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');

    const handlePrint = () => {
        window.print();
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiáº¿t Phiáº¿u Nháº­p Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiáº¿u</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>NhÃ  cung cáº¥p</label><p><strong>{slip.supplier}</strong></p></div>
                    <div><label>NgÃ y táº¡o</label>
                        {/* BÆ¯á»šC 2: Sá»­ dá»¥ng hÃ m formatDate */}
                        <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Tráº¡ng thÃ¡i</label><p><span className={`status-badge status-${slip.status}`}>{slip.status === 'pending' ? 'Äang chá»' : 'HoÃ n thÃ nh'}</span></p></div>
                    <div className="info-description"><label>Diá»…n giáº£i</label><p><em>{slip.description || '(KhÃ´ng cÃ³)'}</em></p></div>
                </div>

                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiáº¿t hÃ ng hÃ³a</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>Sá»‘ lÆ°á»£ng</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    {hasNotes && <th>Ghi chÃº</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.quantity}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiáº¿u</button>
                    <button type="button" onClick={onClose} className="btn-primary">ÄÃ³ng</button>
                </div>
            </div>
        </div>
    );
};

export default ViewImportSlipModal;




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\DashboardPage.jsx ---


// src/pages/DashboardPage.jsx

import React, { useState, useEffect } from 'react';
import { collection, getDocs, query, where, Timestamp } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { FiArchive, FiAlertTriangle, FiFileText } from 'react-icons/fi';
import '../styles/DashboardPage.css'; // File CSS riÃªng cho trang Dashboard

// Component tÃ¡i sá»­ dá»¥ng Ä‘á»ƒ hiá»ƒn thá»‹ cÃ¡c tháº» thÃ´ng sá»‘
const DashboardCard = ({ icon, tieuDe, giaTri, mauSac }) => (
  <div className="dashboard-card" style={{ borderLeftColor: mauSac }}>
    <div className="card-icon" style={{ backgroundColor: mauSac }}>{icon}</div>
    <div className="card-info">
      <div className="card-title">{tieuDe}</div>
      <div className="card-value">{giaTri}</div>
    </div>
  </div>
);

const DashboardPage = () => {
  const [thongKe, setThongKe] = useState({
    tongSanPham: 0,
    sapHetHan: 0,
    phieuChoDuyet: 0,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const layDuLieuDashboard = async () => {
      setLoading(true);
      try {
        // 1. Láº¥y tá»•ng sá»‘ mÃ£ sáº£n pháº©m
        const sanPhamSnapshot = await getDocs(collection(db, 'products'));
        const tongSanPham = sanPhamSnapshot.size;

        // 2. Láº¥y sá»‘ lÃ´ hÃ ng sáº¯p háº¿t háº¡n (trong vÃ²ng 30 ngÃ y tá»›i)
        const baMuoiNgayToi = new Date();
        baMuoiNgayToi.setDate(baMuoiNgayToi.getDate() + 30);
        const qSapHetHan = query(
          collection(db, 'inventory_lots'),
          where('expiryDate', '<=', Timestamp.fromDate(baMuoiNgayToi)),
          where('expiryDate', '>=', Timestamp.now()) // ThÃªm Ä‘iá»u kiá»‡n Ä‘á»ƒ khÃ´ng Ä‘áº¿m hÃ ng Ä‘Ã£ háº¿t háº¡n
        );
        const sapHetHanSnapshot = await getDocs(qSapHetHan);
        const sapHetHan = sapHetHanSnapshot.size;

        // 3. Láº¥y sá»‘ phiáº¿u nháº­p Ä‘ang á»Ÿ tráº¡ng thÃ¡i "chá»"
        const qPhieuCho = query(collection(db, 'import_tickets'), where('status', '==', 'pending'));
        const phieuChoSnapshot = await getDocs(qPhieuCho);
        const phieuChoDuyet = phieuChoSnapshot.size;

        setThongKe({ tongSanPham, sapHetHan, phieuChoDuyet });
      } catch (error) {
        console.error("Lá»—i khi láº¥y dá»¯ liá»‡u dashboard: ", error);
      } finally {
        setLoading(false);
      }
    };

    layDuLieuDashboard();
  }, []);

  if (loading) {
    return <div>Äang táº£i báº£ng Ä‘iá»u khiá»ƒn...</div>;
  }

  return (
    <div className="dashboard-container">
      <h1>Báº£ng Ä‘iá»u khiá»ƒn</h1>
      <div className="cards-grid">
        <DashboardCard
          icon={<FiArchive />}
          tieuDe="Tá»•ng sá»‘ mÃ£ hÃ ng"
          giaTri={thongKe.tongSanPham}
          mauSac="#007bff"
        />
        <DashboardCard
          icon={<FiAlertTriangle />}
          tieuDe="Sáº¯p háº¿t háº¡n (30 ngÃ y)"
          giaTri={thongKe.sapHetHan}
          mauSac="#ffc107"
        />
        <DashboardCard
          icon={<FiFileText />}
          tieuDe="Phiáº¿u chá» duyá»‡t"
          giaTri={thongKe.phieuChoDuyet}
          mauSac="#6c757d"
        />
      </div>
    </div>
  );
};

export default DashboardPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\ExportListPage.jsx ---


// src/pages/ExportListPage.jsx
import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, getDocs, query, orderBy, doc, updateDoc, getDoc } from 'firebase/firestore';
import ViewExportSlipModal from '../components/ViewExportSlipModal';
import EditExportSlipModal from '../components/EditExportSlipModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { FiCheckCircle, FiXCircle, FiEdit, FiEye } from 'react-icons/fi';
import { toast } from 'react-toastify';

const ExportListPage = () => {
  const [exportSlips, setExportSlips] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedSlip, setSelectedSlip] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, data: null, title: '', message: '', onConfirm: null, confirmText: 'XÃ¡c nháº­n' });

  const fetchExportSlips = async () => {
    setLoading(true);
    try {
      const q = query(collection(db, "export_tickets"), orderBy("createdAt", "desc"));
      const querySnapshot = await getDocs(q);
      const slipsList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setExportSlips(slipsList);
    } catch (error) {
      console.error("Lá»—i khi láº¥y danh sÃ¡ch phiáº¿u xuáº¥t: ", error);
      toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch phiáº¿u xuáº¥t.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchExportSlips();
  }, []);

  const handleConfirmExport = async (slip) => {
    try {
      for (const item of slip.items) {
        const lotRef = doc(db, 'inventory_lots', item.lotId);
        const lotSnap = await getDoc(lotRef);
        if (lotSnap.exists()) {
          const currentQuantity = lotSnap.data().quantityRemaining;
          const newQuantityRemaining = currentQuantity - (item.quantityToExport || item.quantityExported);
          if (newQuantityRemaining < 0) {
            toast.error(`Lá»—i: Tá»“n kho cá»§a lÃ´ ${item.lotNumber} khÃ´ng Ä‘á»§ Ä‘á»ƒ xuáº¥t.`);
            return;
          }
          await updateDoc(lotRef, { quantityRemaining: newQuantityRemaining });
        }
      }
      const slipRef = doc(db, 'export_tickets', slip.id);
      await updateDoc(slipRef, { status: 'completed' });
      toast.success('XÃ¡c nháº­n xuáº¥t kho thÃ nh cÃ´ng!');
      fetchExportSlips();
    } catch (error) {
      console.error("Lá»—i khi xÃ¡c nháº­n xuáº¥t kho: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ¡c nháº­n.');
    } finally {
        setConfirmModal({ isOpen: false });
    }
  };

  const handleCancelSlip = async (slip) => {
    try {
      const slipRef = doc(db, 'export_tickets', slip.id);
      await updateDoc(slipRef, { status: 'cancelled' });
      toast.success('Há»§y phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
      fetchExportSlips();
    } catch (error) {
      console.error("Lá»—i khi há»§y phiáº¿u: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi há»§y phiáº¿u.');
    } finally {
        setConfirmModal({ isOpen: false });
    }
  };

  const promptAction = (action, slip) => {
    if (action === 'confirm') {
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xuáº¥t kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n xuáº¥t kho cho phiáº¿u cá»§a khÃ¡ch hÃ ng "${slip.customer}" khÃ´ng?`,
            onConfirm: () => handleConfirmExport(slip),
            confirmText: "XÃ¡c nháº­n"
        });
    } else if (action === 'cancel') {
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n há»§y phiáº¿u?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n Há»¦Y phiáº¿u xuáº¥t cá»§a khÃ¡ch hÃ ng "${slip.customer}" khÃ´ng? Thao tÃ¡c nÃ y sáº½ khÃ´ng trá»« tá»“n kho.`,
            onConfirm: () => handleCancelSlip(slip),
            confirmText: "Äá»“ng Ã½ há»§y"
        });
    }
  };

  const openViewModal = (slip) => {
    setSelectedSlip(slip);
    setIsViewModalOpen(true);
  };
  
  const openEditModal = (slip) => {
    setSelectedSlip(slip);
    setIsEditModalOpen(true);
  };
  
  const handleSaveSlipChanges = async (updatedSlip) => {
    try {
      const slipDocRef = doc(db, "export_tickets", updatedSlip.id);
      await updateDoc(slipDocRef, { 
          items: updatedSlip.items,
          customer: updatedSlip.customer,
          description: updatedSlip.description
      });
      setIsEditModalOpen(false);
      fetchExportSlips();
      toast.success('Cáº­p nháº­t phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t phiáº¿u xuáº¥t: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
    }
  };

  const renderStatusBadge = (status) => {
     let text = status;
    switch (status) {
        case 'pending': text = 'Äang soáº¡n hÃ ng'; break;
        case 'completed': text = 'HoÃ n thÃ nh'; break;
        case 'cancelled': text = 'ÄÃ£ há»§y'; break;
        default: text = status;
    }
    return <span className={`status-badge status-${status}`}>{text}</span>;
  };

  if (loading) {
    return <div>Äang táº£i danh sÃ¡ch phiáº¿u xuáº¥t...</div>;
  }

  return (
    <div>
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={confirmModal.onConfirm}
        onCancel={() => setConfirmModal({ isOpen: false })}
        confirmText={confirmModal.confirmText}
      />
      {isEditModalOpen && (
        <EditExportSlipModal 
            slip={selectedSlip}
            onClose={() => setIsEditModalOpen(false)}
            onSave={handleSaveSlipChanges}
        />
      )}
      {isViewModalOpen && (
         <ViewExportSlipModal 
            slip={selectedSlip}
            onClose={() => setIsViewModalOpen(false)}
        />
      )}
      
      <div className="page-header">
        <h1>Danh sÃ¡ch Phiáº¿u Xuáº¥t Kho</h1>
      </div>
      <table className="products-table">
        <thead>
          <tr>
            <th>NgÃ y táº¡o</th>
            <th>KhÃ¡ch hÃ ng / NÆ¡i nháº­n</th>
            <th>Diá»…n giáº£i</th>
            <th>Tráº¡ng thÃ¡i</th>
            <th>Thao tÃ¡c</th>
          </tr>
        </thead>
        <tbody>
          {exportSlips.length > 0 ? (
            exportSlips.map(slip => (
              <tr key={slip.id}>
                <td>{slip.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
                <td>{slip.customer}</td>
                <td>{slip.description}</td>
                <td>{renderStatusBadge(slip.status)}</td>
                <td>
                  <div className="action-buttons">
                    <button className="btn-icon btn-view" title="Xem chi tiáº¿t" onClick={() => openViewModal(slip)}>
                        <FiEye />
                    </button>
                    {slip.status === 'pending' && (
                      <>
                        <button className="btn-icon btn-confirm" title="XÃ¡c nháº­n xuáº¥t kho" onClick={() => promptAction('confirm', slip)}>
                            <FiCheckCircle />
                        </button>
                        <button className="btn-icon btn-edit" title="Sá»­a phiáº¿u" onClick={() => openEditModal(slip)}>
                            <FiEdit />
                        </button>
                        <button className="btn-icon btn-delete" title="Há»§y phiáº¿u" onClick={() => promptAction('cancel', slip)}>
                            <FiXCircle />
                        </button>
                      </>
                    )}
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" style={{ textAlign: 'center' }}>ChÆ°a cÃ³ phiáº¿u xuáº¥t kho nÃ o.</td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default ExportListPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\ImportListPage.jsx ---


// src/pages/ImportListPage.jsx
import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, getDocs, query, orderBy, doc, updateDoc, addDoc, Timestamp } from 'firebase/firestore';
import EditImportSlipModal from '../components/EditImportSlipModal';
import ViewImportSlipModal from '../components/ViewImportSlipModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { FiEdit, FiEye } from 'react-icons/fi';
import { parseDateString } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const ImportListPage = () => {
  const [importSlips, setImportSlips] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedSlip, setSelectedSlip] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });

  const fetchImportSlips = async () => {
    setLoading(true);
    try {
      const q = query(collection(db, "import_tickets"), orderBy("createdAt", "desc"));
      const querySnapshot = await getDocs(q);
      const slipsList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setImportSlips(slipsList);
    } catch (error) {
      console.error("Lá»—i khi láº¥y danh sÃ¡ch phiáº¿u nháº­p: ", error);
      toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch phiáº¿u nháº­p.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchImportSlips();
  }, []);

  const handleConfirmImport = async () => {
    const slip = confirmModal.item;
    if (!slip) return;

    try {
      for (const item of slip.items) {
        const expiryDateObject = parseDateString(item.expiryDate);
        if (!expiryDateObject) {
            toast.error(`HSD cá»§a máº·t hÃ ng ${item.productName} (${item.lotNumber}) cÃ³ Ä‘á»‹nh dáº¡ng sai. Vui lÃ²ng sá»­a láº¡i.`);
            setConfirmModal({ isOpen: false, item: null });
            return;
        }
        const expiryTimestamp = Timestamp.fromDate(expiryDateObject);
        const newLotData = {
          importDate: Timestamp.now(),
          productId: item.productId,
          productName: item.productName,
          lotNumber: item.lotNumber,
          expiryDate: expiryTimestamp,
          unit: item.unit,
          packaging: item.packaging,
          storageTemp: item.storageTemp,
          team: item.team,
          manufacturer: item.manufacturer,
          quantityImported: Number(item.quantity),
          quantityRemaining: Number(item.quantity),
          notes: item.notes,
          supplier: slip.supplier,
        };
        await addDoc(collection(db, "inventory_lots"), newLotData);
      }
      const slipDocRef = doc(db, "import_tickets", slip.id);
      await updateDoc(slipDocRef, { status: "completed" });
      toast.success('XÃ¡c nháº­n nháº­p kho thÃ nh cÃ´ng!');
      fetchImportSlips();
    } catch (error) {
      console.error("Lá»—i khi xÃ¡c nháº­n nháº­p kho: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ¡c nháº­n nháº­p kho.');
    } finally {
        setConfirmModal({ isOpen: false, item: null });
    }
  };

  const promptForConfirm = (slip) => {
    setConfirmModal({
        isOpen: true,
        item: slip,
        title: "XÃ¡c nháº­n nháº­p kho?",
        message: `Báº¡n cÃ³ cháº¯c muá»‘n xÃ¡c nháº­n vÃ  Ä‘Æ°a hÃ ng trong phiáº¿u cá»§a NCC "${slip.supplier}" vÃ o kho khÃ´ng? Thao tÃ¡c nÃ y sáº½ cáº­p nháº­t tá»“n kho.`,
    });
  };

  const openEditModal = (slip) => {
    setSelectedSlip(slip);
    setIsEditModalOpen(true);
  };

  const openViewModal = (slip) => {
    setSelectedSlip(slip);
    setIsViewModalOpen(true);
  };

  const handleSaveSlipChanges = async (updatedSlip) => {
    try {
      const slipDocRef = doc(db, "import_tickets", updatedSlip.id);
      await updateDoc(slipDocRef, { items: updatedSlip.items });
      setIsEditModalOpen(false);
      fetchImportSlips();
      toast.success('Cáº­p nháº­t phiáº¿u nháº­p thÃ nh cÃ´ng!');
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t phiáº¿u nháº­p: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
    }
  };

  if (loading) {
    return <div>Äang táº£i danh sÃ¡ch phiáº¿u nháº­p...</div>;
  }

  return (
    <div>
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={handleConfirmImport}
        onCancel={() => setConfirmModal({ isOpen: false, item: null })}
        confirmText="XÃ¡c nháº­n"
      />
      {isViewModalOpen && (
        <ViewImportSlipModal 
          slip={selectedSlip} 
          onClose={() => setIsViewModalOpen(false)}
        />
      )}
      {isEditModalOpen && (
        <EditImportSlipModal 
          slip={selectedSlip} 
          onClose={() => setIsEditModalOpen(false)}
          onSave={handleSaveSlipChanges}
        />
      )}
      <div className="page-header">
        <h1>Danh sÃ¡ch Phiáº¿u Nháº­p Kho</h1>
      </div>
      <table className="products-table">
        <thead>
          <tr>
            <th>NgÃ y táº¡o</th>
            <th>NhÃ  cung cáº¥p</th>
            <th>Diá»…n giáº£i</th>
            <th>Tráº¡ng thÃ¡i</th>
            <th>Thao tÃ¡c</th>
          </tr>
        </thead>
        <tbody>
          {importSlips.map(slip => (
            <tr key={slip.id}>
              <td>{slip.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
              <td>{slip.supplier}</td>
              <td>{slip.description}</td>
              <td>
                <span className={`status-badge status-${slip.status}`}>
                  {slip.status === 'pending' ? 'Äang chá»' : 'HoÃ n thÃ nh'}
                </span>
              </td>
              <td>
                <div className="action-buttons">
                  <button className="btn-icon btn-view" title="Xem chi tiáº¿t" onClick={() => openViewModal(slip)}>
                    <FiEye />
                  </button>
                  {slip.status === 'pending' && (
                    <>
                      <button className="btn-icon btn-edit" title="Sá»­a phiáº¿u" onClick={() => openEditModal(slip)}>
                        <FiEdit />
                      </button>
                      <button className="btn-primary" onClick={() => promptForConfirm(slip)}>
                        XÃ¡c nháº­n
                      </button>
                    </>
                  )}
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ImportListPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\InventoryPage.jsx ---


// src/pages/InventoryPage.jsx
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, getDocs, where } from 'firebase/firestore'; // Bá» onSnapshot
import InventoryFilters from '../components/InventoryFilters';
import TeamBadge from '../components/TeamBadge';
import TempBadge from '../components/TempBadge';
import { formatDate } from '../utils/dateUtils';

const getRowColorByExpiry = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    expDate.setHours(0, 0, 0, 0);
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 0) return 'expired-black';
    if (diffDays <= 60) return 'near-expiry-red';
    if (diffDays <= 90) return 'near-expiry-orange';
    if (diffDays <= 120) return 'near-expiry-yellow';
    return '';
};

const InventoryPage = ({ user, userRole }) => {
    const [masterInventory, setMasterInventory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({ team: 'all', dateStatus: 'all' });
    const [selectedRowId, setSelectedRowId] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');

    // --- XÃ“A Bá»Ž: State cho tÃ¬m kiáº¿m real-time ---
    // const [searchResults, setSearchResults] = useState([]);
    // const [isSearching, setIsSearching] = useState(false);

    const fetchMasterInventory = useCallback(async () => {
        if (masterInventory.length === 0) setLoading(true);
        try {
            let q;
            const lotsCollection = collection(db, "inventory_lots");
            
            if (userRole === 'med') {
                q = query(lotsCollection, where("team", "==", "MED"));
            } else if (userRole === 'bio') {
                q = query(lotsCollection, where("team", "in", ["BIO", "Spare Part"]));
            } else {
                q = query(lotsCollection);
            }

            const querySnapshot = await getDocs(q);
            const inventoryList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setMasterInventory(inventoryList);
        } catch (error) {
            console.error("Lá»—i khi láº¥y dá»¯ liá»‡u tá»“n kho: ", error);
        } finally {
            setLoading(false);
        }
    }, [userRole, masterInventory.length]);

    useEffect(() => {
        if (userRole) {
            fetchMasterInventory();
        }
        const intervalId = setInterval(() => {
            fetchMasterInventory();
        }, 900000);
        return () => clearInterval(intervalId);
    }, [userRole, fetchMasterInventory]);

    // --- XÃ“A Bá»Ž: useEffect cho tÃ¬m kiáº¿m real-time ---

    const displayedInventory = useMemo(() => {
        let filteredResult = [...masterInventory];

        // --- THAY Äá»”I: Sáº¯p xáº¿p láº¡i vÃ  thá»‘ng nháº¥t logic lá»c/tÃ¬m kiáº¿m ---
        // 1. Lá»c theo cÃ¡c nÃºt báº¥m (team, date status)
        if (filters.team !== 'all') {
            filteredResult = filteredResult.filter(item => item.team === filters.team);
        }
        if (filters.dateStatus !== 'all') {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (filters.dateStatus === 'expired') {
                filteredResult = filteredResult.filter(item => item.expiryDate?.toDate() < today);
            }
            if (filters.dateStatus === 'near_expiry') {
                const nearExpiryLimit = new Date();
                nearExpiryLimit.setDate(today.getDate() + 120);
                filteredResult = filteredResult.filter(item => {
                    const expiryDate = item.expiryDate?.toDate();
                    return expiryDate >= today && expiryDate < nearExpiryLimit;
                });
            }
        }
        
        // 2. Sau Ä‘Ã³, lá»c tiáº¿p theo tá»« khÃ³a tÃ¬m kiáº¿m trÃªn káº¿t quáº£ Ä‘Ã£ cÃ³
        if (searchTerm) {
            const lowercasedFilter = searchTerm.toLowerCase();
            filteredResult = filteredResult.filter(item =>
                item.productId?.toLowerCase().includes(lowercasedFilter) ||
                item.productName?.toLowerCase().includes(lowercasedFilter) ||
                item.lotNumber?.toLowerCase().includes(lowercasedFilter)
            );
        }

        // 3. Cuá»‘i cÃ¹ng, sáº¯p xáº¿p káº¿t quáº£
        filteredResult.sort((a, b) => {
            const productCompare = a.productId.localeCompare(b.productId);
            if (productCompare !== 0) {
                return productCompare;
            }
            const dateA = a.importDate?.toDate() || 0;
            const dateB = b.importDate?.toDate() || 0;
            return dateA - dateB;
        });

        return filteredResult;
    }, [masterInventory, filters, searchTerm]); // Cáº­p nháº­t dependencies


    const handleFilterChange = (filterName, value) => {
        setFilters(prev => ({ ...prev, [filterName]: value }));
    };

    const handleRowClick = (lotId) => {
        setSelectedRowId(prevId => (prevId === lotId ? null : lotId));
    };
    
    const getTitleByRole = (role) => {
        switch (role) {
            case 'med': return 'Sá»• CÃ¡i Tá»“n Kho (Team Med)';
            case 'bio': return 'Sá»• CÃ¡i Tá»“n Kho (Team Bio)';
            case 'admin': return 'Sá»• CÃ¡i Tá»“n Kho (Admin)';
            case 'owner': return 'Sá»• CÃ¡i Tá»“n Kho (Owner)';
            default: return 'Sá»• CÃ¡i Tá»“n Kho';
        }
    };
    
    return (
        <div>
            <div className="page-header">
                <h1>PT Biomed - Kho</h1>
            </div>
            
            <div className="controls-container">
                <InventoryFilters 
                    userRole={userRole} 
                    onFilterChange={handleFilterChange} 
                    activeFilters={filters}
                />
                <div className="search-container">
                    <input
                        type="text"
                        placeholder="TÃ¬m MÃ£ hÃ ng, TÃªn hÃ ng, Sá»‘ lÃ´..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
            </div>

            <div className="table-container">
                 {loading && displayedInventory.length === 0 ? (
                    <div style={{ textAlign: 'center', padding: '20px' }}>Äang táº£i dá»¯ liá»‡u...</div>
                ) : (
                    <table className="inventory-table">
                        <thead>
                            <tr>
                                <th>NgÃ y nháº­p hÃ ng</th>
                                <th>MÃ£ hÃ ng</th>
                                <th>TÃªn hÃ ng</th>
                                <th>Sá»‘ lÃ´</th>
                                <th>HSD</th>
                                <th>ÄVT</th>
                                <th>Quy cÃ¡ch</th>
                                <th>SL Nháº­p</th>
                                <th>SL CÃ²n láº¡i</th>
                                <th>Ghi chÃº</th>
                                <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                <th>HÃ£ng SX</th>
                                <th>Team</th>
                            </tr>
                        </thead>
                        <tbody className="inventory-table-body">
                            {displayedInventory.length > 0 ? (
                                displayedInventory.map(lot => (
                                    <tr
                                        key={lot.id}
                                        onClick={() => handleRowClick(lot.id)}
                                        className={`${selectedRowId === lot.id ? 'selected-row' : ''} ${getRowColorByExpiry(lot.expiryDate)}`}
                                    >
                                        <td data-label="NgÃ y nháº­p">{formatDate(lot.importDate)}</td>
                                        <td data-label="MÃ£ hÃ ng">{lot.productId}</td>
                                        <td data-label="TÃªn hÃ ng">{lot.productName}</td>
                                        <td data-label="Sá»‘ lÃ´">{lot.lotNumber}</td>
                                        <td data-label="HSD">{formatDate(lot.expiryDate)}</td>
                                        <td data-label="ÄVT">{lot.unit}</td>
                                        <td data-label="Quy cÃ¡ch">{lot.packaging}</td>
                                        <td data-label="SL Nháº­p">{lot.quantityImported}</td>
                                        <td data-label="SL CÃ²n láº¡i">{lot.quantityRemaining}</td>
                                        <td data-label="Ghi chÃº">{lot.notes}</td>
                                        <td data-label="Nhiá»‡t Ä‘á»™ BQ"><TempBadge temperature={lot.storageTemp} /></td>
                                        <td data-label="HÃ£ng SX">{lot.manufacturer}</td>
                                        <td data-label="Team"><TeamBadge team={lot.team} /></td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="13" style={{ textAlign: 'center' }}>
                                        {/* Cáº­p nháº­t láº¡i thÃ´ng bÃ¡o khi khÃ´ng cÃ³ káº¿t quáº£ */}
                                        KhÃ´ng cÃ³ dá»¯ liá»‡u tá»“n kho phÃ¹ há»£p vá»›i bá»™ lá»c hoáº·c tá»« khÃ³a tÃ¬m kiáº¿m.
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                )}
            </div>
        </div>
    );
};
export default InventoryPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\InventorySummaryPage.jsx ---


// src/pages/InventorySummaryPage.jsx
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, getDocs, where } from 'firebase/firestore';
import { formatDate } from '../utils/dateUtils';
import TeamBadge from '../components/TeamBadge';
import TempBadge from '../components/TempBadge';
import { FiChevronDown, FiChevronRight } from 'react-icons/fi';

const getSummaryRowColor = (lots) => {
    if (!lots || lots.length === 0) return '';
    let nearestExpiryDays = Infinity;
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    for (const lot of lots) {
        if (lot.expiryDate && lot.expiryDate.toDate) {
            const expDate = lot.expiryDate.toDate();
            expDate.setHours(0, 0, 0, 0);
            const diffTime = expDate.getTime() - today.getTime();
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            if (diffDays < nearestExpiryDays) {
                nearestExpiryDays = diffDays;
            }
        }
    }
    if (nearestExpiryDays === Infinity) return '';
    if (nearestExpiryDays < 0) return 'expired-black';
    if (nearestExpiryDays <= 60) return 'near-expiry-red';
    if (nearestExpiryDays <= 90) return 'near-expiry-orange';
    if (nearestExpiryDays <= 120) return 'near-expiry-yellow';
    return '';
};
const getLotItemColorClass = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    expDate.setHours(0, 0, 0, 0);
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'lot-item-expired';
    if (diffDays <= 60) return 'lot-item-red';
    if (diffDays <= 90) return 'lot-item-orange';
    if (diffDays <= 120) return 'lot-item-yellow';
    return '';
};

const InventorySummaryPage = ({ user, userRole }) => {
    const [productsMap, setProductsMap] = useState({});
    const [masterInventory, setMasterInventory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [expandedRows, setExpandedRows] = useState({});
    const [filters, setFilters] = useState({ team: 'all', dateStatus: 'all' });

    const fetchAllData = useCallback(async () => {
        if (masterInventory.length === 0) setLoading(true);
        try {
            const productsSnapshot = await getDocs(collection(db, "products"));
            const productsData = {};
            productsSnapshot.forEach(doc => { productsData[doc.id] = doc.data(); });
            setProductsMap(productsData);

            let lotsQuery;
            const lotsCollection = collection(db, "inventory_lots");

            if (userRole === 'med') {
                lotsQuery = query(lotsCollection, where("team", "==", "MED"));
            } else if (userRole === 'bio') {
                lotsQuery = query(lotsCollection, where("team", "in", ["BIO", "Spare Part"]));
            } else { // admin, owner
                lotsQuery = query(lotsCollection);
            }
            
            const lotsSnapshot = await getDocs(lotsQuery);
            const visibleInventory = lotsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setMasterInventory(visibleInventory);
        } catch (error) {
            console.error("Lá»—i khi láº¥y dá»¯ liá»‡u: ", error);
        } finally {
            setLoading(false);
        }
    }, [userRole, masterInventory.length]);

    useEffect(() => {
        if (userRole) {
            fetchAllData();
        }
        const intervalId = setInterval(() => {
            fetchAllData();
        }, 900000);

        return () => clearInterval(intervalId);
    }, [userRole, fetchAllData]);

    const handleFilterChange = (filterName, value) => {
        setFilters(prev => {
            const currentFilterValue = prev[filterName];
            if (currentFilterValue === value) {
                return { ...prev, [filterName]: 'all' };
            }
            return { ...prev, [filterName]: value };
        });
    };

    const summarizedAndFilteredInventory = useMemo(() => {
        let summary = masterInventory.reduce((acc, lot) => {
            if (lot.quantityRemaining > 0) {
                if (!acc[lot.productId]) {
                    const productInfo = productsMap[lot.productId] || {};
                    acc[lot.productId] = {
                        productId: lot.productId, productName: productInfo.productName || lot.productName,
                        unit: productInfo.unit, packaging: productInfo.packaging,
                        storageTemp: productInfo.storageTemp, manufacturer: productInfo.manufacturer,
                        team: productInfo.team || lot.team,
                        totalRemaining: 0, lots: []
                    };
                }
                acc[lot.productId].totalRemaining += lot.quantityRemaining;
                acc[lot.productId].lots.push({
                    lotId: lot.id, lotNumber: lot.lotNumber,
                    expiryDate: lot.expiryDate, quantityRemaining: lot.quantityRemaining
                });
            }
            return acc;
        }, {});

        let summaryArray = Object.values(summary);

        if (filters.team !== 'all') {
            summaryArray = summaryArray.filter(item => item.team === filters.team);
        }

        if (filters.dateStatus !== 'all') {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            if (filters.dateStatus === 'expired') {
                summaryArray = summaryArray.filter(product => 
                    product.lots.some(lot => lot.expiryDate?.toDate() < today)
                );
            }
            if (filters.dateStatus === 'near_expiry') {
                const nearExpiryLimit = new Date();
                nearExpiryLimit.setDate(today.getDate() + 120);
                summaryArray = summaryArray.filter(product => 
                    product.lots.some(lot => {
                        const expiryDate = lot.expiryDate?.toDate();
                        return expiryDate >= today && expiryDate < nearExpiryLimit;
                    })
                );
            }
        }

        summaryArray.forEach(product => {
            product.rowColorClass = getSummaryRowColor(product.lots);
            product.lots.sort((a, b) => (a.expiryDate?.toDate() || 0) - (b.expiryDate?.toDate() || 0));
        });

        if (searchTerm) {
            const lowercasedFilter = searchTerm.toLowerCase();
            return summaryArray.filter(item => 
                item.productId.toLowerCase().includes(lowercasedFilter) ||
                (item.productName && item.productName.toLowerCase().includes(lowercasedFilter))
            );
        }

        return summaryArray.sort((a, b) => a.productId.localeCompare(b.productId));
    }, [masterInventory, productsMap, searchTerm, filters]);

    const toggleRow = (productId) => {
        setExpandedRows(prev => ({ ...prev, [productId]: !prev[productId] }));
    };
    
    if (loading) return <div>Äang táº£i dá»¯ liá»‡u tá»“n kho...</div>;

    const getSummaryTitleByRole = (role) => {
    switch (role) {
        case 'med':
            return 'PT Biomed - Team MED';
        case 'bio':
            return 'PT Biomed - Team BIO';
        case 'admin':
            return 'PT Biomed - Kho';
        case 'owner':
            return 'PT Biomed - Inventory'; // ThÃªm cho vai trÃ² Owner
        default:
            return 'PT Biomed - Tá»“n Kho Tá»•ng Há»£p';
    }
};

    return (
        <div>
            <div className="page-header">
    <h1>{getSummaryTitleByRole(userRole)}</h1>
</div>
            <div className="filters-container" style={{ padding: '15px', marginBottom: '20px', justifyContent: 'flex-start' }}>
                <div className="filter-group">
                    {(userRole === 'admin' || userRole === 'owner') && (
                        <>
                            <button
                                className={filters.team === 'MED' ? 'active' : ''}
                                onClick={() => handleFilterChange('team', 'MED')}
                            >
                                Lá»c hÃ ng MED
                            </button>
                            <button
                                className={filters.team === 'BIO' ? 'active' : ''}
                                onClick={() => handleFilterChange('team', 'BIO')}
                            >
                                Lá»c hÃ ng BIO
                            </button>
                        </>
                    )}
                    
                    {(userRole === 'admin' || userRole === 'owner' || userRole === 'bio') && (
                        <button
                            className={filters.team === 'Spare Part' ? 'active' : ''}
                            onClick={() => handleFilterChange('team', 'Spare Part')}
                        >
                            Lá»c hÃ ng Spare Part
                        </button>
                    )}
                </div>
                <div className="filter-group">
                    <button
                        className={filters.dateStatus === 'near_expiry' ? 'active' : ''}
                        onClick={() => handleFilterChange('dateStatus', 'near_expiry')}
                    >
                        Lá»c hÃ ng cáº­n date (&lt;120 ngÃ y)
                    </button>
                    <button
                        className={filters.dateStatus === 'expired' ? 'active' : ''}
                        onClick={() => handleFilterChange('dateStatus', 'expired')}
                    >
                        Lá»c hÃ ng Ä‘Ã£ háº¿t HSD
                    </button>
                </div>
            </div>

            <div className="search-container" style={{maxWidth: '500px', marginBottom: '20px'}}>
                <input
                    type="text"
                    placeholder="TÃ¬m theo MÃ£ hoáº·c TÃªn hÃ ng..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="search-input"
                />
            </div>

            <div className="table-container" style={{maxHeight: 'calc(100vh - 240px)'}}>
                <table className="products-table">
                    <thead>
                        <tr>
                            <th style={{width: '50px'}}></th>
                            <th>MÃ£ hÃ ng</th>
                            <th>TÃªn hÃ ng</th>
                            <th>Tá»•ng Tá»“n</th>
                            <th>ÄVT</th>
                            <th>Quy cÃ¡ch</th>
                            <th>Nhiá»‡t Ä‘á»™ BQ</th>
                            <th>HÃ£ng SX</th>
                            <th>Team</th>
                        </tr>
                    </thead>
                    <tbody>
                        {summarizedAndFilteredInventory.length > 0 ? (
                            summarizedAndFilteredInventory.map(product => (
                                <React.Fragment key={product.productId}>
                                    <tr 
                                        onClick={() => toggleRow(product.productId)} 
                                        className={product.rowColorClass}
                                        style={{cursor: 'pointer'}}
                                    >
                                        <td data-label="Chi tiáº¿t">{expandedRows[product.productId] ? <FiChevronDown /> : <FiChevronRight />}</td>
                                        <td data-label="MÃ£ hÃ ng"><strong>{product.productId}</strong></td>
                                        <td data-label="TÃªn hÃ ng" style={{textAlign: 'left', whiteSpace: 'normal'}}>{product.productName}</td>
                                        <td data-label="Tá»•ng Tá»“n"><strong>{product.totalRemaining}</strong></td>
                                        <td data-label="ÄVT">{product.unit}</td>
                                        <td data-label="Quy cÃ¡ch" style={{whiteSpace: 'normal'}}>{product.packaging}</td>
                                        <td data-label="Nhiá»‡t Ä‘á»™ BQ"><TempBadge temperature={product.storageTemp} /></td>
                                        <td data-label="HÃ£ng SX">{product.manufacturer}</td>
                                        <td data-label="Team"><TeamBadge team={product.team} /></td>
                                    </tr>
                                    {expandedRows[product.productId] && (
                                        <tr className="lot-details-row">
                                            <td colSpan="9">
                                                <div className="lot-details-container">
                                                    <h4>Chi tiáº¿t cÃ¡c lÃ´ hÃ ng (FEFO):</h4>
                                                    <ul>
                                                        {product.lots.map(lot => (
                                                            <li key={lot.lotId} className={`lot-item ${getLotItemColorClass(lot.expiryDate)}`}>
                                                                <span>LÃ´: <strong>{lot.lotNumber}</strong></span>
                                                                <span>HSD: <strong>{formatDate(lot.expiryDate)}</strong></span>
                                                                <span>Tá»“n: <strong>{lot.quantityRemaining}</strong></span>
                                                            </li>
                                                        ))}
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    )}
                                </React.Fragment>
                            ))
                        ) : (
                            <tr><td colSpan="9" style={{textAlign: 'center'}}>KhÃ´ng cÃ³ hÃ ng hÃ³a tá»“n kho phÃ¹ há»£p vá»›i bá»™ lá»c.</td></tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default InventorySummaryPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\LotTracePage.jsx ---


// src/pages/LotTracePage.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import {
  collection,
  query,
  where,
  getDocs,
  orderBy,
} from 'firebase/firestore';
import LotJourneyExplorer from '../components/LotJourneyExplorer';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const LotTracePage = () => {
  const [lotNumber, setLotNumber] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [importRecords, setImportRecords] = useState([]);
  const [exportHistory, setExportHistory] = useState([]);
  const [searchAttempted, setSearchAttempted] = useState(false);
  const [selectedNode, setSelectedNode] = useState(null);

  const handleTrace = async () => {
    if (!lotNumber) {
      toast.warn('Vui lÃ²ng nháº­p sá»‘ lÃ´ cáº§n truy váº¿t.');
      return;
    }
    setIsLoading(true);
    setImportRecords([]);
    setExportHistory([]);
    setSearchAttempted(true);
    setSelectedNode(null);
    try {
      const lotQuery = query(
        collection(db, 'inventory_lots'),
        where('lotNumber', '==', lotNumber.trim()),
        orderBy('importDate', 'asc'),
      );
      const lotSnapshot = await getDocs(lotQuery);

      if (lotSnapshot.empty) {
        setIsLoading(false);
        return;
      }

      const foundImports = lotSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setImportRecords(foundImports);

      const history = [];
      const exportsQuery = query(
        collection(db, 'export_tickets'),
        orderBy('createdAt', 'asc'),
      );
      const exportsSnapshot = await getDocs(exportsQuery);

      exportsSnapshot.forEach((doc) => {
        const ticket = doc.data();
        const exportedItem = ticket.items.find(
          (item) => item.lotNumber === lotNumber.trim(),
        );
        if (exportedItem) {
          history.push({
            ticketId: doc.id,
            exportDate: ticket.createdAt,
            customer: ticket.customer,
            quantityExported: exportedItem.quantityToExport || exportedItem.quantityExported || 0,
          });
        }
      });
      setExportHistory(history);
    } catch (error) {
      console.error('Lá»—i khi truy váº¿t lÃ´ hÃ ng: ', error);
      toast.error('ÄÃ£ cÃ³ lá»—i xáº£y ra khi truy váº¿t.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleNodeClick = (event, node) => {
    setSelectedNode(node.data);
  };
  
  const handlePaneClick = () => {
    setSelectedNode(null);
  };
  
  const filteredExportHistory = selectedNode && selectedNode.type === 'customer'
    ? exportHistory.filter(item => item.customer === selectedNode.name)
    : exportHistory;

  const masterInfo = importRecords.length > 0 ? importRecords[0] : null;
  
  const totalImported = importRecords.reduce(
    (sum, record) => sum + record.quantityImported,
    0,
  );
  
  const totalRemaining = importRecords.reduce(
    (sum, record) => sum + record.quantityRemaining,
    0,
  );
  
  return (
    <div>
      <div className="page-header">
        <h1>Truy Váº¿t LÃ´ HÃ ng</h1>
      </div>

      <div className="form-section">
        <div className="form-group">
          <label>Nháº­p Sá»‘ LÃ´ Cáº§n Truy Váº¿t</label>
          <div style={{ display: 'flex', gap: '10px' }}>
            <input
              type="text"
              value={lotNumber}
              onChange={(e) => setLotNumber(e.target.value)}
              placeholder="VÃ­ dá»¥: 4523468"
              onKeyDown={(e) => e.key === 'Enter' && handleTrace()}
              style={{ flexGrow: 1 }}
            />
            <button
              onClick={handleTrace}
              className="btn-primary"
              disabled={isLoading}
              style={{ width: 'auto' }}
            >
              {isLoading ? 'Äang tÃ¬m...' : 'Truy váº¿t'}
            </button>
          </div>
        </div>
      </div>

      {isLoading && <p>Äang táº£i dá»¯ liá»‡u...</p>}

      {!isLoading && searchAttempted && importRecords.length === 0 && (
        <div className="form-section">
          <h4>KhÃ´ng tÃ¬m tháº¥y thÃ´ng tin cho sá»‘ lÃ´ "{lotNumber}"</h4>
        </div>
      )}

      {!isLoading && importRecords.length > 0 && (
        <div>
          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>HÃ nh TrÃ¬nh LÃ´ HÃ ng: {masterInfo.lotNumber}</h3>
            <LotJourneyExplorer
              importRecords={importRecords}
              exportHistory={exportHistory}
              onNodeClick={handleNodeClick}
              onPaneClick={handlePaneClick}
            />
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>ThÃ´ng Tin Chung & TÃ³m Táº¯t</h3>
            <div className="compact-info-grid" style={{ gridTemplateColumns: '1fr 1fr 1fr' }}>
              <div><label>MÃ£ hÃ ng</label><p><strong>{masterInfo.productId}</strong></p></div>
              <div><label>TÃªn hÃ ng</label><p>{masterInfo.productName}</p></div>
              <div><label>NhÃ  cung cáº¥p (láº§n nháº­p Ä‘áº§u)</label><p>{masterInfo.supplier || '(khÃ´ng cÃ³)'}</p></div>
              <div><label>ÄVT</label><p>{masterInfo.unit}</p></div>
              <div><label>Quy cÃ¡ch</label><p>{masterInfo.packaging}</p></div>
              <div><label>Sá»‘ lÃ´</label><p><strong>{masterInfo.lotNumber}</strong></p></div>
              <div><label>HSD</label><p><strong>{formatDate(masterInfo.expiryDate)}</strong></p></div>
              <div><label>Tá»•ng Ä‘Ã£ nháº­p</label><p style={{color: 'blue', fontSize: '18px'}}><strong>{totalImported}</strong></p></div>
              <div><label>Tá»•ng cÃ²n láº¡i</label><p style={{color: 'green', fontSize: '18px'}}><strong>{totalRemaining}</strong></p></div>
            </div>
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>Chi Tiáº¿t CÃ¡c Láº§n Nháº­p Kho</h3>
            <table className="products-table">
              <thead>
                <tr>
                  <th>NgÃ y nháº­p</th>
                  <th>NhÃ  cung cáº¥p</th>
                  <th>Sá»‘ lÆ°á»£ng nháº­p</th>
                  <th>SL cÃ²n láº¡i cá»§a láº§n nháº­p</th>
                </tr>
              </thead>
              <tbody>
                {importRecords.map((record) => (
                  <tr key={record.id}>
                    <td>{formatDate(record.importDate)}</td>
                    <td>{record.supplier || '(khÃ´ng cÃ³)'}</td>
                    <td>{record.quantityImported}</td>
                    <td>{record.quantityRemaining}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>
              {selectedNode && selectedNode.type === 'customer' 
                ? `Lá»‹ch Sá»­ Xuáº¥t Kho cho: ${selectedNode.name}`
                : 'ToÃ n Bá»™ Lá»‹ch Sá»­ Xuáº¥t Kho'
              }
            </h3>
            {filteredExportHistory.length > 0 ? (
              <table className="products-table">
                <thead>
                  <tr>
                    <th>NgÃ y xuáº¥t</th>
                    <th>ID Phiáº¿u xuáº¥t</th>
                    <th>KhÃ¡ch hÃ ng</th>
                    <th>Sá»‘ lÆ°á»£ng Ä‘Ã£ xuáº¥t</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredExportHistory.map((item) => (
                    <tr key={item.ticketId}>
                      <td>{formatDate(item.exportDate)}</td>
                      <td>{item.ticketId}</td>
                      <td>{item.customer}</td>
                      <td>{item.quantityExported}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (<p>LÃ´ hÃ ng nÃ y chÆ°a Ä‘Æ°á»£c xuáº¥t kho láº§n nÃ o.</p>)}
          </div>
        </div>
      )}
    </div>
  );
};

export default LotTracePage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\NewExportPage.jsx ---


// src/pages/NewExportPage.jsx
import React, { useState, useRef, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, doc, getDoc, updateDoc, addDoc, serverTimestamp } from 'firebase/firestore';
import { FiXCircle, FiChevronDown } from 'react-icons/fi';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const NewExportPage = () => {
    const today = new Date();
    const formattedDate = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;
    const [exportDate, setExportDate] = useState(formattedDate);
    const [customerId, setCustomerId] = useState('');
    const [customerName, setCustomerName] = useState('');
    const [description, setDescription] = useState('');
    const [items, setItems] = useState([{ 
        id: Date.now(), 
        productId: '', productName: '', unit: '', packaging: '', storageTemp: '',
        availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '',
        expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '' 
    }]);
    const [isProcessing, setIsProcessing] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const lotSelectRefs = useRef([]);
    const quantityInputRefs = useRef([]);
    const [allCustomers, setAllCustomers] = useState([]);

    useEffect(() => {
        const fetchCustomers = async () => {
            const q = query(collection(db, "partners"), where("partnerType", "==", "customer"));
            const querySnapshot = await getDocs(q);
            const customerList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAllCustomers(customerList);
        };
        fetchCustomers();
    }, []);

    const handleCustomerSearch = async () => {
        if (!customerId) {
            setCustomerName('');
            return;
        }
        try {
            const partnerRef = doc(db, 'partners', customerId.toUpperCase());
            const partnerSnap = await getDoc(partnerRef);
            if (partnerSnap.exists() && partnerSnap.data().partnerType === 'customer') {
                setCustomerName(partnerSnap.data().partnerName);
            } else {
                setCustomerName('');
                toast.error(`KhÃ´ng tÃ¬m tháº¥y KhÃ¡ch hÃ ng vá»›i mÃ£ "${customerId}"`);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m khÃ¡ch hÃ ng:", error);
            setCustomerName('');
        }
    };

    const getValidSlipData = () => {
        if (!customerId || !customerName) {
            toast.warn('Vui lÃ²ng nháº­p MÃ£ KhÃ¡ch hÃ ng há»£p lá»‡.');
            return null;
        }
        const validItems = items.filter(item => item.selectedLotId && Number(item.quantityToExport) > 0);
        if (validItems.length === 0) {
            toast.warn('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t máº·t hÃ ng vÃ  nháº­p sá»‘ lÆ°á»£ng xuáº¥t.');
            return null;
        }
        return {
            exportDate, customerId: customerId.toUpperCase(), customer: customerName,
            description, items: validItems.map(item => ({
                productId: item.productId, productName: item.productName, lotId: item.selectedLotId,
                lotNumber: item.lotNumber, expiryDate: item.expiryDate, unit: item.unit,
                packaging: item.packaging, storageTemp: item.storageTemp,
                quantityToExport: Number(item.quantityToExport), notes: item.notes
            })), createdAt: serverTimestamp()
        };
    };

    const resetForm = () => {
        setCustomerId(''); setCustomerName(''); setDescription('');
        setItems([{ 
            id: Date.now(), productId: '', productName: '', unit: '', packaging: '', storageTemp: '', 
            availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', 
            quantityRemaining: 0, quantityToExport: '', notes: '' 
        }]);
    };

    const handleSaveDraft = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;
        setIsProcessing(true);
        try {
            await addDoc(collection(db, 'export_tickets'), { ...slipData, status: 'pending' });
            toast.success('LÆ°u nhÃ¡p phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
            resetForm();
        } catch (error) {
            console.error("Lá»—i khi lÆ°u nhÃ¡p phiáº¿u xuáº¥t: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi lÆ°u nhÃ¡p.');
        } finally {
            setIsProcessing(false);
        }
    };

    const handleDirectExport = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;
        setConfirmModal({isOpen: false});
        setIsProcessing(true);
        try {
            for (const item of slipData.items) {
                const lotRef = doc(db, 'inventory_lots', item.lotId);
                const lotSnap = await getDoc(lotRef);
                if(lotSnap.exists()){
                    const currentQuantity = lotSnap.data().quantityRemaining;
                    const newQuantityRemaining = currentQuantity - item.quantityToExport;
                    await updateDoc(lotRef, { quantityRemaining: newQuantityRemaining });
                }
            }
            await addDoc(collection(db, 'export_tickets'), { ...slipData, status: 'completed' });
            toast.success('Xuáº¥t kho trá»±c tiáº¿p thÃ nh cÃ´ng!');
            resetForm();
        } catch (error) {
            console.error("Lá»—i khi xuáº¥t kho trá»±c tiáº¿p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i trong quÃ¡ trÃ¬nh xuáº¥t kho.');
        } finally {
            setIsProcessing(false);
        }
    };

    const promptForDirectExport = () => {
        if (!getValidSlipData()) return;
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xuáº¥t kho?",
            message: "HÃ nh Ä‘á»™ng nÃ y sáº½ trá»« tá»“n kho ngay láº­p tá»©c. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n tiáº¿p tá»¥c?",
            onConfirm: handleDirectExport
        });
    };

    const handleProductSearch = async (index, productId) => {
        if (!productId) return;
        const newItems = [...items];
        const currentItem = newItems[index];
        Object.assign(currentItem, { productName: '', unit: '', packaging: '', storageTemp: '', availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', quantityRemaining: 0 });
        setItems(newItems);
        try {
          const productRef = doc(db, 'products', productId);
          const productSnap = await getDoc(productRef);
          if (!productSnap.exists()) {
            toast.warn(`KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m vá»›i mÃ£: ${productId}`);
            return;
          }
          const productData = productSnap.data();
          currentItem.productName = productData.productName;
          currentItem.unit = productData.unit;
          currentItem.packaging = productData.packaging;
          currentItem.storageTemp = productData.storageTemp;
          const lotsQuery = query(collection(db, 'inventory_lots'), where("productId", "==", productId), where("quantityRemaining", ">", 0));
          const lotsSnapshot = await getDocs(lotsQuery);
          if (lotsSnapshot.empty) {
            toast.warn(`Cáº£nh bÃ¡o: Sáº£n pháº©m mÃ£ '${productId}' Ä‘Ã£ háº¿t hÃ ng tá»“n kho.`);
            currentItem.availableLots = [];
          } else {
            let foundLots = lotsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            foundLots.sort((a, b) => (a.expiryDate.toDate()) - (b.expiryDate.toDate()));
            currentItem.availableLots = foundLots;
            setTimeout(() => lotSelectRefs.current[index]?.focus(), 0);
          }
        } catch (error) {
          console.error("Lá»—i khi tÃ¬m kiáº¿m:", error);
          toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi tÃ¬m kiáº¿m.");
        } finally {
          setItems([...newItems]);
        }
    };
    
    const handleLotSelection = (index, selectedLotId) => {
        const newItems = [...items];
        const currentItem = newItems[index];
        currentItem.selectedLotId = selectedLotId;
        const selectedLot = currentItem.availableLots.find(lot => lot.id === selectedLotId);
        if (selectedLot) {
          currentItem.lotNumber = selectedLot.lotNumber;
          currentItem.expiryDate = formatDate(selectedLot.expiryDate);
          currentItem.quantityRemaining = selectedLot.quantityRemaining;
          currentItem.displayLotText = selectedLot.lotNumber;
          setTimeout(() => quantityInputRefs.current[index]?.focus(), 0);
        } else {
            Object.assign(currentItem, { lotNumber: '', expiryDate: '', quantityRemaining: 0, displayLotText: '' });
        }
        setItems(newItems);
    };
      
    const handleItemChange = (index, field, value) => {
        const newItems = [...items];
        if (field === 'quantityToExport') {
          const val = Number(value);
          if (val < 0) return;
          if (val > newItems[index].quantityRemaining) {
            toast.warn('Cáº£nh bÃ¡o: Sá»‘ lÆ°á»£ng xuáº¥t vÆ°á»£t quÃ¡ sá»‘ lÆ°á»£ng tá»“n!');
            newItems[index][field] = newItems[index].quantityRemaining;
          } else {
            newItems[index][field] = val;
          }
        } else {
          newItems[index][field] = value;
        }
        setItems(newItems);
    };
    
    const addNewRow = () => {
        setItems([...items, { id: Date.now(), productId: '', productName: '', unit: '', packaging: '', storageTemp: '', availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '' }]);
    };
    
    const handleRemoveRow = (indexToRemove) => {
        if (items.length <= 1) return;
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xÃ³a dÃ²ng?",
            message: "Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a dÃ²ng hÃ ng nÃ y khá»i phiáº¿u xuáº¥t?",
            onConfirm: () => {
                setItems(prevItems => prevItems.filter((_, index) => index !== indexToRemove));
                setConfirmModal({ isOpen: false });
            }
        });
    };

    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText="XÃ¡c nháº­n"
            />
            <h1>Táº¡o Phiáº¿u Xuáº¥t Kho</h1>
            <div className="form-section">
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y xuáº¥t</label>
                        <input type="text" value={exportDate} onChange={(e) => setExportDate(e.target.value)} />
                    </div>
                    <div className="form-group">
                        <label>MÃ£ KhÃ¡ch HÃ ng</label>
                        <input
                            list="customers-list"
                            type="text"
                            placeholder="Nháº­p hoáº·c chá»n mÃ£ KH..."
                            value={customerId}
                            onChange={e => setCustomerId(e.target.value)}
                            onBlur={handleCustomerSearch}
                        />
                        <datalist id="customers-list">
                            {allCustomers.map(cus => (
                                <option key={cus.id} value={cus.id}>
                                    {cus.partnerName}
                                </option>
                            ))}
                        </datalist>
                    </div>
                    <div className="form-group">
                        <label>TÃªn KhÃ¡ch HÃ ng / NÆ¡i nháº­n</label>
                        <input
                            type="text"
                            value={customerName}
                            readOnly
                            style={{ backgroundColor: '#f0f0f0', cursor: 'not-allowed' }}
                        />
                    </div>
                </div>
                <div className="form-group">
                    <label>Diá»…n giáº£i</label>
                    <textarea rows="2" placeholder="Ghi chÃº cho phiáº¿u xuáº¥t..." value={description} onChange={e => setDescription(e.target.value)}></textarea>
                </div>
            </div>

            <h2>Chi Tiáº¿t HÃ ng HÃ³a Xuáº¥t Kho</h2>
            <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 2fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
                <div className="grid-header">MÃ£ hÃ ng</div>
                <div className="grid-header">TÃªn hÃ ng</div>
                <div className="grid-header">Sá»‘ lÃ´</div>
                <div className="grid-header">ÄVT</div>
                <div className="grid-header">Quy cÃ¡ch</div>
                <div className="grid-header">SL Xuáº¥t</div>
                <div className="grid-header">Ghi chÃº</div>
                <div className="grid-header">XÃ³a</div>
                {items.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <div className="grid-cell">
                            <input type="text" placeholder="Nháº­p mÃ£ hÃ ng..." value={item.productId}
                                onChange={e => handleItemChange(index, 'productId', e.target.value.toUpperCase())}
                                onBlur={e => handleProductSearch(index, e.target.value)} />
                        </div>
                        <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                        <div className="grid-cell">
                            {item.selectedLotId ? (
                                <div className="selected-lot-view">
                                    <input type="text" value={item.displayLotText} readOnly className="selected-lot-input" />
                                    <button type="button" onClick={() => handleLotSelection(index, '')} className="change-lot-btn">
                                        <FiChevronDown />
                                    </button>
                                </div>
                            ) : (
                                <select
                                    ref={el => lotSelectRefs.current[index] = el}
                                    value={item.selectedLotId}
                                    onChange={e => handleLotSelection(index, e.target.value)}
                                    disabled={item.availableLots.length === 0}
                                    style={{width: '100%'}}
                                >
                                    <option value="">-- Chá»n lÃ´ tá»“n kho --</option>
                                    {item.availableLots.map(lot => (
                                        <option key={lot.id} value={lot.id}>
                                        {`LÃ´: ${lot.lotNumber} | HSD: ${formatDate(lot.expiryDate)} | Tá»“n: ${lot.quantityRemaining}`}
                                        </option>
                                    ))}
                                </select>
                            )}
                        </div>
                        <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                        <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                        <div className="grid-cell">
                            <input type="number" value={item.quantityToExport}
                                ref={el => quantityInputRefs.current[index] = el}
                                onChange={e => handleItemChange(index, 'quantityToExport', e.target.value)} />
                        </div>
                        <div className="grid-cell"><textarea value={item.notes || ''} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
                        <div className="grid-cell">
                            <button type="button" className="btn-icon btn-delete" onClick={() => handleRemoveRow(index)}><FiXCircle /></button>
                        </div>
                    </React.Fragment>
                ))}
            </div>
            <button onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>+ ThÃªm dÃ²ng</button>
            <div className="page-actions">
                <button onClick={handleSaveDraft} className="btn-secondary" disabled={isProcessing}>
                    {isProcessing ? 'Äang xá»­ lÃ½...' : 'LÆ°u NhÃ¡p'}
                </button>
                <button onClick={promptForDirectExport} className="btn-primary" disabled={isProcessing}>
                    {isProcessing ? 'Äang xá»­ lÃ½...' : 'Xuáº¥t Kho Trá»±c Tiáº¿p'}
                </button>
            </div>
        </div>
    );
};

export default NewExportPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\NewImportPage.jsx ---


// src/pages/NewImportPage.jsx
import React, { useState, useRef, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc, collection, addDoc, serverTimestamp, Timestamp, query, where, getDocs } from 'firebase/firestore';
import AddNewProductAndLotModal from '../components/AddNewProductAndLotModal';
import AddNewLotModal from '../components/AddNewLotModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { parseDateString, formatExpiryDate, formatDate } from '../utils/dateUtils';
import { FiInfo } from 'react-icons/fi';
import { toast } from 'react-toastify';

const NewImportPage = () => {
    const today = new Date();
    const formattedDate = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;

    const [importDate, setImportDate] = useState(formattedDate);
    const [supplierId, setSupplierId] = useState('');
    const [supplierName, setSupplierName] = useState('');
    const [description, setDescription] = useState('');
    const [items, setItems] = useState([
        { id: 1, productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }
    ]);
    const [isSaving, setIsSaving] = useState(false);
    const [newProductModal, setNewProductModal] = useState({ isOpen: false, productId: '', index: -1 });
    const [newLotModal, setNewLotModal] = useState({ isOpen: false, index: -1 });
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const inputRefs = useRef([]);
    const [allSuppliers, setAllSuppliers] = useState([]);

    useEffect(() => {
        const fetchSuppliers = async () => {
            const q = query(collection(db, "partners"), where("partnerType", "==", "supplier"));
            const querySnapshot = await getDocs(q);
            const supplierList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAllSuppliers(supplierList);
        };
        fetchSuppliers();
    }, []);

    const handleSupplierSearch = async () => {
        if (!supplierId) {
            setSupplierName('');
            return;
        }
        try {
            const partnerRef = doc(db, 'partners', supplierId.toUpperCase());
            const partnerSnap = await getDoc(partnerRef);
            if (partnerSnap.exists() && partnerSnap.data().partnerType === 'supplier') {
                setSupplierName(partnerSnap.data().partnerName);
            } else {
                setSupplierName('');
                toast.error(`KhÃ´ng tÃ¬m tháº¥y NhÃ  cung cáº¥p vá»›i mÃ£ "${supplierId}" hoáº·c Ä‘á»‘i tÃ¡c khÃ´ng pháº£i lÃ  NhÃ  cung cáº¥p.`);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m nhÃ  cung cáº¥p:", error);
            setSupplierName('');
        }
    };
    
    const handleExpiryDateBlur = (index, value) => {
        const newItems = [...items];
        newItems[index].expiryDate = formatExpiryDate(value);
        setItems(newItems);
    };

    const handleItemChange = (index, field, value) => {
        const newItems = [...items];
        newItems[index][field] = value;
        
        if (field === 'productId' || field === 'lotNumber') {
            newItems[index].lotStatus = 'unchecked';
            newItems[index].expiryDate = '';
            newItems[index].existingLotInfo = null;
        }
        
        setItems(newItems);
    };

    const checkExistingLot = async (index) => {
        const currentItem = items[index];
        if (!currentItem.productId || !currentItem.lotNumber) return;

        try {
            const q = query(
                collection(db, "inventory_lots"),
                where("productId", "==", currentItem.productId.trim()),
                where("lotNumber", "==", currentItem.lotNumber.trim())
            );
            const querySnapshot = await getDocs(q);
            
            const newItems = [...items];
            if (!querySnapshot.empty) {
                const existingLotData = querySnapshot.docs[0].data();
                newItems[index].lotStatus = 'exists';
                newItems[index].expiryDate = formatDate(existingLotData.expiryDate);
                newItems[index].existingLotInfo = {
                    quantityRemaining: existingLotData.quantityRemaining,
                    expiryDate: formatDate(existingLotData.expiryDate)
                };
            } else {
                newItems[index].lotStatus = 'new';
                newItems[index].existingLotInfo = null;
            }
            setItems(newItems);
        } catch (error) {
            console.error("Lá»—i khi kiá»ƒm tra lÃ´ tá»“n táº¡i: ", error);
        }
    };

    const handleNewLotDeclared = (index, declaredExpiryDate) => {
        const newItems = [...items];
        newItems[index].expiryDate = declaredExpiryDate;
        newItems[index].lotStatus = 'declared';
        setItems(newItems);
        setNewLotModal({ isOpen: false, index: -1 });
    };

    const handleProductSearch = async (index, productId) => {
        if (!productId) return;
        const newItems = [...items];
        try {
            const productRef = doc(db, 'products', productId);
            const productSnap = await getDoc(productRef);
            if (productSnap.exists()) {
                const productData = productSnap.data();
                newItems[index] = {
                    ...newItems[index],
                    productName: productData.productName || '',
                    unit: productData.unit || '',
                    packaging: productData.packaging || '',
                    storageTemp: productData.storageTemp || '',
                    team: productData.team || '',
                    manufacturer: productData.manufacturer || '',
                    productNotFound: false,
                };
            } else {
                newItems[index].productName = '';
                newItems[index].productNotFound = true;
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m kiáº¿m sáº£n pháº©m:", error);
            newItems[index].productName = 'Lá»—i khi tÃ¬m kiáº¿m!';
            newItems[index].productNotFound = false;
        } finally {
            setItems(newItems);
        }
    };
    
    const handleNewProductCreated = (newData) => {
        const newItems = [...items];
        const { index } = newProductModal;
        newItems[index] = {
            ...newItems[index], 
            ...newData,
            productNotFound: false,
        };
        setItems(newItems);
        setNewProductModal({ isOpen: false, productId: '', index: -1 });
        setTimeout(() => {
            inputRefs.current[index * 3 + 2]?.focus();
        }, 100);
    };

    const handleKeyDown = (e, rowIndex, inputIndex) => {
        if (e.key === 'Tab' && !e.shiftKey) {
            e.preventDefault();
            const nextInputIndex = (rowIndex * 3) + inputIndex + 1;
            const nextInput = inputRefs.current[nextInputIndex];
            if (nextInput) {
                nextInput.focus();
            }
        }
    };

    const addNewRow = () => {
        setItems([
            ...items,
            { id: Date.now(), productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }
        ]);
    };

    const handleSaveSlip = async () => {
        if (!supplierId || !supplierName) {
            toast.warn('Vui lÃ²ng nháº­p MÃ£ NhÃ  cung cáº¥p há»£p lá»‡.');
            return;
        }
        const validItems = items.filter(item => item.productId && item.quantity > 0);
        if (validItems.length === 0) {
            toast.warn('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡ vÃ o phiáº¿u.');
            return;
        }
        setIsSaving(true);
        try {
            const slipData = {
                importDate: formattedDate,
                supplierId: supplierId.toUpperCase(),
                supplier: supplierName,
                description,
                items: validItems,
                status: 'pending',
                createdAt: serverTimestamp()
            };
            const docRef = await addDoc(collection(db, 'import_tickets'), slipData);
            toast.success(`LÆ°u táº¡m phiáº¿u nháº­p thÃ nh cÃ´ng! ID phiáº¿u: ${docRef.id}`);
            setSupplierId('');
            setSupplierName('');
            setDescription('');
            setItems([{ id: 1, productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }]);
        } catch (error) {
            console.error("Lá»—i khi lÆ°u phiáº¿u nháº­p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi lÆ°u phiáº¿u.');
        } finally {
            setIsSaving(false);
        }
    };

    const handleDirectImport = async () => {
        setConfirmModal({ isOpen: false });
        setIsSaving(true);
        try {
            const validItems = items.filter(item => item.productId && item.quantity > 0);
            for (const item of validItems) {
                const expiryDateObject = parseDateString(item.expiryDate);
                if (!expiryDateObject) {
                    toast.error(`HSD cá»§a máº·t hÃ ng ${item.productName} (${item.lotNumber}) cÃ³ Ä‘á»‹nh dáº¡ng sai.`);
                    setIsSaving(false);
                    return;
                }
                const expiryTimestamp = Timestamp.fromDate(expiryDateObject);
                const newLotData = {
                    importDate: Timestamp.now(),
                    productId: item.productId,
                    productName: item.productName,
                    lotNumber: item.lotNumber,
                    expiryDate: expiryTimestamp,
                    unit: item.unit,
                    packaging: item.packaging,
                    storageTemp: item.storageTemp,
                    team: item.team,
                    manufacturer: item.manufacturer,
                    quantityImported: Number(item.quantity),
                    quantityRemaining: Number(item.quantity),
                    notes: item.notes,
                    supplier: supplierName,
                };
                await addDoc(collection(db, "inventory_lots"), newLotData);
            }

            const slipData = {
                importDate: formattedDate,
                supplierId: supplierId.toUpperCase(),
                supplier: supplierName,
                description,
                items: validItems,
                status: 'completed',
                createdAt: serverTimestamp()
            };
            await addDoc(collection(db, 'import_tickets'), slipData);

            toast.success('Nháº­p kho trá»±c tiáº¿p thÃ nh cÃ´ng!');
            setSupplierId('');
            setSupplierName('');
            setDescription('');
            setItems([{ id: 1, productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }]);
        } catch (error) {
            console.error("Lá»—i khi nháº­p kho trá»±c tiáº¿p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi nháº­p kho trá»±c tiáº¿p.');
        } finally {
            setIsSaving(false);
        }
    };

    const promptForDirectImport = () => {
        if (!supplierId || !supplierName) {
            toast.warn('Vui lÃ²ng nháº­p MÃ£ NhÃ  cung cáº¥p há»£p lá»‡.');
            return;
        }
        const validItems = items.filter(item => item.productId && item.quantity > 0);
        if (validItems.length === 0) {
            toast.warn('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡.');
            return;
        }
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n nháº­p kho trá»±c tiáº¿p?",
            message: "Thao tÃ¡c nÃ y sáº½ cáº­p nháº­t tá»“n kho ngay láº­p tá»©c vÃ  khÃ´ng thá»ƒ hoÃ n tÃ¡c. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n tiáº¿p tá»¥c?",
            onConfirm: handleDirectImport
        });
    };

    return (
        <div>
            <ConfirmationModal 
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText="XÃ¡c nháº­n"
            />
            {newProductModal.isOpen && (
                <AddNewProductAndLotModal
                    productId={newProductModal.productId}
                    onClose={() => setNewProductModal({ isOpen: false, productId: '', index: -1 })}
                    onSave={handleNewProductCreated}
                />
            )}
            {newLotModal.isOpen && (
                <AddNewLotModal
                    productId={items[newLotModal.index].productId}
                    productName={items[newLotModal.index].productName}
                    lotNumber={items[newLotModal.index].lotNumber}
                    onClose={() => setNewLotModal({ isOpen: false, index: -1 })}
                    onSave={(expiry) => handleNewLotDeclared(newLotModal.index, expiry)}
                />
            )}

            <h1>Táº¡o Phiáº¿u Nháº­p Kho</h1>
            <div className="form-section">
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y nháº­p</label>
                        <input type="text" value={importDate} onChange={(e) => setImportDate(e.target.value)} />
                    </div>
                    <div className="form-group">
                        <label>MÃ£ NhÃ  Cung Cáº¥p</label>
                        <input 
                            list="suppliers-list"
                            type="text" 
                            placeholder="Nháº­p hoáº·c chá»n mÃ£ NCC..." 
                            value={supplierId} 
                            onChange={e => setSupplierId(e.target.value)}
                            onBlur={handleSupplierSearch}
                        />
                        <datalist id="suppliers-list">
                            {allSuppliers.map(sup => (
                                <option key={sup.id} value={sup.id}>
                                    {sup.partnerName}
                                </option>
                            ))}
                        </datalist>
                    </div>
                    <div className="form-group">
                        <label>TÃªn NhÃ  Cung Cáº¥p</label>
                        <input 
                            type="text" 
                            value={supplierName} 
                            readOnly 
                            style={{ backgroundColor: '#f0f0f0', cursor: 'not-allowed' }}
                        />
                    </div>
                </div>
                <div className="form-group">
                    <label>Diá»…n giáº£i</label>
                    <textarea rows="2" placeholder="Ghi chÃº cho phiáº¿u nháº­p..." value={description} onChange={e => setDescription(e.target.value)}></textarea>
                </div>
            </div>

            <h2>Chi tiáº¿t hÃ ng hÃ³a</h2>
            <div className="item-details-grid">
                <div className="grid-header">MÃ£ hÃ ng</div>
                <div className="grid-header">TÃªn hÃ ng</div>
                <div className="grid-header">Sá»‘ lÃ´</div>
                <div className="grid-header">HSD</div>
                <div className="grid-header">ÄVT</div>
                <div className="grid-header">Quy cÃ¡ch</div>
                <div className="grid-header">Sá»‘ lÆ°á»£ng</div>
                <div className="grid-header">Ghi chÃº</div>
                <div className="grid-header">Nhiá»‡t Ä‘á»™ BQ</div>
                <div className="grid-header">Team</div>

                {items.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            <input
                                ref={el => inputRefs.current[index * 3] = el}
                                onKeyDown={(e) => handleKeyDown(e, index, 0)}
                                type="text"
                                value={item.productId}
                                onChange={e => handleItemChange(index, 'productId', e.target.value.toUpperCase())}
                                onBlur={e => handleProductSearch(index, e.target.value)}
                            />
                            {item.productNotFound && (
                                <button
                                    onClick={() => setNewProductModal({ isOpen: true, productId: item.productId, index: index })}
                                    className="btn-link"
                                    style={{ marginTop: '5px', color: '#007bff', cursor: 'pointer', background: 'none', border: 'none', padding: '0', textAlign: 'left', fontSize: '13px' }}
                                >
                                    MÃ£ nÃ y khÃ´ng tá»“n táº¡i. Táº¡o má»›i...
                                </button>
                            )}
                        </div>
                        <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            <input
                                ref={el => inputRefs.current[index * 3 + 1] = el}
                                onKeyDown={(e) => handleKeyDown(e, index, 1)}
                                type="text"
                                value={item.lotNumber}
                                onChange={e => handleItemChange(index, 'lotNumber', e.target.value)}
                                onBlur={() => checkExistingLot(index)}
                            />
                            {item.lotStatus === 'exists' && item.existingLotInfo && (
                                <div className="existing-lot-info">
                                    <FiInfo />
                                    <span>LÃ´ Ä‘Ã£ cÃ³ | Tá»“n: {item.existingLotInfo.quantityRemaining} | HSD: {item.existingLotInfo.expiryDate}</span>
                                </div>
                            )}
                            {item.lotStatus === 'new' && (
                                <button onClick={() => setNewLotModal({ isOpen: true, index: index })} className="btn-link" style={{marginTop: '5px'}}>
                                    [+] Khai bÃ¡o lÃ´ má»›i...
                                </button>
                            )}
                        </div>
                        <div className="grid-cell">
                            <input 
                                type="text" 
                                placeholder="dd/mm/yyyy" 
                                value={item.expiryDate} 
                                onChange={e => handleItemChange(index, 'expiryDate', e.target.value)} 
                                onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                                readOnly={item.lotStatus === 'exists'}
                                style={{backgroundColor: item.lotStatus === 'exists' ? '#f0f0f0' : '#fff', cursor: item.lotStatus === 'exists' ? 'not-allowed' : 'text'}}
                            />
                        </div>
                        <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                        <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                        <div className="grid-cell">
                            <input
                                ref={el => inputRefs.current[index * 3 + 2] = el}
                                type="number"
                                value={item.quantity}
                                onChange={e => handleItemChange(index, 'quantity', e.target.value)}
                            />
                        </div>
                        <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
                        <div className="grid-cell"><textarea value={item.storageTemp} readOnly /></div>
                        <div className="grid-cell"><input type="text" value={item.team} readOnly /></div>
                    </React.Fragment>
                ))}
            </div>
            
            <button onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>+ ThÃªm dÃ²ng</button>
            <div className="page-actions">
                <button onClick={handleSaveSlip} className="btn-secondary" disabled={isSaving}>
                    {isSaving ? 'Äang lÆ°u...' : 'LÆ°u Táº¡m'}
                </button>
                <button onClick={promptForDirectImport} className="btn-primary" disabled={isSaving}>
                    {isSaving ? 'Äang xá»­ lÃ½...' : 'Nháº­p Kho Trá»±c Tiáº¿p'}
                </button>
            </div>
        </div>
    );
};

export default NewImportPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\PartnersPage.jsx ---


// src/pages/PartnersPage.jsx
import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, getDocs, doc, deleteDoc } from 'firebase/firestore';
import { FiEdit, FiTrash2, FiPlus } from 'react-icons/fi';
import AddPartnerModal from '../components/AddPartnerModal';
import EditPartnerModal from '../components/EditPartnerModal';
import ConfirmationModal from '../components/ConfirmationModal'; // Import
import { toast } from 'react-toastify';

const PartnersPage = () => {
    const [partners, setPartners] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [currentPartner, setCurrentPartner] = useState(null);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null }); // State má»›i

    const fetchPartners = async () => {
        setLoading(true);
        try {
            const partnersCollection = collection(db, 'partners');
            const querySnapshot = await getDocs(partnersCollection);
            const partnersList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setPartners(partnersList.sort((a, b) => a.id.localeCompare(b.id)));
        } catch (error) {
            console.error("Lá»—i khi láº¥y danh sÃ¡ch Ä‘á»‘i tÃ¡c: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch Ä‘á»‘i tÃ¡c.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => { fetchPartners(); }, []);

    const handlePartnerAdded = () => {
        setIsAddModalOpen(false);
        fetchPartners();
    };

    const handlePartnerUpdated = () => {
        setIsEditModalOpen(false);
        fetchPartners();
    };

    const promptForDelete = (partner) => {
        setConfirmModal({
            isOpen: true,
            item: partner,
            title: "XÃ¡c nháº­n xÃ³a Ä‘á»‘i tÃ¡c?",
            message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a "${partner.partnerName}" (ID: ${partner.id}) khÃ´ng?`
        });
    };

    const handleDelete = async () => {
        const { item } = confirmModal;
        if (!item) return;

        try {
            await deleteDoc(doc(db, 'partners', item.id));
            toast.success('XÃ³a Ä‘á»‘i tÃ¡c thÃ nh cÃ´ng!');
            fetchPartners();
        } catch (error) {
            console.error("Lá»—i khi xÃ³a Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ³a Ä‘á»‘i tÃ¡c.');
        } finally {
            setConfirmModal({ isOpen: false, item: null });
        }
    };

    const openEditModal = (partner) => {
        setCurrentPartner(partner);
        setIsEditModalOpen(true);
    };

    if (loading) {
        return <div>Äang táº£i dá»¯ liá»‡u Ä‘á»‘i tÃ¡c...</div>;
    }

    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={handleDelete}
                onCancel={() => setConfirmModal({ isOpen: false, item: null })}
                confirmText="Váº«n xÃ³a"
            />
            {isAddModalOpen && <AddPartnerModal onClose={() => setIsAddModalOpen(false)} onPartnerAdded={handlePartnerAdded} />}
            {isEditModalOpen && <EditPartnerModal onClose={() => setIsEditModalOpen(false)} onPartnerUpdated={handlePartnerUpdated} partnerToEdit={currentPartner} />}

            <div className="page-header">
                <h1>Quáº£n LÃ½ Äá»‘i TÃ¡c</h1>
                <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">
                    <FiPlus style={{ marginRight: '5px' }} />
                    ThÃªm Äá»‘i TÃ¡c
                </button>
            </div>
            <p>Tá»•ng cá»™ng cÃ³ {partners.length} Ä‘á»‘i tÃ¡c (NhÃ  cung cáº¥p & KhÃ¡ch hÃ ng).</p>

            <table className="products-table">
                <thead>
                    <tr>
                        <th>MÃ£ Äá»‘i TÃ¡c</th>
                        <th>TÃªn Äá»‘i TÃ¡c</th>
                        <th>PhÃ¢n Loáº¡i</th>
                        <th>Thao tÃ¡c</th>
                    </tr>
                </thead>
                <tbody>
                    {partners.map(partner => (
                        <tr key={partner.id}>
                            <td><strong>{partner.id}</strong></td>
                            <td>{partner.partnerName}</td>
                            <td>{partner.partnerType === 'supplier' ? 'NhÃ  Cung Cáº¥p' : 'KhÃ¡ch HÃ ng'}</td>
                            <td>
                                <div className="action-buttons">
                                    <button className="btn-icon btn-edit" onClick={() => openEditModal(partner)}>
                                        <FiEdit />
                                    </button>
                                    <button className="btn-icon btn-delete" onClick={() => promptForDelete(partner)}>
                                        <FiTrash2 />
                                    </button>
                                </div>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default PartnersPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\ProductsPage.jsx ---


// src/pages/ProductsPage.jsx
import React, { useState, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, getDocs, doc, deleteDoc } from 'firebase/firestore';
import AddProductModal from '../components/AddProductModal';
import EditProductModal from '../components/EditProductModal';
import ConfirmationModal from '../components/ConfirmationModal'; // <-- THÃŠM IMPORT
import { FiEdit, FiTrash2 } from 'react-icons/fi';
import { toast } from 'react-toastify';

const ProductsPage = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [currentProduct, setCurrentProduct] = useState(null);
  
  // --- THÃŠM STATE Má»šI Äá»‚ QUáº¢N LÃ MODAL XÃC NHáº¬N ---
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const productsCollection = collection(db, 'products');
      const querySnapshot = await getDocs(productsCollection);
      const productsList = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setProducts(productsList);
    } catch (error) {
      console.error("Lá»—i khi láº¥y danh sÃ¡ch sáº£n pháº©m: ", error);
      toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch sáº£n pháº©m.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);
  
  const handleProductAdded = () => {
    setIsAddModalOpen(false);
    fetchProducts();
  };
  
  const handleProductUpdated = () => {
    setIsEditModalOpen(false);
    fetchProducts();
  };

  // --- HÃ€M Má»šI Äá»‚ Má»ž MODAL XÃC NHáº¬N ---
  const promptForDelete = (product) => {
    setConfirmModal({
        isOpen: true,
        item: product,
        title: "XÃ¡c nháº­n xÃ³a sáº£n pháº©m?",
        message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a "${product.productName}" (ID: ${product.id}) khÃ´ng? HÃ nh Ä‘á»™ng nÃ y khÃ´ng thá»ƒ hoÃ n tÃ¡c.`
    });
  };

  // --- Cáº¬P NHáº¬T Láº I HÃ€M XÃ“A ---
  const handleDelete = async () => {
    const { item } = confirmModal;
    if (!item) return;

    try {
      await deleteDoc(doc(db, 'products', item.id));
      toast.success('XÃ³a sáº£n pháº©m thÃ nh cÃ´ng!');
      fetchProducts();
    } catch (error) {
      console.error("Lá»—i khi xÃ³a sáº£n pháº©m: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ³a sáº£n pháº©m.');
    } finally {
      setConfirmModal({ isOpen: false, item: null }); // ÄÃ³ng modal sau khi thá»±c hiá»‡n
    }
  };

  const openEditModal = (product) => {
    setCurrentProduct(product);
    setIsEditModalOpen(true);
  };

  if (loading) {
    return <div>Äang táº£i dá»¯ liá»‡u sáº£n pháº©m...</div>;
  }

  return (
    <div>
      {/* --- THÃŠM MODAL XÃC NHáº¬N VÃ€O GIAO DIá»†N --- */}
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={handleDelete}
        onCancel={() => setConfirmModal({ isOpen: false, item: null })}
        confirmText="Váº«n xÃ³a"
      />

      <div className="page-header">
        <h1>Quáº£n LÃ½ HÃ ng HÃ³a</h1>
        <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">ThÃªm sáº£n pháº©m</button>
      </div>
      <p>Tá»•ng cá»™ng cÃ³ {products.length} mÃ£ hÃ ng.</p>

      {isAddModalOpen && <AddProductModal onClose={() => setIsAddModalOpen(false)} onProductAdded={handleProductAdded} />}
      {isEditModalOpen && <EditProductModal onClose={() => setIsEditModalOpen(false)} onProductUpdated={handleProductUpdated} productToEdit={currentProduct} />}

      <table className="products-table">
        <thead>
          <tr>
            <th>MÃ£ hÃ ng</th>
            <th>TÃªn hÃ ng</th>
            <th>ÄÆ¡n vá»‹ tÃ­nh</th>
            <th>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</th>
            <th>Nhiá»‡t Ä‘á»™ BQ</th>
            <th>HÃ£ng sáº£n xuáº¥t</th>
            <th>Team</th>
            <th>Thao tÃ¡c</th>
          </tr>
        </thead>
        <tbody>
          {products.map(product => (
            <tr key={product.id}>
              <td>{product.id}</td>
              <td>{product.productName}</td>
              <td>{product.unit}</td>
              <td>{product.packaging}</td>
              <td>{product.storageTemp}</td>
              <td>{product.manufacturer}</td>
              <td>{product.team}</td>
              <td>
                <div className="action-buttons">
                  <button className="btn-icon btn-edit" onClick={() => openEditModal(product)}>
                    <FiEdit />
                  </button>
                  {/* --- THAY Äá»”I ONCLICK Cá»¦A NÃšT XÃ“A --- */}
                  <button className="btn-icon btn-delete" onClick={() => promptForDelete(product)}>
                    <FiTrash2 />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProductsPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\StocktakeListPage.jsx ---


// src/pages/StocktakeListPage.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, addDoc, serverTimestamp, orderBy } from 'firebase/firestore';
import CreateStocktakeModal from '../components/CreateStocktakeModal';
import { toast } from 'react-toastify';

const StocktakeListPage = () => {
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
    const [isCreating, setIsCreating] = useState(false);
    const [stocktakeSessions, setStocktakeSessions] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    const fetchSessions = async () => {
        setLoading(true);
        const q = query(collection(db, "stocktakes"), orderBy("createdAt", "desc"));
        const querySnapshot = await getDocs(q);
        const sessions = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setStocktakeSessions(sessions);
        setLoading(false);
    };

    useEffect(() => {
        fetchSessions();
    }, []);

    const handleCreateStocktake = async (sessionData) => {
        setIsCreating(true);
        try {
            let inventoryQuery;
            if (sessionData.scope === 'all') {
                inventoryQuery = query(collection(db, "inventory_lots"));
            } else {
                inventoryQuery = query(collection(db, "inventory_lots"), where("team", "==", sessionData.scope));
            }

            const querySnapshot = await getDocs(inventoryQuery);
            const inventorySnapshotItems = querySnapshot.docs.map(doc => {
                const data = doc.data();
                return {
                    lotId: doc.id,
                    productId: data.productId,
                    productName: data.productName,
                    lotNumber: data.lotNumber,
                    expiryDate: data.expiryDate,
                    unit: data.unit,
                    packaging: data.packaging,
                    storageTemp: data.storageTemp,
                    team: data.team,
                    systemQty: data.quantityRemaining,
                    countedQty: null,
                };
            });
            
            const newStocktakeSession = {
                name: sessionData.sessionName,
                scope: sessionData.scope,
                status: 'in_progress',
                createdAt: serverTimestamp(),
                items: inventorySnapshotItems,
            };

            const docRef = await addDoc(collection(db, "stocktakes"), newStocktakeSession);
            
            toast.success("Táº¡o phiÃªn kiá»ƒm kÃª má»›i thÃ nh cÃ´ng!");
            setIsCreateModalOpen(false);
            navigate(`/stocktakes/${docRef.id}`);
        } catch (error) {
            console.error("Lá»—i khi táº¡o phiÃªn kiá»ƒm kÃª: ", error);
            toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi táº¡o phiÃªn kiá»ƒm kÃª.");
        } finally {
            setIsCreating(false);
        }
    };

    const getStatusBadge = (status) => {
        switch (status) {
            case 'in_progress': return <span className="status-badge status-pending">Äang thá»±c hiá»‡n</span>;
            case 'completed': return <span className="status-badge status-completed">ÄÃ£ hoÃ n thÃ nh Ä‘áº¿m</span>;
            case 'adjusted': return <span className="status-badge" style={{ backgroundColor: '#6f42c1' }}>ÄÃ£ Ä‘iá»u chá»‰nh</span>;
            default: return <span className="status-badge">{status}</span>;
        }
    };

    return (
        <div>
            {isCreateModalOpen && (
                <CreateStocktakeModal
                    onClose={() => setIsCreateModalOpen(false)}
                    onCreate={handleCreateStocktake}
                    isCreating={isCreating}
                />
            )}
            <div className="page-header">
                <h1>Danh sÃ¡ch PhiÃªn Kiá»ƒm KÃª Kho</h1>
                <button 
                    onClick={() => setIsCreateModalOpen(true)} 
                    className="btn-primary"
                >
                    Táº¡o PhiÃªn Má»›i
                </button>
            </div>
            <table className="products-table">
                <thead>
                    <tr>
                        <th>TÃªn PhiÃªn Kiá»ƒm KÃª</th>
                        <th>NgÃ y Táº¡o</th>
                        <th>Pháº¡m Vi</th>
                        <th>Tráº¡ng ThÃ¡i</th>
                        <th>Thao TÃ¡c</th>
                    </tr>
                </thead>
                <tbody>
                    {loading ? (
                        <tr><td colSpan="5" style={{textAlign: 'center'}}>Äang táº£i...</td></tr>
                    ) : stocktakeSessions.length > 0 ? (
                        stocktakeSessions.map(session => (
                            <tr key={session.id}>
                                <td>{session.name}</td>
                                <td>{session.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
                                <td>{session.scope === 'all' ? 'ToÃ n bá»™ kho' : session.scope}</td>
                                <td>{getStatusBadge(session.status)}</td>
                                <td>
                                    <button 
                                        className="btn-secondary" 
                                        style={{padding: '5px 10px'}}
                                        onClick={() => navigate(`/stocktakes/${session.id}`)}
                                    >
                                        Xem/Thá»±c hiá»‡n
                                    </button>
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr><td colSpan="5" style={{textAlign: 'center'}}>ChÆ°a cÃ³ phiÃªn kiá»ƒm kÃª nÃ o.</td></tr>
                    )}
                </tbody>
            </table>
        </div>
    );
};

export default StocktakeListPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\StocktakeSessionPage.jsx ---


// src/pages/StocktakeSessionPage.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { doc, getDoc, updateDoc, writeBatch, collection, addDoc, serverTimestamp } from 'firebase/firestore';
import '../styles/StocktakePage.css';
import AddUnlistedItemModal from '../components/AddUnlistedItemModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const StocktakeSessionPage = () => {
    const { sessionId } = useParams();
    const [loading, setLoading] = useState(true);
    const [sessionData, setSessionData] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [checkedItems, setCheckedItems] = useState({});
    const [isAddItemModalOpen, setIsAddItemModalOpen] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });

    const fetchSessionData = async () => {
        setLoading(true);
        const docRef = doc(db, 'stocktakes', sessionId);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            setSessionData({ id: docSnap.id, ...docSnap.data() });
        } else {
            console.log("KhÃ´ng tÃ¬m tháº¥y phiÃªn kiá»ƒm kÃª!");
            toast.error("KhÃ´ng tÃ¬m tháº¥y dá»¯ liá»‡u cho phiÃªn kiá»ƒm kÃª nÃ y.");
        }
        setLoading(false);
    };

    useEffect(() => { fetchSessionData(); }, [sessionId]);

    const summaryStats = useMemo(() => {
        if (!sessionData) return { totalItems: 0, countedItems: 0, discrepancies: 0 };
        const totalItems = sessionData.items.filter(item => !item.isNew).length;
        const countedItems = sessionData.items.filter(item => item.countedQty !== null).length;
        const discrepancies = sessionData.items.filter(item => item.countedQty !== null && item.systemQty !== item.countedQty).length;
        return { totalItems, countedItems, discrepancies };
    }, [sessionData]);

    const filteredItems = useMemo(() => {
        if (!sessionData) return [];
        const sortedItems = [...sessionData.items].sort((a, b) => {
            if (a.productId < b.productId) return -1;
            if (a.productId > b.productId) return 1;
            const dateA = a.expiryDate?.toDate ? a.expiryDate.toDate() : new Date(0);
            const dateB = b.expiryDate?.toDate ? b.expiryDate.toDate() : new Date(0);
            if (dateA < dateB) return -1;
            if (dateA > dateB) return 1;
            return 0;
        });

        if (!searchTerm) return sortedItems;
        const lowercasedFilter = searchTerm.toLowerCase();
        return sortedItems.filter(item => (
            item.productId?.toLowerCase().includes(lowercasedFilter) ||
            item.productName?.toLowerCase().includes(lowercasedFilter) ||
            item.lotNumber?.toLowerCase().includes(lowercasedFilter)
        ));
    }, [sessionData, searchTerm]);

    const discrepancyItems = useMemo(() => {
        if (!sessionData) return [];
        return sessionData.items.filter(item => item.countedQty !== null && item.systemQty !== item.countedQty);
    }, [sessionData]);

    const handleCountChange = async (lotId, newCountValue) => {
        const newCount = newCountValue === '' ? null : Number(newCountValue);
        const currentItems = sessionData.items;
        const targetItem = currentItems.find(item => item.lotId === lotId);
        let finalCount = newCount;

        if (targetItem && (targetItem.countedQty || 0) > 0 && newCount !== null) {
            if (window.confirm(`ÄÃ£ Ä‘áº¿m ${targetItem.countedQty}. Báº¡n cÃ³ muá»‘n Cá»˜NG Dá»’N thÃªm ${newCount} (Tá»•ng: ${targetItem.countedQty + newCount}) khÃ´ng?\n\n(Nháº¥n OK Ä‘á»ƒ Cá»™ng Dá»“n, Cancel Ä‘á»ƒ Ghi ÄÃ¨)`)) {
                finalCount = (targetItem.countedQty || 0) + newCount;
            }
        }
        
        const updatedItems = currentItems.map(item => item.lotId === lotId ? { ...item, countedQty: finalCount } : item);
        setSessionData(prev => ({ ...prev, items: updatedItems }));
        try {
            const sessionRef = doc(db, 'stocktakes', sessionId);
            await updateDoc(sessionRef, { items: updatedItems });
            console.log(`ÄÃ£ lÆ°u sá»‘ lÆ°á»£ng cho lÃ´ ${lotId}`);
        } catch (error) {
            console.error("Lá»—i khi lÆ°u:", error);
            toast.error("Lá»—i: KhÃ´ng thá»ƒ lÆ°u. Vui lÃ²ng kiá»ƒm tra káº¿t ná»‘i máº¡ng.");
            setSessionData(prev => ({ ...prev, items: currentItems }));
        }
    };

    const handleFinalizeCount = async () => {
        setConfirmModal({isOpen: false});
        try {
            const sessionRef = doc(db, 'stocktakes', sessionId);
            await updateDoc(sessionRef, { status: 'completed' });
            toast.success("ÄÃ£ hoÃ n táº¥t phiÃªn kiá»ƒm kÃª!");
            fetchSessionData();
        } catch (error) {
            console.error("Lá»—i khi hoÃ n táº¥t phiÃªn kiá»ƒm kÃª: ", error);
            toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi hoÃ n táº¥t.");
        }
    };

    const promptForFinalize = () => {
        const uncountedItems = sessionData.items.filter(item => item.countedQty === null && !item.isNew);
        let message = "Táº¥t cáº£ cÃ¡c mÃ£ hÃ ng Ä‘Ã£ Ä‘Æ°á»£c Ä‘áº¿m. Báº¡n cÃ³ muá»‘n hoÃ n táº¥t vÃ  khÃ³a phiÃªn kiá»ƒm kÃª nÃ y khÃ´ng?";
        if (uncountedItems.length > 0) {
            message = `Cáº£nh bÃ¡o: Váº«n cÃ²n ${uncountedItems.length} mÃ£ hÃ ng chÆ°a Ä‘Æ°á»£c Ä‘áº¿m. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n hoÃ n táº¥t khÃ´ng?`;
        }
        setConfirmModal({
            isOpen: true,
            title: "HoÃ n táº¥t phiÃªn kiá»ƒm kÃª?",
            message: message,
            onConfirm: handleFinalizeCount,
            confirmText: "HoÃ n táº¥t"
        });
    };

    const handleAdjustInventory = async () => {
        setConfirmModal({isOpen: false});
        const itemsToAdjust = discrepancyItems.filter(item => checkedItems[item.lotId]);
        try {
            const batch = writeBatch(db);
            const adjustmentsCollectionRef = collection(db, 'inventory_adjustments');
            itemsToAdjust.forEach(item => {
                if (!item.isNew) {
                    const inventoryLotRef = doc(db, 'inventory_lots', item.lotId);
                    batch.update(inventoryLotRef, { quantityRemaining: item.countedQty });
                }
                const newAdjustmentRef = doc(adjustmentsCollectionRef);
                batch.set(newAdjustmentRef, {
                    createdAt: serverTimestamp(), stocktakeId: sessionId, productId: item.productId,
                    productName: item.productName, lotNumber: item.lotNumber, quantityBefore: item.systemQty,
                    quantityAfter: item.countedQty, variance: item.countedQty - item.systemQty,
                    reason: `Äiá»u chá»‰nh sau kiá»ƒm kÃª phiÃªn: ${sessionData.name}`
                });
            });
            const sessionRef = doc(db, 'stocktakes', sessionId);
            batch.update(sessionRef, { status: 'adjusted' });
            await batch.commit();
            toast.success("ÄÃ£ Ä‘iá»u chá»‰nh tá»“n kho thÃ nh cÃ´ng!");
            fetchSessionData();
        } catch (error) {
            console.error("Lá»—i khi Ä‘iá»u chá»‰nh tá»“n kho: ", error);
            toast.error("ÄÃ£ xáº£y ra lá»—i khi Ä‘iá»u chá»‰nh tá»“n kho.");
        }
    };

    const promptForAdjust = () => {
        const itemsToAdjust = discrepancyItems.filter(item => checkedItems[item.lotId]);
        if (itemsToAdjust.length === 0) {
            toast.warn("Vui lÃ²ng chá»n Ã­t nháº¥t má»™t máº·t hÃ ng Ä‘á»ƒ Ä‘iá»u chá»‰nh.");
            return;
        }
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n Ä‘iá»u chá»‰nh tá»“n kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n Ä‘iá»u chá»‰nh tá»“n kho cho ${itemsToAdjust.length} máº·t hÃ ng Ä‘Ã£ chá»n khÃ´ng? Thao tÃ¡c nÃ y khÃ´ng thá»ƒ hoÃ n tÃ¡c.`,
            onConfirm: handleAdjustInventory,
            confirmText: "Äá»“ng Ã½ Ä‘iá»u chá»‰nh"
        });
    };

    const handleCheckboxChange = (lotId) => { setCheckedItems(prev => ({ ...prev, [lotId]: !prev[lotId] })); };
    
    const handleCheckAll = (e) => {
        const isChecked = e.target.checked;
        const newCheckedItems = {};
        if (isChecked) {
            discrepancyItems.forEach(item => { newCheckedItems[item.lotId] = true; });
        }
        setCheckedItems(newCheckedItems);
    };

    const handleAddUnlistedItem = (newItem) => {
        const updatedItems = [...sessionData.items, newItem];
        setSessionData(prev => ({ ...prev, items: updatedItems }));
        setIsAddItemModalOpen(false);
        try {
            const sessionRef = doc(db, 'stocktakes', sessionId);
            updateDoc(sessionRef, { items: updatedItems });
            toast.success("ÄÃ£ thÃªm máº·t hÃ ng má»›i vÃ o phiÃªn kiá»ƒm kÃª.");
        } catch (error) {
            toast.error("CÃ³ lá»—i khi lÆ°u máº·t hÃ ng má»›i, vui lÃ²ng thá»­ láº¡i.");
        }
    };
    
    const handlePrint = () => {
        window.print();
    };

    if (loading) return <div>Äang táº£i dá»¯ liá»‡u phiÃªn kiá»ƒm kÃª...</div>;
    if (!sessionData) return <div>KhÃ´ng tÃ¬m tháº¥y dá»¯ liá»‡u cho phiÃªn kiá»ƒm kÃª nÃ y.</div>;

    const isSessionInProgress = sessionData.status === 'in_progress';
    const isSessionCompleted = sessionData.status === 'completed';
    const isSessionAdjusted = sessionData.status === 'adjusted';
    const areAllDiscrepanciesChecked = discrepancyItems.length > 0 && discrepancyItems.every(item => checkedItems[item.lotId]);
    
    const CountInput = ({ item }) => {
        const [currentValue, setCurrentValue] = useState(item.countedQty ?? '');
        const handleKeyDown = (e) => { if (e.key === 'Enter') { e.target.blur(); } };
        return (
            <input type="number" placeholder="Nháº­p sá»‘ Ä‘áº¿m" value={currentValue}
                onChange={e => setCurrentValue(e.target.value)}
                onBlur={() => handleCountChange(item.lotId, currentValue)}
                onKeyDown={handleKeyDown} disabled={!isSessionInProgress}
                style={{
                    backgroundColor: item.isNew ? '#fff9e6' : ((item.countedQty !== null && item.countedQty !== '') ? '#e6fffa' : '#fff'),
                    borderColor: (item.countedQty !== null && item.countedQty !== '' && item.countedQty !== item.systemQty) ? '#f56565' : '#ccc',
                    cursor: !isSessionInProgress ? 'not-allowed' : 'text'
                }}
            />
        );
    };

    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText={confirmModal.confirmText || "XÃ¡c nháº­n"}
            />
            {isAddItemModalOpen && (<AddUnlistedItemModal onClose={() => setIsAddItemModalOpen(false)} onAddItem={handleAddUnlistedItem} />)}
            <div className="page-header">
                <h1>{sessionData.name}
                    {isSessionCompleted && <span className="status-badge status-completed" style={{fontSize: '16px', marginLeft: '15px'}}>ÄÃ£ HoÃ n ThÃ nh Äáº¿m</span>}
                    {isSessionAdjusted && <span className="status-badge" style={{fontSize: '16px', marginLeft: '15px', backgroundColor: '#6f42c1'}}>ÄÃ£ Äiá»u Chá»‰nh</span>}
                </h1>
                <div>
                    <button onClick={handlePrint} className="btn-secondary" style={{marginRight: '10px'}}>In Phiáº¿u Äáº¿m Tay</button>
                    {isSessionInProgress && (<button onClick={promptForFinalize} className="btn-primary">HoÃ n táº¥t Ä‘áº¿m</button>)}
                </div>
            </div>
            <div className="form-section">
                <div className="compact-info-grid" style={{gridTemplateColumns: '1fr 1fr 1fr'}}>
                    <div><label>Tá»•ng sá»‘ mÃ£ cáº§n Ä‘áº¿m</label><p><strong>{summaryStats.totalItems}</strong></p></div>
                    <div><label>Sá»‘ mÃ£ Ä‘Ã£ Ä‘áº¿m</label><p style={{color: 'green'}}><strong>{summaryStats.countedItems}</strong></p></div>
                    <div><label>Sá»‘ mÃ£ cÃ³ chÃªnh lá»‡ch</label><p style={{color: 'red'}}><strong>{summaryStats.discrepancies}</strong></p></div>
                </div>
            </div>
            <div className="controls-container">
                <div className="search-container">
                    <input type="text" placeholder="TÃ¬m theo MÃ£ hÃ ng, TÃªn hÃ ng, Sá»‘ lÃ´..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="search-input" />
                </div>
                {isSessionInProgress && (
                    <button onClick={() => setIsAddItemModalOpen(true)} className="btn-secondary" style={{whiteSpace: 'nowrap'}}>+ ThÃªm HÃ ng NgoÃ i DS</button>
                )}
            </div>
            {(isSessionCompleted || isSessionAdjusted) && (
                <div className="form-section">
                    <h3 style={{color: '#dc3545'}}>Xá»­ LÃ½ ChÃªnh Lá»‡ch</h3>
                    <p>Chá»‰ nhá»¯ng máº·t hÃ ng cÃ³ sá»‘ lÆ°á»£ng thá»±c táº¿ khÃ¡c vá»›i há»‡ thá»‘ng Ä‘Æ°á»£c liá»‡t kÃª dÆ°á»›i Ä‘Ã¢y. Chá»n nhá»¯ng má»¥c báº¡n muá»‘n Ä‘iá»u chá»‰nh vÃ  xÃ¡c nháº­n.</p>
                    {discrepancyItems.length > 0 ? (
                        <>
                            <table className="products-table">
                                <thead>
                                    <tr>
                                        <th><input type="checkbox" onChange={handleCheckAll} checked={areAllDiscrepanciesChecked} disabled={isSessionAdjusted} /></th>
                                        <th>MÃ£ hÃ ng</th><th>TÃªn hÃ ng</th><th>Sá»‘ lÃ´</th>
                                        <th>Tá»“n há»‡ thá»‘ng</th><th>Tá»“n thá»±c táº¿</th><th>ChÃªnh lá»‡ch</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {discrepancyItems.map(item => {
                                        const variance = item.countedQty - item.systemQty;
                                        return (
                                            <tr key={item.lotId} style={{backgroundColor: item.isNew ? '#fff9e6' : 'transparent'}}>
                                                <td><input type="checkbox" checked={!!checkedItems[item.lotId]} onChange={() => handleCheckboxChange(item.lotId)} disabled={isSessionAdjusted} /></td>
                                                <td>{item.productId}</td><td>{item.productName}</td><td>{item.lotNumber}</td>
                                                <td>{item.systemQty}</td><td><strong>{item.countedQty}</strong></td>
                                                <td style={{color: variance > 0 ? 'green' : 'red', fontWeight: 'bold'}}>{variance > 0 ? `+${variance}` : variance}</td>
                                            </tr>
                                        )
                                    })}
                                </tbody>
                            </table>
                            {!isSessionAdjusted && (
                                <div className="page-actions">
                                    <button onClick={promptForAdjust} className="btn-primary">XÃ¡c Nháº­n Äiá»u Chá»‰nh Tá»“n Kho</button>
                                </div>
                            )}
                        </>
                    ) : <p>KhÃ´ng cÃ³ chÃªnh lá»‡ch nÃ o Ä‘Æ°á»£c ghi nháº­n.</p>
                    }
                </div>
            )}
            <div className="printable-stocktake-area">
                <h2>Phiáº¿u Kiá»ƒm KÃª Kho</h2>
                <div className="compact-info-grid" style={{gridTemplateColumns: '1fr 1fr 1fr', border: 'none', padding: 0, marginBottom: '20px'}}>
                    <div><label>TÃªn PhiÃªn:</label><p><strong>{sessionData.name}</strong></p></div>
                    <div><label>NgÃ y Táº¡o:</label><p><strong>{formatDate(sessionData.createdAt)}</strong></p></div>
                    <div><label>Pháº¡m Vi:</label><p><strong>{sessionData.scope === 'all' ? 'ToÃ n bá»™ kho' : sessionData.scope}</strong></p></div>
                </div>
                <table className="products-table">
                    <thead>
                        <tr>
                            <th>MÃ£ hÃ ng</th>
                            <th>TÃªn hÃ ng</th>
                            <th>Sá»‘ lÃ´</th>
                            <th>HSD</th>
                            <th>ÄVT</th>
                            <th>Quy cÃ¡ch</th>
                            <th>Tá»“n há»‡ thá»‘ng</th>
                            <th>Tá»“n thá»±c táº¿</th>
                            <th>Nhiá»‡t Ä‘á»™ BQ</th>
                            <th>Team</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredItems.map((item) => (
                            <tr key={item.lotId}>
                                <td>{item.productId}</td>
                                <td style={{textAlign: 'left'}}>{item.productName}</td>
                                <td>{item.lotNumber}</td>
                                <td>{item.isNew ? item.expiryDate : formatDate(item.expiryDate)}</td>
                                <td>{item.unit}</td>
                                <td>{item.packaging}</td>
                                <td>{item.systemQty}</td>
                                <td style={{height: '40px'}}></td>
                                <td>{item.storageTemp}</td>
                                <td>{item.team}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <div className="table-container stocktake-table-container">
                <table className="products-table">
                    <thead>
                        <tr>
                            <th>MÃ£ hÃ ng</th><th>TÃªn hÃ ng</th><th>Sá»‘ lÃ´</th><th>HSD</th>
                            <th>ÄVT</th><th>Quy cÃ¡ch</th><th>Tá»“n há»‡ thá»‘ng</th>
                            <th>Tá»“n thá»±c táº¿</th><th>Nhiá»‡t Ä‘á»™ BQ</th><th>Team</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredItems.map((item) => (
                            <tr key={item.lotId} style={{backgroundColor: item.isNew ? '#fff9e6' : 'transparent'}}>
                                <td>{item.productId}</td><td>{item.productName}</td><td>{item.lotNumber}</td>
                                <td>{item.isNew ? item.expiryDate : formatDate(item.expiryDate)}</td>
                                <td>{item.unit}</td><td>{item.packaging}</td><td>{item.systemQty}</td>
                                <td><CountInput item={item} /></td><td>{item.storageTemp}</td><td>{item.team}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <div className="stocktake-card-container">
                {filteredItems.map((item) => (
                    <div className="stocktake-card" key={item.lotId} style={{borderColor: item.isNew ? '#f59e0b' : 'var(--primary-color)'}}>
                        <div className="card-header">
                            <span className="card-product-id">{item.productId}</span>
                            <span className="card-product-name">{item.productName}</span>
                        </div>
                        <div className="card-body">
                            <div className="card-info-row">
                                <span><strong>Sá»‘ lÃ´:</strong> {item.lotNumber}</span>
                                <span><strong>HSD:</strong> {item.isNew ? item.expiryDate : formatDate(item.expiryDate)}</span>
                            </div>
                            <div className="card-count-area">
                                <div className="count-box system-count">
                                    <label>Há»‡ thá»‘ng</label>
                                    <p>{item.systemQty}</p>
                                </div>
                                <div className="count-box actual-count">
                                    <label>Thá»±c táº¿</label>
                                    <CountInput item={item} />
                                </div>
                            </div>
                            <div className="card-footer-info">
                                <span><strong>Team:</strong> {item.team || 'N/A'}</span>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default StocktakeSessionPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\TestPage.jsx ---


// src/pages/TestPage.jsx
import React, { useState } from 'react';
// ChÃºng ta váº«n cáº§n hÃ m nÃ y Ä‘á»ƒ Ä‘á»‹nh dáº¡ng
import { formatExpiryDate } from '../utils/dateUtils';

const TestPage = () => {
  const [testDate, setTestDate] = useState('');

  // HÃ€M Má»šI: Chá»‰ Ä‘á»‹nh dáº¡ng khi ngÆ°á»i dÃ¹ng rá»i khá»i Ã´ input
  const handleBlurFormat = (e) => {
    const formattedValue = formatExpiryDate(e.target.value);
    setTestDate(formattedValue);
  };

  return (
    <div style={{ padding: '40px' }}>
      <h1>Trang Kiá»ƒm Tra Lá»—i HSD (Giáº£i PhÃ¡p Má»›i)</h1>
      <p>
        HÃ£y thá»­ gÃµ má»™t chuá»—i sá»‘ vÃ o Ã´ bÃªn dÆ°á»›i (vÃ­ dá»¥: 12122025), sau Ä‘Ã³ báº¥m phÃ­m Tab hoáº·c click chuá»™t ra ngoÃ i Ã´.
      </p>

      <div style={{ marginTop: '20px' }}>
        <label htmlFor="test-input" style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>
          Ã” Input Test HSD (dd/mm/yyyy)
        </label>
        <input
          id="test-input"
          type="text"
          value={testDate}
          // HÃ€M CÅ¨: Giá» chá»‰ cáº­p nháº­t giÃ¡ trá»‹ thÃ´, khÃ´ng Ä‘á»‹nh dáº¡ng
          onChange={(e) => setTestDate(e.target.value)}
          // HÃ€M Má»šI: KÃ­ch hoáº¡t Ä‘á»‹nh dáº¡ng khi rá»i Ä‘i
          onBlur={handleBlurFormat}
          placeholder="dd/mm/yyyy"
          style={{ padding: '10px', fontSize: '16px', width: '300px' }}
        />
      </div>

      <div style={{ marginTop: '20px' }}>
        <strong>GiÃ¡ trá»‹ hiá»‡n táº¡i cá»§a state:</strong> {testDate}
      </div>
    </div>
  );
};

export default TestPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\AdminLayout.css ---


:root {
  --header-height: 60px;
  --primary-color: #007bff;
  --text-color: #333;
  --bg-color: #f8f9fa;
  --border-color: #dee2e6;
  --transition-speed: 0.3s ease;
}

/* --- Bá» Cá»¤C LAYOUT NGANG Má»šI --- */
.admin-layout-horizontal {
  display: flex;
  flex-direction: column; /* Xáº¿p chá»“ng Navbar vÃ  Main Content */
  min-height: 100vh;
}

/* --- THANH NAVBAR TRÃŠN CÃ™NG --- */
.top-navbar {
  height: var(--header-height);
  width: 100%;
  background-color: #ffffff;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  padding: 0 20px;
  
  /* --- Quan trá»ng: Giá»¯ thanh menu cá»‘ Ä‘á»‹nh khi cuá»™n --- */
  position: sticky;
  top: 0;
  z-index: 1000;
}

.navbar-brand {
  color: var(--text-color);
  margin-right: auto; /* Äáº©y cÃ¡c icon menu vá» bÃªn pháº£i */
}

.nav-items {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  gap: 15px; /* Khoáº£ng cÃ¡ch giá»¯a cÃ¡c icon */
}

.nav-items li a {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px;
  text-decoration: none;
  color: #555;
  border-radius: 8px;
  transition: background-color var(--transition-speed);
}

.nav-items li a:hover {
  background-color: #f1f1f1;
}

/* ThÃªm style cho má»¥c menu Ä‘ang Ä‘Æ°á»£c chá»n (active) */
.nav-items li a.active {
  background-color: var(--primary-color);
  color: #ffffff;
}

.nav-icon {
  font-size: 24px; /* KÃ­ch thÆ°á»›c icon to, rÃµ rÃ ng */
}

/* --- Ná»˜I DUNG CHÃNH --- */
.main-content {
  flex-grow: 1;
  padding: 20px;
  background-color: var(--bg-color);
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

/* --- Báº¢NG products-table (ÄÆ¡n giáº£n) --- */
.products-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.products-table th,
.products-table td {
  border: 1px solid var(--border-color);
  padding: 12px 15px;
  text-align: left;
}

.products-table th {
  background-color: var(--bg-color);
  font-weight: bold;
}

.products-table tbody tr:nth-of-type(even) {
  background-color: #f8f9fa;
}

.products-table tbody tr:hover {
  background-color: #e9ecef;
}

/* src/styles/AdminLayout.css */

/* --- Báº¢NG inventory-table (PHIÃŠN Báº¢N HOÃ€N CHá»ˆNH Má»šI) --- */
.inventory-table {
  width: 100%;
  border-collapse: collapse;
}

.inventory-table th, .inventory-table td {
  padding: 12px 15px;
  border-bottom: 1px solid var(--border-color);
  border-right: 1px solid var(--border-color);
  white-space: nowrap; /* Giá»¯ ná»™i dung trÃªn má»™t dÃ²ng theo máº·c Ä‘á»‹nh */
  vertical-align: middle;
}

/* THAY Äá»”I: ThÃªm quy táº¯c má»›i Ä‘á»ƒ cho phÃ©p tiÃªu Ä‘á» cá»™t 1 xuá»‘ng dÃ²ng */
.inventory-table th:nth-child(1) {
  white-space: normal;
}

.inventory-table th {
  background-color: #f8f9fa;
  position: sticky;
  top: 0;
  z-index: 2;
}

.inventory-table td {
  background-color: #ffffff;
}
.inventory-table tbody tr:hover td {
  background-color: #e9ecef;
}
.inventory-table tbody tr.selected-row td {
  background-color: #d6eaff !important;
}

/* CÃ¡c cá»™t Ä‘Æ°á»£c ghim (sticky) */
.inventory-table th:nth-child(1), .inventory-table td:nth-child(1) { position: sticky; left: 0; z-index: 1; }
.inventory-table th:nth-child(2), .inventory-table td:nth-child(2) { position: sticky; left: 90px; z-index: 1; } /* THAY Äá»”I: Cáº­p nháº­t vá»‹ trÃ­ left */
.inventory-table th:nth-child(3), .inventory-table td:nth-child(3) { position: sticky; left: 240px; z-index: 1; } /* THAY Äá»”I: Cáº­p nháº­t vá»‹ trÃ­ left */

.inventory-table th:nth-child(1), .inventory-table th:nth-child(2), .inventory-table th:nth-child(3) { z-index: 3; }

.inventory-table td:nth-child(1), .inventory-table td:nth-child(2), .inventory-table td:nth-child(3) { background-color: #ffffff; }
.inventory-table tbody tr:hover td:nth-child(1), .inventory-table tbody tr:hover td:nth-child(2), .inventory-table tbody tr:hover td:nth-child(3) { background-color: #e9ecef; }
.inventory-table tbody tr.selected-row td:nth-child(1), .inventory-table tbody tr:selected-row td:nth-child(2), .inventory-table tbody tr.selected-row td:nth-child(3) { background-color: #d6eaff !important; }

/* --- ÄIá»€U CHá»ˆNH Láº I Äá»˜ Rá»˜NG CÃC Cá»˜T --- */
.inventory-table th:nth-child(1), .inventory-table td:nth-child(1) { min-width: 90px; } /* THAY Äá»”I: Giáº£m tá»« 110px -> NgÃ y nháº­p */
.inventory-table th:nth-child(2), .inventory-table td:nth-child(2) { min-width: 140px; } /* MÃ£ hÃ ng */
.inventory-table th:nth-child(3), .inventory-table td:nth-child(3) { min-width: 280px; white-space: normal; text-align: left;} /* TÃªn hÃ ng (xuá»‘ng dÃ²ng, cÄƒn trÃ¡i) */
.inventory-table th:nth-child(4), .inventory-table td:nth-child(4) { min-width: 150px; } /* Sá»‘ lÃ´ */
.inventory-table th:nth-child(5), .inventory-table td:nth-child(5) { min-width: 120px; } /* HSD */
.inventory-table th:nth-child(6), .inventory-table td:nth-child(6) { min-width: 80px; }  /* ÄVT */
.inventory-table th:nth-child(7), .inventory-table td:nth-child(7) { min-width: 150px; white-space: normal; } /* Quy cÃ¡ch (xuá»‘ng dÃ²ng) */
.inventory-table th:nth-child(8), .inventory-table td:nth-child(8) { min-width: 100px; } /* SL Nháº­p */
.inventory-table th:nth-child(9), .inventory-table td:nth-child(9) { min-width: 100px; font-weight: bold; } /* SL CÃ²n láº¡i */
.inventory-table th:nth-child(10),.inventory-table td:nth-child(10){ min-width: 200px; white-space: normal; } /* Ghi chÃº */
.inventory-table th:nth-child(11),.inventory-table td:nth-child(11){ min-width: 150px; } /* Nhiá»‡t Ä‘á»™ BQ */
.inventory-table th:nth-child(12),.inventory-table td:nth-child(12){ min-width: 180px; white-space: normal; } /* HÃ£ng SX */
.inventory-table th:nth-child(13),.inventory-table td:nth-child(13){ min-width: 120px; } /* Team */

/* --- MODAL (POPUP) --- */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1010; /* TÄƒng z-index Ä‘á»ƒ ná»•i trÃªn navbar */
}

.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  width: 500px;
  max-width: 90%;
  display: flex;
  flex-direction: column;
  max-height: 90vh;
}

.modal-content h2 {
  margin-top: 0;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.modal-body {
  flex-grow: 1;
  overflow-y: auto;
  padding: 10px 0;
}

/* --- BUTTONS & FORMS --- */
.btn-primary {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}
.btn-primary:hover {
  opacity: 0.9;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}
.btn-secondary:hover {
  opacity: 0.9;
}

.action-buttons {
  display: flex;
  gap: 10px;
}

.btn-icon {
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  font-size: 18px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.btn-edit { color: #007bff; }
.btn-edit:hover { background-color: #e7f3ff; }

.btn-delete { color: #dc3545; }
.btn-delete:hover { background-color: #fbebee; }

.btn-confirm { color: #28a745; }
.btn-confirm:hover { background-color: #eaf6ec; }

.btn-view { color: #17a2b8; }
.btn-view:hover { background-color: #e8f6f8; }

.form-section {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form-row {
  display: flex;
  gap: 20px;
}

.form-row .form-group {
  flex: 1;
}

.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 14px;
}
.form-group select {
  background-color: white;
}

.page-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
  gap: 10px;
}

/* --- GRID NHáº¬P LIá»†U --- */
.item-details-grid, .item-details-grid-edit {
  display: grid;
  gap: 10px;
  background-color: #fff;
  padding: 10px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
}

.item-details-grid {
  grid-template-columns: 1fr 2fr 1.1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 1.5fr 1fr;
}

.item-details-grid-edit {
  grid-template-columns: 1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr auto;
}

.grid-header {
  font-weight: bold;
  padding-bottom: 10px;
  border-bottom: 2px solid var(--border-color);
}

.grid-cell {
  padding: 5px 0;
  display: flex;
  align-items: center;
}

.grid-cell input,
.grid-cell textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.grid-cell textarea {
  resize: vertical;
  min-height: 38px;
}

.grid-cell input[readOnly],
.grid-cell textarea[readOnly] {
  background-color: #f0f0f0;
  cursor: not-allowed;
}

/* --- Bá»˜ Lá»ŒC & TRáº NG THÃI --- */
.status-badge {
  padding: 5px 10px;
  border-radius: 15px;
  font-size: 12px;
  color: white;
  font-weight: bold;
}

.status-pending {
  background-color: #ffc107;
  color: #333;
}

.status-completed {
  background-color: #28a745;
}

.status-cancelled {
  background-color: #6c757d;
}

.filters-container {
  background-color: #fff;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

.filter-group {
  display: flex;
  gap: 10px;
  align-items: center;
}

.filter-group button {
  background-color: #ffffff;
  border: 1px solid #adb5bd;
  color: #495057;
  padding: 8px 15px;
  border-radius: 20px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
}

.filter-group button:hover {
  background-color: #e9ecef;
  border-color: #495057;
}

.filter-group button.active {
  background-color: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.inventory-table td {
  text-align: center;
}

.inventory-table td:nth-child(3) {
  text-align: left;
}

/* --- CSS Má»šI: CHO Cáº¢NH BÃO Háº N Sá»¬ Dá»¤NG (DÃ¹ng chung, bá» gáº¡ch ngang) --- */

/* Ãp dá»¥ng mÃ u cho cÃ¡c Ã´ cá»§a dÃ²ng cÃ³ class tÆ°Æ¡ng á»©ng */
tr.near-expiry-yellow td { background-color: #fff3cd !important; color: #5a5a5a !important; }
tr.near-expiry-orange td { background-color: #ffe8cc !important; color: #5a5a5a !important; }
tr.near-expiry-red td { background-color: #f8d7da !important; color: #5a5a5a !important; }
tr.expired-black td { background-color: #212529 !important; color: #fff !important; }

/* In Ä‘áº­m chá»¯ cho cÃ¡c dÃ²ng cáº£nh bÃ¡o */
tr.near-expiry-yellow td,
tr.near-expiry-orange td,
tr.near-expiry-red td {
    font-weight: 500;
}

tr.expired-black td {
    font-weight: bold;
}

/* Äáº£m báº£o mÃ u hover váº«n hoáº¡t Ä‘á»™ng */
tbody tr:hover td {
  background-color: #d6eaff !important;
  color: #000 !important; /* Äáº£m báº£o chá»¯ luÃ´n Ä‘á»c Ä‘Æ°á»£c khi hover */
}

/* DÃ²ng Ä‘Æ°á»£c chá»n cÃ³ mÃ u Æ°u tiÃªn cao nháº¥t */
tbody tr.selected-row td {
  background-color: #cce5ff !important;
  color: #000 !important;
}

/* --- BADGES (TEAM & TEMP) --- */
.team-badge {
  display: inline-flex; /* Chuyá»ƒn sang inline-flex Ä‘á»ƒ cÄƒn giá»¯a ná»™i dung */
  align-items: center; /* CÄƒn giá»¯a theo chiá»u dá»c */
  justify-content: center; /* CÄƒn giá»¯a theo chiá»u ngang */
  padding: 5px 10px;
  border-radius: 15px; /* Bo trÃ²n hÆ¡n má»™t chÃºt */
  font-size: 12px;
  font-weight: 500;
  color: #fff;
  line-height: 1.2; /* TÄƒng khoáº£ng cÃ¡ch dÃ²ng cho dá»… Ä‘á»c khi xuá»‘ng dÃ²ng */
  min-height: 38px; /* Äáº·t chiá»u cao tá»‘i thiá»ƒu Ä‘á»ƒ chá»©a Ä‘Æ°á»£c 2 dÃ²ng */
  box-sizing: border-box; /* Äáº£m báº£o padding khÃ´ng lÃ m tÄƒng kÃ­ch thÆ°á»›c */
}
.team-badge.team-med { background-color: #007bff; }
.team-badge.team-bio { background-color: #28a745; }
.team-badge.team-sparepart { background-color: #6c757d; }

.temp-badge {
  padding: 4px 10px;
  border-radius: 4px;
  font-size: 13px;
  font-weight: 500;
  display: inline-block;
}
.temp-badge.temp-cool { background-color: #a7d9f2; color: #0056b3; }
.temp-badge.temp-frozen { background-color: #c9b6e7; color: #4a148c; }
.temp-badge.temp-room { background-color: #b3e6b3; color: #28a745; }
.temp-badge.temp-other { background-color: #ced4da; color: #343a40; border: 1px solid #adb5bd; }

/* --- TÃŒM KIáº¾M & Bá»˜ Lá»ŒC --- */
.controls-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 20px;
}

.search-container {
  flex-grow: 1;
  max-width: 400px;
}

.search-input {
  width: 100%;
  padding: 10px 15px;
  font-size: 14px;
  border-radius: 20px;
  border: 1px solid #dee2e6;
  outline: none;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.search-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

.filters-container {
  margin-bottom: 0;
  box-shadow: none;
  padding: 0;
  background-color: transparent;
}

/* --- DROPDOWN Sá» LÃ” (FEFO) --- */
.lot-option-near-expiry { background-color: #ffe08a; color: #333; }
.lot-option-expired { background-color: #ef9a9a; color: #fff; font-weight: bold; text-decoration: line-through; }

/* --- HIá»‚N THá»Š LÃ” ÄÃƒ CHá»ŒN --- */
.selected-lot-view {
  display: flex;
  align-items: center;
  width: 100%;
  height: 38px;
}

.selected-lot-input {
  width: calc(100% - 38px); 
  height: 100%;
  border-right: none !important;
  border-radius: 4px 0 0 4px !important;
  background-color: #e9ecef !important;
  margin: 0 !important;
  box-sizing: border-box;
}

.change-lot-btn {
  width: 38px;
  height: 100%;
  border: 1px solid #ced4da;
  border-left: none;
  border-radius: 0 4px 4px 0;
  background: #f8f9fa;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 !important;
  margin: 0 !important;
  box-sizing: border-box;
}

.change-lot-btn svg {
  width: 16px;
  height: 16px;
  color: #495057;
}

.change-lot-btn:hover {
  background-color: #e2e6ea;
}

/* --- GIAO DIá»†N XEM CHI TIáº¾T NHá»Ž Gá»ŒN --- */
.compact-info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 0px 20px;
  border: 1px solid var(--border-color);
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 10px;
}

.compact-info-grid div {
  margin-bottom: 5px;
}

.compact-info-grid label {
  font-size: 13px;
  color: #6c757d;
  margin: 0;
}

.compact-info-grid p {
  margin: 0;
  font-size: 15px;
}

.compact-info-grid .info-description {
  grid-column: 1 / -1;
  margin-top: 5px;
}

/* CSS Má»šI: Cho há»™p thÃ´ng tin lÃ´ hÃ ng Ä‘Ã£ tá»“n táº¡i */
.existing-lot-info {
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 12px;
  color: #004085; /* MÃ u chá»¯ xanh Ä‘áº­m */
  background-color: #cce5ff; /* MÃ u ná»n xanh nháº¡t */
  padding: 5px 8px;
  border-radius: 4px;
  margin-top: 5px;
  width: 100%;
  border: 1px solid #b8daff;
}

/* CSS CHO GIAO DIá»†N Tá»’N KHO Tá»”NG Há»¢P */
.lot-details-row td {
    padding: 0 !important;
    background-color: #fff !important;
    border-top: none !important;
}

.lot-details-container {
    padding: 15px 20px 15px 50px; /* Thá»¥t vÃ o Ä‘á»ƒ táº¡o cáº¥p báº­c */
    background-color: #fdfdfe;
}

.lot-details-container h4 {
    margin: 0 0 10px 0;
    font-weight: 500;
}

.lot-details-container ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.lot-details-container li {
    display: flex;
    gap: 20px;
    padding: 8px;
    border-radius: 4px;
    background-color: #e9ecef;
    font-size: 14px;
}

/* CÄ‚N CHá»ˆNH Báº¢NG Tá»’N KHO Tá»”NG Há»¢P (PHIÃŠN Báº¢N Má»šI) */

/* 1. CÄƒn giá»¯a lÃ m máº·c Ä‘á»‹nh cho táº¥t cáº£ cÃ¡c Ã´ trong báº£ng */
.products-table th,
.products-table td {
    text-align: center;
    vertical-align: middle; /* CÄƒn giá»¯a theo chiá»u dá»c */
}

/* 2. Ghi Ä‘Ã¨, chá»‰ cÄƒn trÃ¡i cho cá»™t TÃªn hÃ ng */
.products-table th:nth-child(3),
.products-table td:nth-child(3) {
    text-align: left;
}

/* 3. PhÃ¢n bá»• láº¡i Ä‘á»™ rá»™ng cÃ¡c cá»™t */

/* Cá»™t mÅ©i tÃªn (siÃªu nhá») */
.products-table th:nth-child(1), .products-table td:nth-child(1) { width: 4%; }

/* MÃ£ hÃ ng (nhá») */
.products-table th:nth-child(2) { width: 10%; }

/* TÃªn hÃ ng (thu nhá» láº¡i) */
.products-table th:nth-child(3) {
    width: 28%;
    max-width: 350px;
}
.products-table td:nth-child(3) {
    max-width: 350px;
    white-space: normal;
    word-wrap: break-word;
}

/* Tá»•ng tá»“n (nhá») */
.products-table th:nth-child(4) { width: 8%; }

/* ÄVT (nhá») */
.products-table th:nth-child(5) { width: 8%; }

/* Quy cÃ¡ch (TÄ‚NG KÃCH THÆ¯á»šC) */
.products-table th:nth-child(6) {
    width: 12%;
}
.products-table td:nth-child(6) {
    white-space: normal;
    word-wrap: break-word;
}

/* Nhiá»‡t Ä‘á»™ BQ (TÄ‚NG KÃCH THÆ¯á»šC) */
.products-table th:nth-child(7) {
    width: 12%;
}
.products-table td:nth-child(7) {
    white-space: normal;
    word-wrap: break-word;
}

/* HÃ£ng SX (vá»«a pháº£i) */
.products-table th:nth-child(8) { width: 10%; }

/* Team (THU NHá»Ž Láº I vÃ  cho phÃ©p xuá»‘ng dÃ²ng) */
.products-table th:nth-child(9) {
    width: 8%;
}
.products-table td:nth-child(9) {
    white-space: normal;
    word-wrap: break-word;
}

/* CSS Má»šI: Cho mÃ u ná»n cá»§a tá»«ng lÃ´ hÃ ng con */
.lot-item {
    transition: background-color 0.2s; /* Hiá»‡u á»©ng chuyá»ƒn mÃ u mÆ°á»£t mÃ  */
}

/* LÃ´ bÃ¬nh thÆ°á»ng cÃ³ mÃ u ná»n máº·c Ä‘á»‹nh */
.lot-item {
    background-color: #e9ecef;
}

/* CÃ¡c lÃ´ cÃ³ cáº£nh bÃ¡o sáº½ cÃ³ mÃ u riÃªng */
.lot-item.lot-item-yellow {
    background-color: #fff3cd;
    border-left: 3px solid #ffeeba;
}
.lot-item.lot-item-orange {
    background-color: #ffe8cc;
    border-left: 3px solid #ffd8b8;
}
.lot-item.lot-item-red {
    background-color: #f8d7da;
    border-left: 3px solid #f5c6cb;
}
.lot-item.lot-item-expired {
    background-color: #d6d8db;
    border-left: 3px solid #c6c8ca;
    font-weight: bold;
}

/* --- CSS CHO GIAO DIá»†N RESPONSIVE TRÃŠN DI Äá»˜NG --- */
@media (max-width: 768px) {
    /* Pháº§n nÃ y Ã¡p dá»¥ng cho cáº£ 2 báº£ng:
      - Báº£ng tá»“n kho chi tiáº¿t (inventory-table)
      - Báº£ng tá»“n kho tá»•ng há»£p (products-table)
    */

    /* BÆ°á»›c 1: áº¨n Ä‘i pháº§n tiÃªu Ä‘á» (thead) cá»§a báº£ng gá»‘c */
    .inventory-table thead,
    .products-table thead {
        display: none;
    }

    /* BÆ°á»›c 2: Biáº¿n báº£ng vÃ  cÃ¡c dÃ²ng thÃ nh cÃ¡c khá»‘i card riÃªng biá»‡t */
    .inventory-table, 
    .inventory-table tbody, 
    .inventory-table tr,
    .products-table,
    .products-table tbody,
    .products-table tr {
        display: block;
        width: 100%;
    }

    .inventory-table tr,
    .products-table tr {
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        padding: 10px;
    }

    /* BÆ°á»›c 3: Biáº¿n cÃ¡c Ã´ (td) thÃ nh cÃ¡c hÃ ng dá»c vÃ  thÃªm nhÃ£n cho chÃºng */
    .inventory-table td,
    .products-table td {
        display: flex;
        justify-content: space-between; /* Äáº©y nhÃ£n vÃ  giÃ¡ trá»‹ vá» 2 phÃ­a */
        align-items: center;
        padding: 8px 5px;
        border: none;
        border-bottom: 1px solid #eee;
        text-align: right; /* CÄƒn pháº£i cho giÃ¡ trá»‹ */
        white-space: normal; /* Cho phÃ©p giÃ¡ trá»‹ dÃ i tá»± xuá»‘ng dÃ²ng */
    }

    .inventory-table td:last-child,
    .products-table td:last-child {
        border-bottom: none;
    }
    
    /* ÄÃ¢y lÃ  pháº§n quan trá»ng nháº¥t: Láº¥y ná»™i dung tá»« attribute 'data-label' lÃ m nhÃ£n */
    .inventory-table td::before,
    .products-table td::before {
        content: attr(data-label);
        font-weight: bold;
        text-align: left; /* CÄƒn trÃ¡i cho nhÃ£n */
        padding-right: 10px;
        color: #333;
    }
    
    /* Loáº¡i bá» cÃ¡c style khÃ´ng cáº§n thiáº¿t trÃªn di Ä‘á»™ng */
    .inventory-table td,
    .inventory-table th {
        position: static !important; /* Bá» Ä‘Ã³ng bÄƒng cá»™t */
        min-width: auto !important;
    }

    /* Äiá»u chá»‰nh láº¡i cho cÃ¡c Ã´ chá»©a badge Ä‘á»ƒ hiá»ƒn thá»‹ Ä‘áº¹p hÆ¡n */
    .inventory-table td .team-badge,
    .inventory-table td .temp-badge {
       font-size: 13px;
    }
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\DashboardPage.css ---


/* src/styles/DashboardPage.css */

.dashboard-container {
  padding: 20px;
}

.cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.dashboard-card {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  padding: 20px;
  border-left: 5px solid;
}

.card-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 24px;
  margin-right: 20px;
}

.card-info {
  display: flex;
  flex-direction: column;
}

.card-title {
  color: #6c757d;
  font-size: 14px;
  margin-bottom: 5px;
}

.card-value {
  color: #343a40;
  font-size: 28px;
  font-weight: bold;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\print.css ---


/* src/styles/print.css (PhiÃªn báº£n HoÃ n Chá»‰nh) */

@media print {
  @page {
    size: landscape;
    margin: 5mm; /* YÃŠU Cáº¦U: Giáº£m lá» trang in xuá»‘ng 5mm */
  }

  body {
    -webkit-print-color-adjust: exact !important;
    color-adjust: exact !important;
  }

  body * { visibility: hidden; }
  .printable-area, .printable-area * { visibility: visible; }

  .printable-area {
    position: absolute;
    left: 0;
    top: 0;
    width: 100% !important;
    max-width: none !important;
    border: none !important;
    box-shadow: none !important;
  }
  
  .printable-area .modal-actions { display: none; }
  
  .printable-area h2 {
    text-align: center;
    font-size: 24px;
    margin-bottom: 25px;
  }
  .printable-area .compact-info-grid {
    border: none;
    padding: 0;
    font-size: 14px;
    margin-bottom: 25px;
  }
  .printable-area .compact-info-grid label { font-size: 13px; }
  .printable-area .compact-info-grid p { font-size: 15px; }

  /* --- Äá»ŠNH Dáº NG Báº¢NG --- */
  .printable-area .products-table {
    margin-top: 20px;
    table-layout: fixed; 
    width: 100%;
    font-size: 14px;
    border-collapse: collapse;
  }

  .printable-area .products-table th,
  .printable-area .products-table td {
    border: 1px solid #333;
    padding: 10px;
    word-wrap: break-word; 
    vertical-align: middle;
    text-align: center; /* YÃŠU Cáº¦U: CÄƒn giá»¯a lÃ m máº·c Ä‘á»‹nh */
  }
  
  .printable-area .products-table th {
    background-color: #f2f2f2 !important;
    font-weight: bold;
  }

  /* YÃŠU Cáº¦U: Chá»‰ cÄƒn lá» trÃ¡i cho ná»™i dung cá»™t "TÃªn hÃ ng" */
  .printable-area .products-table td:nth-child(2) { 
    text-align: left; 
  }

  /* TÃ´ Ä‘áº­m cÃ¡c Ã´ dá»¯ liá»‡u quan trá»ng */
  .printable-area .products-table td:nth-child(1),
  .printable-area .products-table td:nth-child(3),
  .printable-area .products-table td:nth-child(7) { 
    font-weight: bold;
  }
  
  /* --- PHÃ‚N Bá»” Láº I CHIá»€U Rá»˜NG Cá»˜T --- */
  .printable-area .products-table th:nth-child(1) { width: 10%; } /* MÃ£ hÃ ng */
  .printable-area .products-table th:nth-child(2) { width: 26%; } /* TÃªn hÃ ng */
  .printable-area .products-table th:nth-child(3) { width: 12%; } /* Sá»‘ lÃ´ */
  .printable-area .products-table th:nth-child(4) { width: 10%; } /* HSD */
  .printable-area .products-table th:nth-child(5) { width: 8%; }  /* ÄVT */
  .printable-area .products-table th:nth-child(6) { width: 15%; } /* Quy cÃ¡ch */
  .printable-area .products-table th:nth-child(7) { width: 9%; }  /* SL xuáº¥t (Rá»™ng hÆ¡n) */
  .printable-area .products-table th:nth-child(8) { width: 10%; } /* Nhiá»‡t Ä‘á»™ BQ */

  /* YÃŠU Cáº¦U: Háº¡n cháº¿ tá»‘i Ä‘a viá»‡c xuá»‘ng dÃ²ng á»Ÿ cÃ¡c cá»™t dá»¯ liá»‡u ngáº¯n */
  .printable-area .products-table td:nth-child(1),
  .printable-area .products-table td:nth-child(3),
  .printable-area .products-table td:nth-child(4),
  .printable-area .products-table td:nth-child(5),
  .printable-area .products-table td:nth-child(7) {
      white-space: nowrap;
  }

  /* --- CSS CHO IN PHIáº¾U KIá»‚M KÃŠ --- */
@media print {
    .printable-stocktake-area {
        visibility: visible !important;
        display: block !important;
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
    }

    body * {
        visibility: hidden;
    }

    .printable-stocktake-area * {
        visibility: visible;
    }
    
    @page {
        size: landscape;
        margin: 5mm;
    }
}
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\StocktakePage.css ---


/* src/styles/StocktakePage.css */

/* áº¨n khu vá»±c dÃ¹ng Ä‘á»ƒ in ra khá»i mÃ n hÃ¬nh hiá»ƒn thá»‹ thÃ´ng thÆ°á»ng */
.printable-stocktake-area {
    display: none;
}

/* Máº·c Ä‘á»‹nh, áº©n giao diá»‡n tháº» trÃªn mÃ n hÃ¬nh lá»›n */
.stocktake-card-container {
    display: none;
}

/* --- GIAO DIá»†N Dáº NG THáºº CHO ÄIá»†N THOáº I --- */
@media (max-width: 768px) {
    /* áº¨n giao diá»‡n báº£ng trÃªn mÃ n hÃ¬nh nhá» */
    .stocktake-table-container {
        display: none;
    }

    /* Hiá»ƒn thá»‹ giao diá»‡n tháº» */
    .stocktake-card-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .stocktake-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 15px;
        border-left: 5px solid var(--primary-color);
    }

    .stocktake-card .card-header {
        margin-bottom: 10px;
    }

    .stocktake-card .card-product-id {
        font-weight: bold;
        font-size: 16px;
        color: var(--text-color);
        display: block;
    }
    .stocktake-card .card-product-name {
        font-size: 14px;
        color: #555;
    }

    .stocktake-card .card-info-row {
        display: flex;
        justify-content: space-between;
        font-size: 13px;
        color: #666;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 10px;
    }

    .stocktake-card .card-count-area {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .stocktake-card .count-box {
        flex: 1;
    }

    .stocktake-card .count-box label {
        font-size: 12px;
        color: #555;
        margin-bottom: 4px;
        display: block;
    }
    
    .stocktake-card .system-count p {
        font-size: 20px;
        font-weight: bold;
        color: var(--text-color);
        margin: 0;
        padding: 8px;
    }

    .stocktake-card .actual-count input {
        width: 100%;
        padding: 8px;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
        border: 1px solid var(--border-color);
        border-radius: 5px;
    }

    .stocktake-card .card-footer-info {
        font-size: 12px;
        color: #666;
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid var(--border-color);
    }
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\utils\dateUtils.js ---


// src/utils/dateUtils.js

/**
 * Chuyá»ƒn Ä‘á»•i má»™t Ä‘á»‘i tÆ°á»£ng Firebase Timestamp hoáº·c Date thÃ nh chuá»—i dd/mm/yyyy.
 * @param {object | Date} timestamp - Äá»‘i tÆ°á»£ng Timestamp cá»§a Firebase hoáº·c Ä‘á»‘i tÆ°á»£ng Date.
 * @returns {string} - Chuá»—i ngÃ y thÃ¡ng Ä‘Ã£ Ä‘á»‹nh dáº¡ng hoáº·c chuá»—i rá»—ng.
 */
export const formatDate = (timestamp) => {
  if (!timestamp) return '';
  const date = timestamp.toDate ? timestamp.toDate() : timestamp;
  
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

/**
 * Chuyá»ƒn Ä‘á»•i má»™t chuá»—i dd/mm/yyyy thÃ nh Ä‘á»‘i tÆ°á»£ng Date.
 * @param {string} dateString - Chuá»—i ngÃ y thÃ¡ng theo Ä‘á»‹nh dáº¡ng dd/mm/yyyy.
 * @returns {Date | null} - Äá»‘i tÆ°á»£ng Date hoáº·c null náº¿u Ä‘á»‹nh dáº¡ng sai.
 */
export const parseDateString = (dateString) => {
  if (!dateString) return null;
  try {
    const parts = dateString.split('/');
    if (parts.length !== 3) return null;
    const [day, month, year] = parts;
    return new Date(year, month - 1, day);
  } catch (error) {
    console.error("Lá»—i Ä‘á»‹nh dáº¡ng ngÃ y thÃ¡ng:", dateString, error);
    return null;
  }
};

/**
 * HÃ€M Má»šI: Äá»‹nh dáº¡ng má»™t chuá»—i sá»‘ thÃ nh Ä‘á»‹nh dáº¡ng ngÃ y dd/mm/yyyy khi ngÆ°á»i dÃ¹ng gÃµ.
 * @param {string} value - GiÃ¡ trá»‹ tá»« Ã´ input.
 * @returns {string} - Chuá»—i Ä‘Ã£ Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng.
 */
export const formatExpiryDate = (value) => {
    if (!value) return '';

    // 1. Chá»‰ giá»¯ láº¡i cÃ¡c kÃ½ tá»± sá»‘
    const digitsOnly = value.replace(/\D/g, '');

    // 2. Giá»›i háº¡n tá»‘i Ä‘a 8 kÃ½ tá»± (ddmmyyyy)
    const truncatedDigits = digitsOnly.slice(0, 8);
    const len = truncatedDigits.length;

    // 3. Ãp dá»¥ng Ä‘á»‹nh dáº¡ng dá»±a trÃªn Ä‘á»™ dÃ i
    if (len <= 2) {
        return truncatedDigits; // GÃµ tá»›i ngÃ y (dd)
    }
    if (len <= 4) {
        // GÃµ tá»›i thÃ¡ng (dd/mm)
        return `${truncatedDigits.slice(0, 2)}/${truncatedDigits.slice(2)}`;
    }
    // GÃµ tá»›i nÄƒm (dd/mm/yyyy)
    return `${truncatedDigits.slice(0, 2)}/${truncatedDigits.slice(2, 4)}/${truncatedDigits.slice(4)}`;
};




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\App.css ---


/* src/App.css */

/* Class má»›i nÃ y chá»‰ dÃ¹ng Ä‘á»ƒ cÄƒn giá»¯a trang Ä‘Äƒng nháº­p */
.login-page-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

/* CÃ¡c style cho form Ä‘Äƒng nháº­p, giá»¯ nguyÃªn nhÆ° cÅ© */
.login-container {
  padding: 40px;
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 350px;
}

.login-container h2 {
  text-align: center;
  margin-bottom: 24px;
  color: #333;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
  color: #555;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

button {
  width: 100%;
  padding: 12px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  font-size: 16px;
  cursor: pointer;
  margin-top: 10px;
}

button:hover {
  background-color: #0056b3;
}

.logout-button {
  background-color: #dc3545;
  margin-top: 20px;
}

.logout-button:hover {
  background-color: #c82333;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\App.jsx ---


// src/App.jsx
import React, { useState, useEffect } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth, db } from './firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import LoginPage from './components/LoginPage';
import AdminLayout from './components/AdminLayout';
import ViewerLayout from './components/ViewerLayout';
import './App.css';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function App() {
  const [user, setUser] = useState(null);
  const [userRole, setUserRole] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        const userDocRef = doc(db, 'users', currentUser.uid);
        const userDocSnap = await getDoc(userDocRef);
        if (userDocSnap.exists()) {
          setUserRole(userDocSnap.data().role);
        } else {
          setUserRole(null); 
        }
      } else {
        setUser(null);
        setUserRole(null);
      }
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  if (loading) {
    return <div>Äang táº£i...</div>;
  }
  
  return (
    <BrowserRouter>
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />

      {user ? (
        <Routes>
          {userRole === 'owner' ? (
            <Route path="/*" element={<AdminLayout />} />
          ) : (
            <Route path="/*" element={<Navigate to="/view" />} />
          )}
          <Route path="/view/*" element={<ViewerLayout user={user} userRole={userRole} />} />
        </Routes>
      ) : (
        <div className="login-page-wrapper">
          <LoginPage />
        </div>
      )}
    </BrowserRouter>
  );
}

export default App;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\firebaseConfig.js ---


// src/firebaseConfig.js

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

// == THÃ”NG TIN Cáº¤U HÃŒNH FIREBASE Cá»¦A Báº N ==
const firebaseConfig = {
  apiKey: "AIzaSyDLnv85ipAXZ4IXCIKMNFpQgZQCy_uF3PY",
  authDomain: "kho-ptbiomed.firebaseapp.com",
  projectId: "kho-ptbiomed",
  storageBucket: "kho-ptbiomed.appspot.com",
  messagingSenderId: "41298806902",
  appId: "1:41298806902:web:7adb67dd5ee55918887757"
};

// Khá»Ÿi táº¡o á»©ng dá»¥ng Firebase
const app = initializeApp(firebaseConfig);

// Xuáº¥t ra cÃ¡c dá»‹ch vá»¥ Ä‘á»ƒ sá»­ dá»¥ng trong toÃ n bá»™ á»©ng dá»¥ng
export const db = getFirestore(app);      // Dá»‹ch vá»¥ cÆ¡ sá»Ÿ dá»¯ liá»‡u Firestore
export const auth = getAuth(app);         // Dá»‹ch vá»¥ xÃ¡c thá»±c ngÆ°á»i dÃ¹ng



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\index.css ---


/* src/index.css */

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f0f2f5; /* ThÃªm má»™t mÃ u ná»n xÃ¡m nháº¡t cho toÃ n bá»™ trang */
}

* {
  box-sizing: border-box;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\main.jsx ---


import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'
import './styles/print.css'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)




