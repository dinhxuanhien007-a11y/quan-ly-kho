--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddNewLotModal.jsx ---


// src/components/AddNewLotModal.jsx
import React, { useState } from 'react';
import { formatExpiryDate, parseDateString } from '../utils/dateUtils'; // ThÃªm parseDateString
import { toast } from 'react-toastify';

const AddNewLotModal = ({ productId, productName, lotNumber, onClose, onSave }) => {
    const [expiryDate, setExpiryDate] = useState('');

    const handleSave = () => {
        const parsedDate = parseDateString(expiryDate); // PhÃ¢n tÃ­ch chuá»—i ngÃ y thÃ¡ng
        if (!parsedDate) { // Kiá»ƒm tra xem ngÃ y cÃ³ há»£p lá»‡ khÃ´ng
            toast.warn('Vui lÃ²ng nháº­p Háº¡n Sá»­ Dá»¥ng há»£p lá»‡ (dd/mm/yyyy).');
            return;
        }
        onSave(expiryDate);
    };

    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSave();
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <h2>Khai BÃ¡o LÃ´ HÃ ng Má»›i</h2>
                <div className="form-group">
                    <label>MÃ£ hÃ ng</label>
                    <input type="text" value={`${productId} - ${productName}`} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Sá»‘ lÃ´ má»›i</label>
                    <input type="text" value={lotNumber} readOnly disabled />
                </div>
                <div className="form-group">
                    <label>Háº¡n Sá»­ Dá»¥ng (dd/mm/yyyy) (*)</label>
                    <input
                        type="text"
                        value={expiryDate}
                        onChange={(e) => setExpiryDate(e.target.value)}
                        onBlur={handleExpiryDateBlur}
                        onKeyDown={handleKeyDown}
                        placeholder="Nháº­p HSD cho lÃ´ má»›i..."
                        autoFocus
                    />
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                    <button type="button" onClick={handleSave} className="btn-primary">XÃ¡c nháº­n</button>
                </div>
            </div>
        </div>
    );
};

export default AddNewLotModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddNewProductAndLotModal.jsx ---


// src/components/AddNewProductAndLotModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import { TEMP_OPTIONS, MANUFACTURER_OPTIONS, UNIT_OPTIONS } from '../constants'; // <-- THÃŠM DÃ’NG NÃ€Y

const AddNewProductAndLotModal = ({ productId, onClose, onSave }) => {
    const [productName, setProductName] = useState('');
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('MED');
    const [isSaving, setIsSaving] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!productName || !lotNumber || !unit) {
            toast.warn('Vui lÃ²ng Ä‘iá»n cÃ¡c thÃ´ng tin báº¯t buá»™c: TÃªn hÃ ng, Sá»‘ lÃ´, ÄVT.');
            return;
        }
        setIsSaving(true);
        const newProductData = {
            productName, unit, packaging, storageTemp, manufacturer, team,
        };
        try {
            const productRef = doc(db, 'products', productId);
            await setDoc(productRef, newProductData);
            onSave({
                ...newProductData, productId, lotNumber, expiryDate, quantity: '', notes: '',
            });
            toast.success("Táº¡o sáº£n pháº©m vÃ  lÃ´ hÃ ng má»›i thÃ nh cÃ´ng!");
        } catch (error) {
            console.error("Lá»—i khi táº¡o sáº£n pháº©m má»›i: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi táº¡o sáº£n pháº©m.');
        } finally {
            setIsSaving(false);
        }
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{width: '600px'}}>
                <h2>Táº¡o Nhanh Sáº£n Pháº©m Má»›i</h2>
                <p>MÃ£ hÃ ng <strong>{productId}</strong> chÆ°a tá»“n táº¡i. Vui lÃ²ng cung cáº¥p thÃ´ng tin chi tiáº¿t.</p>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ hÃ ng (ID)</label>
                        <input type="text" value={productId} readOnly disabled />
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>TÃªn hÃ ng (*)</label>
                            <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} required />
                        </div>
                        <div className="form-group">
                            <label>Team</label>
                            <select value={team} onChange={(e) => setTeam(e.target.value)}>
                                <option value="MED">MED</option>
                                <option value="BIO">BIO</option>
                                <option value="Spare Part">Spare Part</option>
                            </select>
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Sá»‘ lÃ´ (*)</label>
                            <input type="text" value={lotNumber} onChange={(e) => setLotNumber(e.target.value)} required />
                        </div>
                        <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={(e) => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>ÄÆ¡n vá»‹ tÃ­nh (*)</label>
                            <input
                                list="unit-options"
                                value={unit}
                                onChange={(e) => setUnit(e.target.value)}
                                required
                                placeholder="Chá»n hoáº·c nháº­p ÄVT..."
                            />
                            <datalist id="unit-options">
                                {UNIT_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
                            <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
                        </div>
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
                            <input
                                list="temp-options"
                                value={storageTemp}
                                onChange={(e) => setStorageTemp(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p nhiá»‡t Ä‘á»™..."
                            />
                            <datalist id="temp-options">
                                {TEMP_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                        <div className="form-group">
                            <label>HÃ£ng sáº£n xuáº¥t</label>
                            <input
                                list="manufacturer-options"
                                value={manufacturer}
                                onChange={(e) => setManufacturer(e.target.value)}
                                placeholder="Chá»n hoáº·c nháº­p hÃ£ng SX..."
                            />
                            <datalist id="manufacturer-options">
                                {MANUFACTURER_OPTIONS.map(opt => <option key={opt} value={opt} />)}
                            </datalist>
                        </div>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u vÃ  Chá»n'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddNewProductAndLotModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddPartnerModal.jsx ---


// src/components/AddPartnerModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const AddPartnerModal = ({ onClose, onPartnerAdded }) => {
    const [partnerId, setPartnerId] = useState('');
    const [partnerName, setPartnerName] = useState('');
    const [partnerType, setPartnerType] = useState('supplier'); // Máº·c Ä‘á»‹nh lÃ  nhÃ  cung cáº¥p
    const [isSaving, setIsSaving] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!partnerId || !partnerName) {
            toast.warn('MÃ£ vÃ  TÃªn Ä‘á»‘i tÃ¡c khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.');
            return;
        }
        setIsSaving(true);
        try {
            const newPartnerData = { partnerName, partnerType };
            const partnerRef = doc(db, 'partners', partnerId.toUpperCase());
            await setDoc(partnerRef, newPartnerData);

            toast.success('ThÃªm Ä‘á»‘i tÃ¡c má»›i thÃ nh cÃ´ng!');
            onPartnerAdded();
        } catch (error) {
            console.error("Lá»—i khi thÃªm Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi thÃªm Ä‘á»‘i tÃ¡c.');
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>ThÃªm Äá»‘i TÃ¡c Má»›i</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ Äá»‘i TÃ¡c (ID)</label>
                        <input type="text" value={partnerId} onChange={(e) => setPartnerId(e.target.value)} required />
                    </div>
                    <div className="form-group">
                        <label>TÃªn Äá»‘i TÃ¡c</label>
                        <input type="text" value={partnerName} onChange={(e) => setPartnerName(e.target.value)} required />
                    </div>
                    <div className="form-group">
                        <label>PhÃ¢n Loáº¡i</label>
                        <select value={partnerType} onChange={(e) => setPartnerType(e.target.value)}>
                            <option value="supplier">NhÃ  Cung Cáº¥p</option>
                            <option value="customer">KhÃ¡ch HÃ ng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddPartnerModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddProductModal.jsx ---


// src/components/AddProductModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';
import { TEMP_OPTIONS, MANUFACTURER_OPTIONS, UNIT_OPTIONS } from '../constants'; // <-- THÃŠM DÃ’NG NÃ€Y

const AddProductModal = ({ onClose, onProductAdded }) => {
  const [productId, setProductId] = useState('');
  const [productName, setProductName] = useState('');
  const [unit, setUnit] = useState('');
  const [packaging, setPackaging] = useState('');
  const [storageTemp, setStorageTemp] = useState('');
  const [manufacturer, setManufacturer] = useState('');
  const [team, setTeam] = useState('MED');
  const [isSaving, setIsSaving] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!productId) {
      toast.warn('MÃ£ hÃ ng khÃ´ng Ä‘Æ°á»£c Ä‘á»ƒ trá»‘ng.');
      return;
    }
    setIsSaving(true);
    try {
      const newProductData = {
        productName,
        unit,
        packaging,
        storageTemp,
        manufacturer,
        team,
      };
      const productRef = doc(db, 'products', productId);
      await setDoc(productRef, newProductData);

      toast.success('ThÃªm sáº£n pháº©m má»›i thÃ nh cÃ´ng!');
      onProductAdded();
    } catch (error) {
      console.error("Lá»—i khi thÃªm sáº£n pháº©m: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi thÃªm sáº£n pháº©m.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>ThÃªm sáº£n pháº©m má»›i</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-row">
            <div className="form-group">
              <label>MÃ£ hÃ ng (ID)</label>
              <input type="text" value={productId} onChange={(e) => setProductId(e.target.value.toUpperCase())} required />
            </div>
            <div className="form-group">
              <label>TÃªn hÃ ng</label>
              <input type="text" value={productName} onChange={(e) => setProductName(e.target.value)} required />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>ÄÆ¡n vá»‹ tÃ­nh</label>
              <input
                list="unit-options-add"
                value={unit}
                onChange={(e) => setUnit(e.target.value)}
                required
                placeholder="Chá»n hoáº·c nháº­p ÄVT..."
              />
              <datalist id="unit-options-add">
                {UNIT_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
              <input type="text" value={packaging} onChange={(e) => setPackaging(e.target.value)} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
              <input
                list="temp-options-add"
                value={storageTemp}
                onChange={(e) => setStorageTemp(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p nhiá»‡t Ä‘á»™..."
              />
              <datalist id="temp-options-add">
                  {TEMP_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
            <div className="form-group">
              <label>HÃ£ng sáº£n xuáº¥t</label>
              <input
                list="manufacturer-options-add"
                value={manufacturer}
                onChange={(e) => setManufacturer(e.target.value)}
                placeholder="Chá»n hoáº·c nháº­p hÃ£ng SX..."
              />
              <datalist id="manufacturer-options-add">
                  {MANUFACTURER_OPTIONS.map(opt => <option key={opt} value={opt} />)}
              </datalist>
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select value={team} onChange={(e) => setTeam(e.target.value)}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Äang lÆ°u...' : 'LÆ°u'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProductModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AddUnlistedItemModal.jsx ---


// src/components/AddUnlistedItemModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import { formatExpiryDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const AddUnlistedItemModal = ({ onClose, onAddItem }) => {
    const [productId, setProductId] = useState('');
    const [productName, setProductName] = useState('');
    const [isNewProduct, setIsNewProduct] = useState(false);
    const [lotNumber, setLotNumber] = useState('');
    const [expiryDate, setExpiryDate] = useState('');
    const [countedQty, setCountedQty] = useState('');
    const [unit, setUnit] = useState('');
    const [packaging, setPackaging] = useState('');
    const [storageTemp, setStorageTemp] = useState('');
    const [manufacturer, setManufacturer] = useState('');
    const [team, setTeam] = useState('');

    const handleProductSearch = async () => {
        if (!productId) return;
        const productRef = doc(db, 'products', productId.trim());
        const productSnap = await getDoc(productRef);
        if (productSnap.exists()) {
            const data = productSnap.data();
            setProductName(data.productName);
            setUnit(data.unit);
            setPackaging(data.packaging);
            setStorageTemp(data.storageTemp || '');
            setManufacturer(data.manufacturer || '');
            setTeam(data.team || '');
            setIsNewProduct(false);
        } else {
            setProductName('');
            setUnit('');
            setPackaging('');
            setStorageTemp('');
            setManufacturer('');
            setTeam('');
            setIsNewProduct(true);
            toast.warn("MÃ£ hÃ ng nÃ y khÃ´ng tá»“n táº¡i. Vui lÃ²ng nháº­p TÃªn hÃ ng má»›i.");
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!productId || !countedQty || (!productName && isNewProduct)) {
            toast.warn("Vui lÃ²ng Ä‘iá»n Ä‘áº§y Ä‘á»§ MÃ£ hÃ ng vÃ  Sá»‘ lÆ°á»£ng Ä‘áº¿m.");
            return;
        }
        
        onAddItem({
            productId: productId.trim(),
            productName: productName,
            lotNumber: lotNumber.trim() || 'N/A',
            expiryDate: expiryDate,
            unit: unit,
            packaging: packaging,
            systemQty: 0,
            countedQty: Number(countedQty),
            lotId: `new_${productId.trim()}_${lotNumber.trim() || Date.now()}`,
            isNew: true,
            storageTemp: storageTemp,
            manufacturer: manufacturer,
            team: team,
        });
    };
    
    const handleExpiryDateBlur = (e) => {
        setExpiryDate(formatExpiryDate(e.target.value));
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>ThÃªm HÃ ng NgoÃ i Danh SÃ¡ch</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>MÃ£ hÃ ng (Báº¯t buá»™c)</label>
                        <input type="text" value={productId} onChange={e => setProductId(e.target.value)} onBlur={handleProductSearch} required />
                    </div>
                    <div className="form-group">
                        <label>TÃªn hÃ ng</label>
                        <input type="text" value={productName} onChange={e => setProductName(e.target.value)} readOnly={!isNewProduct} required={isNewProduct} />
                    </div>
                    <div className="form-row">
                        <div className="form-group">
                            <label>Sá»‘ lÃ´</label>
                            <input type="text" value={lotNumber} onChange={e => setLotNumber(e.target.value)} />
                        </div>
                        <div className="form-group">
                            <label>HSD (dd/mm/yyyy)</label>
                            <input 
                                type="text" 
                                value={expiryDate} 
                                onChange={e => setExpiryDate(e.target.value)} 
                                onBlur={handleExpiryDateBlur}
                                placeholder="dd/mm/yyyy" 
                            />
                        </div>
                    </div>
                    <div className="form-group">
                        <label>Sá»‘ lÆ°á»£ng Ä‘áº¿m thá»±c táº¿ (Báº¯t buá»™c)</label>
                        <input type="number" value={countedQty} onChange={e => setCountedQty(e.target.value)} required />
                    </div>
                    
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary">Há»§y</button>
                        <button type="submit" className="btn-primary">ThÃªm vÃ o Phiáº¿u</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default AddUnlistedItemModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\AdminLayout.jsx ---


// src/components/AdminLayout.jsx

import React from 'react';
import Navbar from './Navbar';
import '../styles/AdminLayout.css';
import { Routes, Route } from 'react-router-dom';
import DashboardPage from '../pages/DashboardPage';
import ProductsPage from '../pages/ProductsPage';
import PartnersPage from '../pages/PartnersPage';
import NewImportPage from '../pages/NewImportPage';
import ImportListPage from '../pages/ImportListPage';
import NewExportPage from '../pages/NewExportPage';
import ExportListPage from '../pages/ExportListPage';
import StocktakeListPage from '../pages/StocktakeListPage';
import StocktakeSessionPage from '../pages/StocktakeSessionPage'; // Import trang má»›i
import LotTracePage from '../pages/LotTracePage';
import DataImportPage from '../pages/DataImportPage';
import TestPage from '../pages/TestPage';

const AdminLayout = () => {
  return (
    <div className="admin-layout-horizontal">
      <Navbar />
      <main className="main-content">
        <Routes>
          <Route path="/" element={<DashboardPage />} />
          <Route path="/products" element={<ProductsPage />} />
          <Route path="/partners" element={<PartnersPage />} />
          <Route path="/new-import" element={<NewImportPage />} />
          <Route path="/new-export" element={<NewExportPage />} />
          <Route path="/imports" element={<ImportListPage />} />
          <Route path="/exports" element={<ExportListPage />} />
          {/* Cáº­p nháº­t Ä‘Æ°á»ng dáº«n cho Kiá»ƒm KÃª Kho */}
          <Route path="/stocktakes" element={<StocktakeListPage />} />
          <Route path="/stocktakes/:sessionId" element={<StocktakeSessionPage />} /> {/* Route má»›i cho trang chi tiáº¿t */}
          <Route path="/lot-trace" element={<LotTracePage />} />
          <Route path="/import-data" element={<DataImportPage />} />
          <Route path="/test" element={<TestPage />} />
        </Routes>
      </main>
    </div>
  );
};

export default AdminLayout;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ConfirmationModal.jsx ---


// src/components/ConfirmationModal.jsx
import React from 'react';
import { FiAlertTriangle } from 'react-icons/fi';

const ConfirmationModal = ({ isOpen, title, message, onConfirm, onCancel, confirmText = 'XÃ¡c nháº­n', cancelText = 'Há»§y' }) => {
    if (!isOpen) return null;

    return (
        <div className="modal-backdrop">
            <div className="modal-content" style={{ width: '450px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                    <div style={{ color: '#f59e0b', fontSize: '32px' }}>
                        <FiAlertTriangle />
                    </div>
                    <div>
                        <h2 style={{ marginTop: 0, marginBottom: '10px' }}>{title}</h2>
                        <p style={{ margin: 0 }}>{message}</p>
                    </div>
                </div>
                <div className="modal-actions" style={{ marginTop: '25px' }}>
                    <button type="button" onClick={onCancel} className="btn-secondary">{cancelText}</button>
                    <button type="button" onClick={onConfirm} className="btn-primary" style={{ backgroundColor: '#dc3545' }}>{confirmText}</button>
                </div>
            </div>
        </div>
    );
};

export default ConfirmationModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\CreateStocktakeModal.jsx ---


// src/components/CreateStocktakeModal.jsx
import React, { useState } from 'react';
import { toast } from 'react-toastify';

// *** PHIÃŠN Báº¢N Sá»¬A Lá»–I ***
const CreateStocktakeModal = ({ onClose, onCreate, isCreating }) => {
    const [sessionName, setSessionName] = useState('');
    const [scope, setScope] = useState('all');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!sessionName) {
            toast.warn('Vui lÃ²ng Ä‘áº·t tÃªn cho phiÃªn kiá»ƒm kÃª.');
            return;
        }
        onCreate({ sessionName, scope });
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Táº¡o PhiÃªn Kiá»ƒm KÃª Má»›i</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>TÃªn PhiÃªn Kiá»ƒm KÃª</label>
                        <input
                            type="text"
                            value={sessionName}
                            onChange={(e) => setSessionName(e.target.value)}
                            placeholder="VÃ­ dá»¥: Kiá»ƒm kÃª cuá»‘i nÄƒm 2025"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>Pháº¡m vi kiá»ƒm kÃª</label>
                        <select value={scope} onChange={(e) => setScope(e.target.value)}>
                            <option value="all">ToÃ n bá»™ kho</option>
                            <option value="MED">Chá»‰ Team MED</option>
                            <option value="BIO">Chá»‰ Team BIO</option>
                            <option value="Spare Part">Chá»‰ Team Spare Part</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isCreating}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isCreating}>
                            {isCreating ? 'Äang táº¡o...' : 'Báº¯t Ä‘áº§u'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default CreateStocktakeModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditExportSlipModal.jsx ---


// src/components/EditExportSlipModal.jsx

import React, { useState } from 'react';
import { FiXCircle } from 'react-icons/fi';
import { toast } from 'react-toastify'; // Import toast

const EditExportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });

  // *** PHIÃŠN Báº¢N Sá»¬A Lá»–I ***
  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    if (field === 'quantityToExport') {
      const numericValue = Number(value);
      // LÆ°á»£ng xuáº¥t ban Ä‘áº§u trÃªn phiáº¿u khi chÆ°a sá»­a
      const originalExportedQty = slip.items[index].quantityToExport || slip.items[index].quantityExported;
      // LÆ°á»£ng tá»“n kho kháº£ dá»¥ng = lÆ°á»£ng cÃ²n láº¡i trong kho + lÆ°á»£ng Ä‘Ã£ khai bÃ¡o xuáº¥t ban Ä‘áº§u
      const availableStock = updatedItems[index].quantityRemaining + originalExportedQty;
      
      if (numericValue < 0) return; // Cháº·n sá»‘ Ã¢m
      
      // Kiá»ƒm tra vá»›i lÆ°á»£ng tá»“n kho kháº£ dá»¥ng
      if (numericValue > availableStock) {
        toast.warn(`Sá»‘ lÆ°á»£ng xuáº¥t (${numericValue}) khÃ´ng thá»ƒ vÆ°á»£t quÃ¡ tá»“n kho hiá»‡n cÃ³ (${availableStock}).`);
        updatedItems[index][field] = availableStock;
      } else {
        updatedItems[index][field] = numericValue;
      }
    } else {
      updatedItems[index][field] = value;
    }
    
    setSlipData({ ...slipData, items: updatedItems });
  };

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    const finalSlipData = {
        ...slipData,
        items: slipData.items.filter(item => item.productId && Number(item.quantityToExport) > 0)
    };
    onSave(finalSlipData);
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chá»‰nh sá»­a Phiáº¿u Xuáº¥t Kho (ID: {slipData.id})</h2>

        <h3>Chi tiáº¿t hÃ ng hÃ³a</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 1.5fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          <div className="grid-header">MÃ£ hÃ ng</div>
          <div className="grid-header">TÃªn hÃ ng</div>
          <div className="grid-header">Sá»‘ lÃ´</div>
          <div className="grid-header">ÄVT</div>
          <div className="grid-header">Quy cÃ¡ch</div>
          <div className="grid-header">SL Xuáº¥t</div>
          <div className="grid-header">Ghi chÃº</div>
          <div className="grid-header">Thao tÃ¡c</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={item.id || index}>
              <div className="grid-cell"><input type="text" value={item.productId} readOnly title="KhÃ´ng thá»ƒ sá»­a MÃ£ hÃ ng á»Ÿ Ä‘Ã¢y" /></div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} readOnly title="KhÃ´ng thá»ƒ sá»­a LÃ´ hÃ ng á»Ÿ Ä‘Ã¢y" /></div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell">
                <input 
                  type="number" 
                  value={item.quantityToExport} 
                  onChange={e => handleItemChange(index, 'quantityToExport', e.target.value)} 
                />
              </div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">ÄÃ³ng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">LÆ°u thay Ä‘á»•i</button>
        </div>
      </div>
    </div>
  );
};

export default EditExportSlipModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditImportSlipModal.jsx ---


// src/components/EditImportSlipModal.jsx
import React, { useState, useRef, useEffect } from 'react'; // <-- THÃŠM Má»šI: import useRef, useEffect
import { FiPlusCircle, FiXCircle } from 'react-icons/fi';
import { formatExpiryDate } from '../utils/dateUtils';

const EditImportSlipModal = ({ slip, onClose, onSave }) => {
  const [slipData, setSlipData] = useState({ ...slip });
  // <-- THÃŠM Má»šI: Ref Ä‘á»ƒ tham chiáº¿u Ä‘áº¿n input cuá»‘i cÃ¹ng
  const lastInputRef = useRef(null);

  // <-- THÃŠM Má»šI: useEffect Ä‘á»ƒ focus vÃ o input cá»§a dÃ²ng má»›i Ä‘Æ°á»£c thÃªm
  useEffect(() => {
    if (lastInputRef.current) {
        lastInputRef.current.focus();
    }
  }, [slipData.items.length]); // Cháº¡y má»—i khi sá»‘ lÆ°á»£ng dÃ²ng thay Ä‘á»•i


  const handleExpiryDateBlur = (index, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index].expiryDate = formatExpiryDate(value);
    setSlipData({ ...slipData, items: updatedItems });
  };

  const handleItemChange = (index, field, value) => {
    const updatedItems = [...slipData.items];
    updatedItems[index][field] = value;
    setSlipData({ ...slipData, items: updatedItems });
  };

  const addNewRow = () => {
    const newItems = [
      ...slipData.items,
      {
        id: Date.now(),
        productId: '', productName: '', lotNumber: '', expiryDate: '',
        unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: ''
      }
    ];
    setSlipData({ ...slipData, items: newItems });
  };

  const removeRow = (indexToRemove) => {
    const newItems = slipData.items.filter((_, index) => index !== indexToRemove);
    setSlipData({ ...slipData, items: newItems });
  };

  const handleSaveChanges = () => {
    onSave(slipData);
  };
  return (
    <div className="modal-backdrop">
      <div className="modal-content" style={{ width: '90vw', maxWidth: '1200px' }}>
        <h2>Chá»‰nh sá»­a Phiáº¿u Nháº­p Kho (ID: {slipData.id})</h2>
        <h3>Chi tiáº¿t hÃ ng hÃ³a</h3>
        <div className="item-details-grid" style={{ gridTemplateColumns: '1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
          {/* ... grid headers ... */}
          <div className="grid-header">MÃ£ hÃ ng</div>
          <div className="grid-header">TÃªn hÃ ng</div>
          <div className="grid-header">Sá»‘ lÃ´</div>
          <div className="grid-header">HSD</div>
          <div className="grid-header">ÄVT</div>
          <div className="grid-header">Quy cÃ¡ch</div>
          <div className="grid-header">Sá»‘ lÆ°á»£ng</div>
          <div className="grid-header">Ghi chÃº</div>
          <div className="grid-header">Thao tÃ¡c</div>

          {slipData.items.map((item, index) => (
            <React.Fragment key={index}>
              <div className="grid-cell">
                <input 
                    type="text" 
                    value={item.productId} 
                    onChange={e => handleItemChange(index, 'productId', e.target.value)} 
                    // <-- THAY Äá»”I: GÃ¡n ref cho Ã´ input cá»§a dÃ²ng cuá»‘i cÃ¹ng
                    ref={index === slipData.items.length - 1 ? lastInputRef : null}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
              <div className="grid-cell"><input type="text" value={item.lotNumber} onChange={e => handleItemChange(index, 'lotNumber', e.target.value)} /></div>
              <div className="grid-cell">
                <input 
                    type="text" 
                    placeholder="dd/mm/yyyy" 
                    value={item.expiryDate} 
                    onChange={e => handleItemChange(index, 'expiryDate', e.target.value)} 
                    onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                />
              </div>
              <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
              <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
              <div className="grid-cell"><input type="number" value={item.quantity} onChange={e => handleItemChange(index, 'quantity', e.target.value)} /></div>
              <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
              <div className="grid-cell">
                <button type="button" className="btn-icon btn-delete" onClick={() => removeRow(index)}>
                  <FiXCircle />
                </button>
              </div>
            </React.Fragment>
          ))}
        </div>

        <button type="button" onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>
          <FiPlusCircle style={{ marginRight: '5px' }} />
          ThÃªm dÃ²ng
        </button>

        <div className="modal-actions">
          <button type="button" onClick={onClose} className="btn-secondary">ÄÃ³ng</button>
          <button type="button" onClick={handleSaveChanges} className="btn-primary">LÆ°u thay Ä‘á»•i</button>
        </div>
      </div>
    </div>
  );
};

export default EditImportSlipModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditPartnerModal.jsx ---


// src/components/EditPartnerModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const EditPartnerModal = ({ onClose, onPartnerUpdated, partnerToEdit }) => {
    const [partnerData, setPartnerData] = useState({ ...partnerToEdit });
    const [isSaving, setIsSaving] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setPartnerData(prevData => ({ ...prevData, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSaving(true);
        try {
            const partnerDocRef = doc(db, 'partners', partnerToEdit.id);
            await updateDoc(partnerDocRef, {
                partnerName: partnerData.partnerName,
                partnerType: partnerData.partnerType,
            });
            toast.success('Cáº­p nháº­t thÃ´ng tin Ä‘á»‘i tÃ¡c thÃ nh cÃ´ng!');
            onPartnerUpdated();
        } catch (error) {
            console.error("Lá»—i khi cáº­p nháº­t Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content">
                <h2>Sá»­a ThÃ´ng Tin Äá»‘i TÃ¡c</h2>
                <p><strong>MÃ£ Äá»‘i TÃ¡c:</strong> {partnerToEdit.id}</p>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>TÃªn Äá»‘i TÃ¡c</label>
                        <input type="text" name="partnerName" value={partnerData.partnerName || ''} onChange={handleChange} required />
                    </div>
                    <div className="form-group">
                        <label>PhÃ¢n Loáº¡i</label>
                        <select name="partnerType" value={partnerData.partnerType} onChange={handleChange}>
                            <option value="supplier">NhÃ  Cung Cáº¥p</option>
                            <option value="customer">KhÃ¡ch HÃ ng</option>
                        </select>
                    </div>
                    <div className="modal-actions">
                        <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
                        <button type="submit" className="btn-primary" disabled={isSaving}>
                            {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default EditPartnerModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\EditProductModal.jsx ---


// src/components/EditProductModal.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';

const EditProductModal = ({ onClose, onProductUpdated, productToEdit }) => {
  const [productData, setProductData] = useState({ ...productToEdit });
  const [isSaving, setIsSaving] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProductData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true);
    try {
      const productDocRef = doc(db, 'products', productToEdit.id);
      await updateDoc(productDocRef, productData);
      toast.success('Cáº­p nháº­t sáº£n pháº©m thÃ nh cÃ´ng!');
      onProductUpdated();
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t sáº£n pháº©m: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t sáº£n pháº©m.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>Sá»­a thÃ´ng tin sáº£n pháº©m</h2>
        <p><strong>MÃ£ hÃ ng:</strong> {productToEdit.id}</p>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>TÃªn hÃ ng</label>
            <input type="text" name="productName" value={productData.productName || ''} onChange={handleChange} required />
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>ÄÆ¡n vá»‹ tÃ­nh</label>
              <input type="text" name="unit" value={productData.unit || ''} onChange={handleChange} required />
            </div>
            <div className="form-group">
              <label>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</label>
              <input type="text" name="packaging" value={productData.packaging || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-row">
            <div className="form-group">
              <label>Nhiá»‡t Ä‘á»™ báº£o quáº£n</label>
              <input type="text" name="storageTemp" value={productData.storageTemp || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>HÃ£ng sáº£n xuáº¥t</label>
              <input type="text" name="manufacturer" value={productData.manufacturer || ''} onChange={handleChange} />
            </div>
          </div>
          <div className="form-group">
            <label>Team</label>
            <select name="team" value={productData.team} onChange={handleChange}>
              <option value="MED">MED</option>
              <option value="BIO">BIO</option>
              <option value="Spare Part">Spare Part</option>
            </select>
          </div>
          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn-secondary" disabled={isSaving}>Há»§y</button>
            <button type="submit" className="btn-primary" disabled={isSaving}>
              {isSaving ? 'Äang lÆ°u...' : 'LÆ°u thay Ä‘á»•i'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditProductModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\HomePage.jsx ---


// src/components/HomePage.jsx

import React from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../firebaseConfig';

function HomePage({ user }) {
  // THAY THáº¾ CONSOLE.LOG CÅ¨ Báº°NG 4 DÃ’NG NÃ€Y
  console.log('--- DEBUGGING HOMEPAGE ---');
  console.log('ToÃ n bá»™ object user:', user);
  console.log('GiÃ¡ trá»‹ cá»§a user.email lÃ :', user?.email);
  console.log('Kiá»ƒu dá»¯ liá»‡u cá»§a user.email lÃ :', typeof user?.email);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      console.log('ÄÄƒng xuáº¥t thÃ nh cÃ´ng!');
    } catch (error) {
      console.error('Lá»—i Ä‘Äƒng xuáº¥t:', error);
    }
  };

  return (
    <div className="homepage-container">
      <h1>ChÃ o má»«ng trá»Ÿ láº¡i, {user?.email}!</h1>
      <p>ÄÃ¢y lÃ  trang quáº£n trá»‹ kho cá»§a báº¡n.</p>
      <button onClick={handleLogout} className="logout-button">
        ÄÄƒng xuáº¥t
      </button>
    </div>
  );
}

export default HomePage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\InventoryFilters.jsx ---


// src/components/InventoryFilters.jsx
import React from 'react';

const InventoryFilters = ({ userRole, onFilterChange, activeFilters }) => {
    
  const handleTeamFilter = (team) => {
    if (activeFilters.team === team) {
      onFilterChange('team', 'all');
    } else {
      onFilterChange('team', team);
    }
  };

  const handleDateFilter = (status) => {
    if (activeFilters.dateStatus === status) {
      onFilterChange('dateStatus', 'all');
    } else {
      onFilterChange('dateStatus', status);
    }
  };

  return (
    <div className="filters-container">
      {/* Bá»™ lá»c theo Team */}
      {/* Chá»‰ hiá»ƒn thá»‹ bá»™ lá»c team náº¿u lÃ  admin, owner, hoáº·c bio */}
      {(userRole === 'admin' || userRole === 'owner' || userRole === 'bio') && (
        <div className="filter-group">
          {/* Chá»‰ admin/owner má»›i tháº¥y nÃºt lá»c MED vÃ  BIO */}
          {(userRole === 'admin' || userRole === 'owner') && (
            <>
              <button
                className={activeFilters.team === 'MED' ? 'active' : ''}
                onClick={() => handleTeamFilter('MED')}
              >
                Lá»c hÃ ng MED
              </button>
              <button
                className={activeFilters.team === 'BIO' ? 'active' : ''}
                onClick={() => handleTeamFilter('BIO')}
              >
                Lá»c hÃ ng BIO
              </button>
            </>
          )}
          
          {/* Admin/owner vÃ  bio Ä‘á»u tháº¥y nÃºt nÃ y */}
          <button
            className={activeFilters.team === 'Spare Part' ? 'active' : ''}
            onClick={() => handleTeamFilter('Spare Part')}
          >
            Lá»c hÃ ng Spare Part
          </button>
        </div>
      )}
      
      {/* Bá»™ lá»c theo HSD */}
      <div className="filter-group">
        <button
          className={activeFilters.dateStatus === 'near_expiry' ? 'active' : ''}
          onClick={() => handleDateFilter('near_expiry')}
        >
          Lá»c hÃ ng cáº­n date (&lt;120 ngÃ y)
        </button>
        <button
          className={activeFilters.dateStatus === 'expired' ? 'active' : ''}
          onClick={() => handleDateFilter('expired')}
        >
          Lá»c hÃ ng Ä‘Ã£ háº¿t HSD
        </button>
      </div>
    </div>
  );
};

export default InventoryFilters;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LoginPage.jsx ---


// src/components/LoginPage.jsx
import React, { useState } from 'react';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../firebaseConfig';
import { toast } from 'react-toastify';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      console.log('ÄÄƒng nháº­p thÃ nh cÃ´ng!', userCredential.user);
      toast.success('ÄÄƒng nháº­p thÃ nh cÃ´ng!');
    } catch (error) {
      console.error('Lá»—i Ä‘Äƒng nháº­p:', error.code, error.message);
      toast.error('Sai email hoáº·c máº­t kháº©u. Vui lÃ²ng thá»­ láº¡i!');
    }
  };

  return (
    <div className="login-container">
      <h2>ÄÄƒng Nháº­p Há»‡ Thá»‘ng</h2>
      <form onSubmit={handleLogin}>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>Máº­t kháº©u</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">ÄÄƒng nháº­p</button>
      </form>
    </div>
  );
}

export default LoginPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\LotJourneyExplorer.jsx ---


// src/components/LotJourneyExplorer.jsx

import React, { useMemo } from 'react';
import ReactFlow, { Background, Controls } from 'reactflow';
import 'reactflow/dist/style.css';

const processDataForFlow = (importRecords, exportHistory) => {
    const initialNodes = [];
    const initialEdges = [];

    if (importRecords.length === 0) {
        return { initialNodes, initialEdges };
    }

    const masterInfo = importRecords[0];
    const totalImported = importRecords.reduce((sum, rec) => sum + rec.quantityImported, 0);

    const supplierName = masterInfo.supplier || 'KhÃ´ng rÃµ';
    initialNodes.push({
        id: 'supplier-node',
        data: { label: `NhÃ  Cung Cáº¥p: ${supplierName}`, type: 'supplier', name: supplierName },
        position: { x: 0, y: 150 },
        style: { background: '#fde68a', borderColor: '#ca8a04', whiteSpace: 'pre-wrap' },
    });

    initialNodes.push({
        id: 'lot-node',
        data: { label: `LÃ´: ${masterInfo.lotNumber}\nTá»•ng nháº­p: ${totalImported}`, type: 'lot' },
        position: { x: 300, y: 150 },
        style: { background: '#a5b4fc', borderColor: '#4338ca', width: 180, whiteSpace: 'pre-wrap' },
    });
    
    initialEdges.push({
        id: 'edge-supplier-lot',
        source: 'supplier-node',
        target: 'lot-node',
        animated: true,
        label: `${totalImported} ${masterInfo.unit}`,
    });

    const customerNodes = {};
    exportHistory.forEach(exp => {
        if (!customerNodes[exp.customer]) {
            customerNodes[exp.customer] = { name: exp.customer, total: 0 };
        }
        customerNodes[exp.customer].total += exp.quantityExported;
    });

    const outputNodes = Object.values(customerNodes);
    const totalRemaining = totalImported - exportHistory.reduce((sum, rec) => sum + rec.quantityExported, 0);
    if (totalRemaining > 0) {
        outputNodes.push({ name: 'Tá»“n Kho', total: totalRemaining });
    }
    
    outputNodes.forEach((nodeItem, index) => {
        const yPos = index * 120;
        const nodeId = nodeItem.name.replace(/\s+/g, '-').toLowerCase();

        initialNodes.push({
            id: nodeId,
            data: { 
                label: `${nodeItem.name}\nSá»‘ lÆ°á»£ng: ${nodeItem.total}`, 
                type: nodeItem.name === 'Tá»“n Kho' ? 'stock' : 'customer',
                name: nodeItem.name
            },
            position: { x: 600, y: yPos },
            style: { 
                background: nodeItem.name === 'Tá»“n Kho' ? '#d1d5db' : '#6ee7b7',
                borderColor: nodeItem.name === 'Tá»“n Kho' ? '#4b5563' : '#047857',
                whiteSpace: 'pre-wrap'
            },
        });

        initialEdges.push({
            id: `edge-lot-${nodeId}`,
            source: 'lot-node',
            target: nodeId,
            label: `${nodeItem.total} ${masterInfo.unit}`,
        });
    });

    return { initialNodes, initialEdges };
};

const LotJourneyExplorer = ({ importRecords, exportHistory, onNodeClick, onPaneClick }) => {
    const { initialNodes, initialEdges } = useMemo(
        () => processDataForFlow(importRecords, exportHistory),
        [importRecords, exportHistory]
    );

    if (initialNodes.length === 0) {
        return null;
    }
    
    return (
        <div style={{ height: '500px', border: '1px solid #eee', borderRadius: '8px' }}>
            <ReactFlow
                nodes={initialNodes}
                edges={initialEdges}
                fitView
                onNodeClick={onNodeClick}
                onPaneClick={onPaneClick}
            >
                <Background />
                <Controls /> 
            </ReactFlow>
        </div>
    );
};

export default LotJourneyExplorer;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Navbar.jsx ---


// src/components/Navbar.jsx

import React from 'react';
import { NavLink } from 'react-router-dom';
// --- THAY Äá»”I: IMPORT Bá»˜ ICON Má»šI ---
import { 
    FiGrid, 
    FiArchive, 
    FiFilePlus,   // Icon má»›i cho Táº¡o Phiáº¿u Nháº­p
    FiFileMinus,  // Icon má»›i cho Táº¡o Phiáº¿u Xuáº¥t
    FiClipboard, 
    FiFileText, 
    FiShare2, 
    FiCheckSquare,
    FiTool, 
    FiUsers,
    FiBookOpen,
    FiUpload,
} from 'react-icons/fi';
import '../styles/AdminLayout.css';

const Navbar = () => {
  return (
    <nav className="top-navbar">
      <div className="navbar-brand">
        <h3>Kho PT Biomed</h3>
      </div>
      <ul className="nav-items">
        <li>
          <NavLink to="/view" title="Xem Sá»• CÃ¡i Tá»“n Kho">
            <FiBookOpen className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/" title="Báº£ng Ä‘iá»u khiá»ƒn">
            <FiGrid className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/products" title="Quáº£n lÃ½ hÃ ng hÃ³a">
            <FiArchive className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/partners" title="Quáº£n lÃ½ Äá»‘i tÃ¡c"><FiUsers className="nav-icon" /></NavLink> {/* <-- LINK Má»šI */}
        </li>
        {/* --- THAY Äá»”I: ICON Táº O PHIáº¾U NHáº¬P --- */}
        <li>
          <NavLink to="/new-import" title="Táº¡o Phiáº¿u Nháº­p">
            <FiFilePlus className="nav-icon" />
          </NavLink>
        </li>
        {/* --- THAY Äá»”I: ICON Táº O PHIáº¾U XUáº¤T --- */}
        <li>
          <NavLink to="/new-export" title="Táº¡o Phiáº¿u Xuáº¥t">
            <FiFileMinus className="nav-icon" />
          </NavLink>
        </li>
        {/* --- THAY Äá»”I: ICON DANH SÃCH PHIáº¾U NHáº¬P --- */}
        <li>
          <NavLink to="/imports" title="Danh sÃ¡ch Phiáº¿u Nháº­p">
            <FiClipboard className="nav-icon" />
          </NavLink>
        </li>
        {/* --- THAY Äá»”I: ICON DANH SÃCH PHIáº¾U XUáº¤T --- */}
        <li>
          <NavLink to="/exports" title="Danh sÃ¡ch Phiáº¿u Xuáº¥t">
            <FiFileText className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/stocktakes" title="Kiá»ƒm KÃª Kho">
            <FiCheckSquare className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/lot-trace" title="Truy Váº¿t LÃ´ HÃ ng">
            <FiShare2 className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/import-data" title="Import Dá»¯ Liá»‡u">
            <FiUpload className="nav-icon" />
          </NavLink>
        </li>
        <li>
          <NavLink to="/test" title="Trang Test">
            <FiTool className="nav-icon" />
          </NavLink>
        </li>
      </ul>
    </nav>
  );
};

export default Navbar;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Sidebar.jsx ---


// src/components/Sidebar.jsx

import React, { useState } from 'react';
// Cáº¬P NHáº¬T: Thay Ä‘á»•i bá»™ icon cho phÃ¹ há»£p
import { FiHome, FiArchive, FiPlusCircle, FiMinusCircle, FiFileText, FiChevronsLeft, FiChevronsRight } from 'react-icons/fi';
import { NavLink } from 'react-router-dom';
import '../styles/AdminLayout.css';

const Sidebar = () => {
  const [collapsed, setCollapsed] = useState(false);

  return (
    <div className={collapsed ? "sidebar collapsed" : "sidebar"}>
      <div className="sidebar-header">
        <h2 className="logo">{collapsed ? "K" : "Kho PT Biomed"}</h2>
        <button className="toggle-btn" onClick={() => setCollapsed(!collapsed)}>
          {collapsed ? <FiChevronsRight /> : <FiChevronsLeft />}
        </button>
      </div>
      <ul className="menu-items">
        <li>
          <NavLink to="/">
            <FiHome className="menu-icon" />
            <span className="menu-text">Báº£ng Ä‘iá»u khiá»ƒn</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/products">
            <FiArchive className="menu-icon" />
            <span className="menu-text">Quáº£n lÃ½ hÃ ng hÃ³a</span>
          </NavLink>
        </li>
        {/* Cáº¬P NHáº¬T: Äá»•i icon thÃ nh FiPlusCircle */}
        <li>
          <NavLink to="/new-import">
            <FiPlusCircle className="menu-icon" />
            <span className="menu-text">Táº¡o Phiáº¿u Nháº­p</span>
          </NavLink>
        </li>
        {/* Cáº¬P NHáº¬T: Äá»•i icon thÃ nh FiMinusCircle */}
        <li>
          <NavLink to="/new-export">
            <FiMinusCircle className="menu-icon" />
            <span className="menu-text">Táº¡o Phiáº¿u Xuáº¥t</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/imports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiáº¿u Nháº­p</span>
          </NavLink>
        </li>
        <li>
          <NavLink to="/exports">
            <FiFileText className="menu-icon" />
            <span className="menu-text">DS Phiáº¿u Xuáº¥t</span>
          </NavLink>
        </li>
      </ul>
    </div>
  );
};

export default Sidebar;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Spinner.css ---


/* src/components/Spinner.css */
.spinner-container {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 40px;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3; /* Light grey */
    border-top: 5px solid #007bff; /* Primary color */
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* DÃ¹ng cho spinner bÃªn trong báº£ng */
.spinner-table-row td {
    text-align: center;
    padding: 40px;
    border: none;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\Spinner.jsx ---


// src/components/Spinner.jsx
import React from 'react';
import './Spinner.css';

const Spinner = ({ forTable = false }) => {
    if (forTable) {
        return (
            <tr className="spinner-table-row">
                <td colSpan="100%"> {/* colSpan lá»›n Ä‘á»ƒ hoáº¡t Ä‘á»™ng vá»›i má»i báº£ng */}
                    <div className="spinner"></div>
                </td>
            </tr>
        );
    }

    return (
        <div className="spinner-container">
            <div className="spinner"></div>
        </div>
    );
};

export default Spinner;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\StatusBadge.jsx ---


// src/components/StatusBadge.jsx
import React from 'react';

const StatusBadge = ({ status }) => {
    let text = status;
    let className = `status-badge status-${status}`;

    switch (status) {
        case 'pending':
            text = 'Äang chá»';
            break;
        case 'completed':
            text = 'HoÃ n thÃ nh';
            break;
        case 'cancelled':
            text = 'ÄÃ£ há»§y';
            break;
        case 'in_progress':
            text = 'Äang thá»±c hiá»‡n';
            className = 'status-badge status-pending'; // TÃ¡i sá»­ dá»¥ng style mÃ u vÃ ng
            break;
        case 'adjusted':
            text = 'ÄÃ£ Ä‘iá»u chá»‰nh';
            className = 'status-badge status-adjusted'; // Style mÃ u tÃ­m má»›i
            break;
        default:
            text = status;
    }

    return <span className={className}>{text}</span>;
};

// <-- NÃ‚NG Cáº¤P: Bá»c component trong React.memo Ä‘á»ƒ tá»‘i Æ°u hiá»‡u nÄƒng,
// trÃ¡nh viá»‡c re-render khÃ´ng cáº§n thiáº¿t khi props khÃ´ng thay Ä‘á»•i.
export default React.memo(StatusBadge);




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\TeamBadge.jsx ---


// src/components/TeamBadge.jsx
import React from 'react';

const TeamBadge = ({ team }) => {
  let className = 'team-badge';
  switch (team) {
    case 'MED':
      className += ' team-med';
      break;
    case 'BIO':
      className += ' team-bio';
      break;
    case 'Spare Part':
      className += ' team-sparepart';
      break;
    default:
      break;
  }

  return <span className={className}>{team}</span>;
};

// <-- NÃ‚NG Cáº¤P: Bá»c component trong React.memo Ä‘á»ƒ tá»‘i Æ°u hiá»‡u nÄƒng.
export default React.memo(TeamBadge);




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\TempBadge.jsx ---


// src/components/TempBadge.jsx
import React from 'react';

const TempBadge = ({ temperature }) => {
  let className = 'temp-badge';
  const tempString = temperature?.toLowerCase() || '';

  if (tempString.includes('2') && tempString.includes('8')) {
    className += ' temp-cool'; // 2 -> 8Â°C
  } else if (tempString.includes('-15') || tempString.includes('-25')) {
    className += ' temp-frozen'; // -25 -> -15Â°C
  } else if (tempString.includes('phÃ²ng')) {
    className += ' temp-room'; // Nhiá»‡t Ä‘á»™ phÃ²ng
  } else {
    className += ' temp-other'; // CÃ¡c loáº¡i khÃ¡c
  }

  return <span className={className}>{temperature}</span>;
};

// <-- NÃ‚NG Cáº¤P: Bá»c component trong React.memo Ä‘á»ƒ tá»‘i Æ°u hiá»‡u nÄƒng.
export default React.memo(TempBadge);




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewerLayout.jsx ---


// src/components/ViewerLayout.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import InventoryPage from '../pages/InventoryPage';
import InventorySummaryPage from '../pages/InventorySummaryPage';
import { useAuth } from '../context/UserContext'; // <-- THÃŠM IMPORT

const ViewerLayout = () => { // <-- XÃ“A PROPS
  const { userRole } = useAuth(); // <-- Láº¤Y Dá»® LIá»†U Tá»ª CONTEXT

  const canViewDetail = userRole === 'admin' || userRole === 'owner';
  const [viewMode, setViewMode] = useState('summary');
  
  useEffect(() => {
    if (!canViewDetail) {
      setViewMode('summary');
    }
  }, [canViewDetail]);

  return (
    <div style={{ padding: '20px' }}>
      {userRole === 'owner' && (
        <div style={{ marginBottom: '20px' }}>
            <Link to="/" className="btn-secondary" style={{ textDecoration: 'none' }}>
                &larr; Quay láº¡i Trang Quáº£n Trá»‹
            </Link>
        </div>
      )}

      {(canViewDetail) ? (
        <div className="view-toggle" style={{ marginBottom: '20px', display: 'flex', gap: '10px' }}>
          <button 
            onClick={() => setViewMode('summary')}
            className={viewMode === 'summary' ? 'btn-primary' : 'btn-secondary'}
            style={{width: 'auto'}}
          >
            Xem Tá»•ng Há»£p
          </button>
          <button 
            onClick={() => setViewMode('detail')}
            className={viewMode === 'detail' ? 'btn-primary' : 'btn-secondary'}
            style={{width: 'auto'}}
          >
            Xem Chi Tiáº¿t
          </button>
        </div>
      ) : (
        null 
      )}

      {(viewMode === 'detail' && canViewDetail) ? (
        <InventoryPage /> // <-- XÃ“A PROPS
      ) : (
        <InventorySummaryPage /> // <-- XÃ“A PROPS
      )}
    </div>
  );
};

export default ViewerLayout;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewExportSlipModal.jsx ---


// src/components/ViewExportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from './StatusBadge'; // <-- ÄÃƒ THÃŠM

const ViewExportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;
    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');
    
    const handlePrint = () => {
        window.print();
    };
    
    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiáº¿t Phiáº¿u Xuáº¥t Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiáº¿u</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>KhÃ¡ch hÃ ng</label><p><strong>{slip.customer}</strong></p></div>
                    <div><label>NgÃ y táº¡o</label>
                        <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Tráº¡ng thÃ¡i</label><p><StatusBadge status={slip.status} /></p></div>
                    <div className="info-description"><label>Diá»…n giáº£i</label><p><em>{slip.description || '(KhÃ´ng cÃ³)'}</em></p></div>
                </div>
                
 
                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiáº¿t hÃ ng hÃ³a</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    <th>SL xuáº¥t</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    {hasNotes && <th>Ghi chÃº</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        <td>{item.quantityToExport || item.quantityExported}</td>
                                        <td>{item.storageTemp}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiáº¿u</button>
                    <button type="button" onClick={onClose} className="btn-primary">ÄÃ³ng</button>
                </div>
            </div>
        </div>
    );
};

export default ViewExportSlipModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\components\ViewImportSlipModal.jsx ---


// src/components/ViewImportSlipModal.jsx
import React from 'react';
import { formatDate } from '../utils/dateUtils';
import StatusBadge from './StatusBadge'; // <-- ÄÃƒ THÃŠM

const ViewImportSlipModal = ({ slip, onClose }) => {
    if (!slip) return null;
    const hasNotes = slip.items.some(item => item.notes && item.notes.trim() !== '');
    
    const handlePrint = () => {
        window.print();
    };

    return (
        <div className="modal-backdrop">
            <div className="modal-content printable-area" style={{ width: '90vw', maxWidth: '1200px' }}>
                <h2>Chi Tiáº¿t Phiáº¿u Nháº­p Kho</h2>
                
                <div className="compact-info-grid">
                    <div><label>ID Phiáº¿u</label><p><strong>{slip.id}</strong></p></div>
                    <div><label>NhÃ  cung cáº¥p</label><p><strong>{slip.supplier}</strong></p></div>
                    <div><label>NgÃ y táº¡o</label>
                      <p><strong>{formatDate(slip.createdAt)}</strong></p>
                    </div>
                    <div><label>Tráº¡ng thÃ¡i</label><p><StatusBadge status={slip.status} /></p></div>
                    <div className="info-description"><label>Diá»…n giáº£i</label><p><em>{slip.description || '(KhÃ´ng cÃ³)'}</em></p></div>
                </div>

                <div className="modal-body">
                    <h3 style={{marginTop: '10px'}}>Chi tiáº¿t hÃ ng hÃ³a</h3>
                    <div className="table-container" style={{maxHeight: 'none', border: 'none'}}>
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>Sá»‘ lÆ°á»£ng</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    {hasNotes && <th>Ghi chÃº</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {slip.items.map((item, index) => (
                                    <tr key={index}>
                                        <td>{item.productId}</td>
                                        <td>{item.productName}</td>
                                        <td>{item.lotNumber}</td>
                                        <td>{item.expiryDate}</td>
                                        <td>{item.quantity}</td>
                                        <td>{item.unit}</td>
                                        <td>{item.packaging}</td>
                                        {hasNotes && <td>{item.notes}</td>}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div className="modal-actions">
                    <button type="button" onClick={handlePrint} className="btn-secondary">In Phiáº¿u</button>
                    <button type="button" onClick={onClose} className="btn-primary">ÄÃ³ng</button>
                </div>
            </div>
        </div>
    );
};

export default ViewImportSlipModal;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\context\UserContext.jsx ---


// src/context/UserContext.jsx
import React, { createContext, useState, useEffect, useContext } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth, db } from '../firebaseConfig';
import { doc, getDoc } from 'firebase/firestore';
import Spinner from '../components/Spinner'; // <-- THÃŠM IMPORT

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [userRole, setUserRole] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                const userDocRef = doc(db, 'users', currentUser.uid);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    setUserRole(userDocSnap.data().role);
                } else {
                    setUserRole(null);
                }
                setUser(currentUser);
            } else {
                setUser(null);
                setUserRole(null);
            }
            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    const value = {
        user,
        userRole,
        loading,
    };

    // Khi Ä‘ang xÃ¡c thá»±c, hiá»ƒn thá»‹ spinner toÃ n trang
    if (loading) {
        return <Spinner />;
    }

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\hooks\useFirestorePagination.js ---


// src/hooks/useFirestorePagination.js
import { useState, useEffect, useCallback } from 'react';
import { getDocs, query, startAfter, limit } from 'firebase/firestore';
import { toast } from 'react-toastify';

/**
 * // <-- THÃŠM Má»šI: Custom Hook Ä‘á»ƒ quáº£n lÃ½ viá»‡c phÃ¢n trang vá»›i Firestore.
 * @param {object} baseQuery - Query cÆ¡ báº£n cá»§a Firestore (Ä‘Ã£ bao gá»“m orderBy).
 * @param {number} pageSize - Sá»‘ lÆ°á»£ng má»¥c trÃªn má»—i trang.
 * @returns {object} - State vÃ  cÃ¡c hÃ m Ä‘á»ƒ Ä‘iá»u khiá»ƒn phÃ¢n trang.
 */
export const useFirestorePagination = (baseQuery, pageSize) => {
    const [documents, setDocuments] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isLastPage, setIsLastPage] = useState(false);
    const [lastVisible, setLastVisible] = useState(null);
    const [page, setPage] = useState(1);
    
    // LÆ°u con trá» cá»§a trang trÆ°á»›c Ä‘Ã³ Ä‘á»ƒ quay láº¡i
    const [prevPageCursors, setPrevPageCursors] = useState([]);

    const fetchPage = useCallback(async (direction, cursor = null) => {
        setLoading(true);
        try {
            let pageQuery;
            if (direction === 'next' && cursor) {
                pageQuery = query(baseQuery, startAfter(cursor), limit(pageSize));
            } else { // 'first' or 'prev' (logic xá»­ lÃ½ prev náº±m á»Ÿ ngoÃ i)
                pageQuery = query(baseQuery, limit(pageSize));
            }

            const docSnapshots = await getDocs(pageQuery);
            const list = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));

            if (list.length > 0) {
                setDocuments(list);
                const newLastVisible = docSnapshots.docs[docSnapshots.docs.length - 1];
                setLastVisible(newLastVisible);
                if (direction === 'next') {
                    // LÆ°u con trá» hiá»‡n táº¡i trÆ°á»›c khi qua trang má»›i
                    setPrevPageCursors(prev => [...prev, lastVisible]); 
                }
            } else {
                setDocuments([]);
            }
            
            setIsLastPage(docSnapshots.docs.length < pageSize);

        } catch (error) {
            console.error("Lá»—i khi phÃ¢n trang Firestore: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u trang. Vui lÃ²ng kiá»ƒm tra Console (F12).");
        } finally {
            setLoading(false);
        }
    }, [baseQuery, pageSize, lastVisible]); // ThÃªm lastVisible vÃ o dependency

    // Tá»± Ä‘á»™ng fetch láº¡i trang Ä‘áº§u khi query thay Ä‘á»•i (vÃ­ dá»¥: khi tÃ¬m kiáº¿m)
    useEffect(() => {
        setPage(1);
        setLastVisible(null);
        setPrevPageCursors([]);
        fetchPage('first');
    }, [baseQuery]); // Chá»‰ cháº¡y láº¡i khi baseQuery thay Ä‘á»•i

    const nextPage = () => {
        if (!isLastPage) {
            setPage(p => p + 1);
            fetchPage('next', lastVisible);
        }
    };

    const prevPage = () => {
         if (page > 1) {
            // Logic prevPage hiá»‡n táº¡i Ä‘Æ¡n giáº£n lÃ  fetch láº¡i trang Ä‘áº§u.
            // Äá»ƒ quay láº¡i trang trÆ°á»›c chÃ­nh xÃ¡c, cáº§n má»™t logic phá»©c táº¡p hÆ¡n vá»›i `endBefore` vÃ  `limitToLast`
            // mÃ  custom hook nÃ y chÆ°a há»— trá»£ Ä‘á»ƒ giá»¯ cho nÃ³ Ä‘Æ¡n giáº£n.
            // Ta sáº½ reset vá» trang 1.
            setPage(1);
            setLastVisible(null);
            setPrevPageCursors([]);
            fetchPage('first');
        }
    };
    
    const reset = () => {
        setPage(1);
        setLastVisible(null);
        setPrevPageCursors([]);
        fetchPage('first');
    };

    return {
        documents,
        loading,
        isLastPage,
        page,
        nextPage,
        prevPage,
        reset // <-- ThÃªm hÃ m reset Ä‘á»ƒ táº£i láº¡i dá»¯ liá»‡u khi cáº§n
    };
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\DashboardPage.jsx ---


// src/pages/DashboardPage.jsx
import React, { useState, useEffect } from 'react';
import { collection, getDocs, query, where, Timestamp } from 'firebase/firestore';
import { db } from '../firebaseConfig';
import { FiArchive, FiAlertTriangle, FiFileText } from 'react-icons/fi';
import '../styles/DashboardPage.css';
import Spinner from '../components/Spinner';

const DashboardCard = ({ icon, tieuDe, giaTri, mauSac }) => (
  <div className="dashboard-card" style={{ borderLeftColor: mauSac }}>
    <div className="card-icon" style={{ backgroundColor: mauSac }}>{icon}</div>
    <div className="card-info">
      <div className="card-title">{tieuDe}</div>
      <div className="card-value">{giaTri}</div>
    </div>
  </div>
);

const DashboardPage = () => {
  const [thongKe, setThongKe] = useState({
    tongSanPham: 0,
    sapHetHan: 0,
    phieuChoDuyet: 0,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const layDuLieuDashboard = async () => {
      setLoading(true);
      try {
        const sanPhamSnapshot = await getDocs(collection(db, 'products'));
        const tongSanPham = sanPhamSnapshot.size;
        
        const baMuoiNgayToi = new Date();
        baMuoiNgayToi.setDate(baMuoiNgayToi.getDate() + 30);
        const qSapHetHan = query(
          collection(db, 'inventory_lots'),
          where('expiryDate', '<=', Timestamp.fromDate(baMuoiNgayToi)),
          where('expiryDate', '>=', Timestamp.now())
        );
        const sapHetHanSnapshot = await getDocs(qSapHetHan);
        const sapHetHan = sapHetHanSnapshot.size;

        const qPhieuCho = query(collection(db, 'import_tickets'), where('status', '==', 'pending'));
        const phieuChoSnapshot = await getDocs(qPhieuCho);
        const phieuChoDuyet = phieuChoSnapshot.size;

        setThongKe({ tongSanPham, sapHetHan, phieuChoDuyet });
      } catch (error) {
        console.error("Lá»—i khi láº¥y dá»¯ liá»‡u dashboard: ", error);
      } finally {
        setLoading(false);
      }
    };
    layDuLieuDashboard();
  }, []);

  if (loading) {
    return <Spinner />;
  }

  return (
    <div className="dashboard-container">
      <h1>Báº£ng Ä‘iá»u khiá»ƒn</h1>
      <div className="cards-grid">
        <DashboardCard icon={<FiArchive />} tieuDe="Tá»•ng sá»‘ mÃ£ hÃ ng" giaTri={thongKe.tongSanPham} mauSac="#007bff" />
        <DashboardCard icon={<FiAlertTriangle />} tieuDe="Sáº¯p háº¿t háº¡n (30 ngÃ y)" giaTri={thongKe.sapHetHan} mauSac="#ffc107" />
        <DashboardCard icon={<FiFileText />} tieuDe="Phiáº¿u chá» duyá»‡t" giaTri={thongKe.phieuChoDuyet} mauSac="#6c757d" />
      </div>
    </div>
  );
};

export default DashboardPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\DataImportPage.jsx ---


// src/pages/DataImportPage.jsx

import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import { collection, writeBatch, doc, Timestamp, getDoc } from 'firebase/firestore';
import { toast } from 'react-toastify';
import Papa from 'papaparse';
import { FiUpload, FiDownload, FiInfo } from 'react-icons/fi';
import { parseDateString } from '../utils/dateUtils';
import '../styles/DataImportPage.css';

const DataImportPage = () => {
    const [importType, setImportType] = useState('inventory'); // <-- THAY Äá»”I: Máº·c Ä‘á»‹nh lÃ  import tá»•ng há»£p
    const [pastedData, setPastedData] = useState('');
    const [isImporting, setIsImporting] = useState(false);
    const [importLog, setImportLog] = useState([]);

    const logMessage = (message, type = 'info') => {
        setImportLog(prev => [...prev, { message, type, time: new Date().toLocaleTimeString() }]);
    };

    const handleFileImport = (e) => {
        const file = e.target.files[0];
        if (!file) return;

        logMessage(`Báº¯t Ä‘áº§u Ä‘á»c file: ${file.name}`);
        Papa.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
                processData(results.data);
            },
            error: (err) => {
                toast.error("KhÃ´ng thá»ƒ Ä‘á»c file CSV.");
                logMessage(`Lá»—i Ä‘á»c file: ${err.message}`, 'error');
            }
        });
        e.target.value = null;
    };
    
    const handlePasteImport = () => {
        if (!pastedData.trim()) {
            toast.warn("Vui lÃ²ng dÃ¡n dá»¯ liá»‡u vÃ o Ã´ trá»‘ng.");
            return;
        }
        logMessage(`Báº¯t Ä‘áº§u Ä‘á»c dá»¯ liá»‡u Ä‘Ã£ dÃ¡n.`);
        Papa.parse(pastedData, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
                processData(results.data);
            },
             error: (err) => {
                toast.error("Äá»‹nh dáº¡ng dá»¯ liá»‡u Ä‘Ã£ dÃ¡n khÃ´ng há»£p lá»‡.");
                logMessage(`Lá»—i Ä‘á»c dá»¯ liá»‡u: ${err.message}`, 'error');
            }
        });
    };

    const processData = async (data) => {
        if (!data || data.length === 0) {
            toast.warn("KhÃ´ng cÃ³ dá»¯ liá»‡u há»£p lá»‡ Ä‘á»ƒ import.");
            logMessage("KhÃ´ng tÃ¬m tháº¥y dÃ²ng dá»¯ liá»‡u nÃ o.", 'warn');
            return;
        }

        setIsImporting(true);
        setImportLog([]);
        logMessage(`PhÃ¡t hiá»‡n ${data.length} dÃ²ng. Báº¯t Ä‘áº§u xá»­ lÃ½ cho loáº¡i: ${importType}...`);

        try {
            const MAX_BATCH_SIZE = 499; // Giá»›i háº¡n an toÃ n cá»§a Firestore lÃ  500 thao tÃ¡c/batch
            let batch = writeBatch(db);
            let operationCount = 0;
            let totalSuccess = 0;
            
            for (let i = 0; i < data.length; i++) {
                const row = data[i];

                // --- LOGIC Gá»˜P Sáº¢N PHáº¨M & Tá»’N KHO ---
                if (importType === 'inventory') {
                    // 1. Kiá»ƒm tra cÃ¡c trÆ°á»ng báº¯t buá»™c
                    if (!row.productId || !row.productName || !row.lotNumber || !row.quantityRemaining) {
                        logMessage(`Bá» qua dÃ²ng ${i + 2}: Thiáº¿u thÃ´ng tin báº¯t buá»™c (MÃ£, TÃªn, LÃ´, SL Tá»“n).`, 'warn');
                        continue;
                    }
                    
                    const expiryDate = parseDateString(row.expiryDate);
                    if (!expiryDate && row.expiryDate) { // Chá»‰ bÃ¡o lá»—i náº¿u cÃ³ nháº­p HSD nhÆ°ng sai Ä‘á»‹nh dáº¡ng
                        logMessage(`Bá» qua dÃ²ng ${i + 2}: Sai Ä‘á»‹nh dáº¡ng HSD (cáº§n lÃ  dd/mm/yyyy).`, 'warn');
                        continue;
                    }

                    const productId = row.productId.trim().toUpperCase();

                    // 2. Tá»± Ä‘á»™ng táº¡o sáº£n pháº©m má»›i náº¿u chÆ°a tá»“n táº¡i
                    const productRef = doc(db, 'products', productId);
                    const productSnap = await getDoc(productRef);
                    
                    if (!productSnap.exists()) {
                        const newProductData = {
                            productName: row.productName,
                            unit: row.unit || '',
                            packaging: row.packaging || '',
                            storageTemp: row.storageTemp || '',
                            manufacturer: row.manufacturer || '',
                            team: row.team || 'MED',
                        };
                        batch.set(productRef, newProductData);
                        operationCount++;
                        logMessage(`ÄÃ£ táº¡o sáº£n pháº©m má»›i: ${productId}`);
                    }
                    
                    // 3. LuÃ´n táº¡o má»™t lÃ´ hÃ ng má»›i cho tá»“n Ä‘áº§u ká»³
                    const inventoryRef = doc(collection(db, 'inventory_lots'));
                    const inventoryData = {
                        productId: productId,
                        productName: row.productName,
                        lotNumber: row.lotNumber.trim(),
                        expiryDate: expiryDate ? Timestamp.fromDate(expiryDate) : null,
                        importDate: Timestamp.now(),
                        quantityImported: Number(row.quantityRemaining),
                        quantityRemaining: Number(row.quantityRemaining),
                        unit: row.unit || '',
                        packaging: row.packaging || '',
                        storageTemp: row.storageTemp || '',
                        team: row.team || 'MED',
                        manufacturer: row.manufacturer || '',
                        supplier: 'Tá»“n Ä‘áº§u ká»³',
                    };
                    batch.set(inventoryRef, inventoryData);
                    operationCount++;
                    totalSuccess++;
                
                // --- LOGIC IMPORT Äá»I TÃC (Giá»¯ nguyÃªn) ---
                } else if (importType === 'partners') {
                    if (!row.partnerId) {
                        logMessage(`Bá» qua dÃ²ng ${i + 2}: Thiáº¿u partnerId.`, 'warn');
                        continue;
                    }
                    const docId = row.partnerId.trim().toUpperCase();
                    const docData = {
                        partnerName: row.partnerName || '',
                        partnerType: row.partnerType === 'customer' ? 'customer' : 'supplier',
                    };
                    const docRef = doc(collection(db, 'partners'), docId);
                    batch.set(docRef, docData);
                    operationCount++;
                    totalSuccess++;
                }

                // Thá»±c thi batch khi Ä‘áº§y
                if (operationCount >= MAX_BATCH_SIZE) {
                    await batch.commit();
                    logMessage(`ÄÃ£ ghi thÃ nh cÃ´ng ${operationCount} thao tÃ¡c...`);
                    batch = writeBatch(db);
                    operationCount = 0;
                }
            }

            // Thá»±c thi batch cuá»‘i cÃ¹ng
            if (operationCount > 0) {
                await batch.commit();
                logMessage(`ÄÃ£ ghi thÃ nh cÃ´ng ${operationCount} thao tÃ¡c cuá»‘i cÃ¹ng.`);
            }

            toast.success(`HoÃ n táº¥t! Import thÃ nh cÃ´ng ${totalSuccess}/${data.length} má»¥c.`);
            logMessage(`HoÃ n táº¥t! Import thÃ nh cÃ´ng ${totalSuccess}/${data.length} má»¥c.`, 'success');

        } catch (error) {
            console.error("Lá»—i khi import dá»¯ liá»‡u: ", error);
            toast.error("ÄÃ£ xáº£y ra lá»—i trong quÃ¡ trÃ¬nh import.");
            logMessage(`Lá»—i nghiÃªm trá»ng: ${error.message}`, 'error');
        } finally {
            setIsImporting(false);
            setPastedData('');
        }
    };
    
    const downloadTemplate = () => {
        let headers, filename, sampleData;
        
        if (importType === 'partners') {
            headers = "partnerId*,partnerName*,partnerType";
            filename = "mau_import_doi_tac.csv";
            sampleData = "NCC-01,CÃ”NG TY DÆ¯á»¢C PHáº¨M ABC,supplier\nKH-01,Bá»†NH VIá»†N XYZ,customer";
        } else { // Máº«u chung cho Sáº£n pháº©m + Tá»“n kho
            headers = "productId*,productName*,lotNumber*,quantityRemaining*,expiryDate,unit,packaging,storageTemp,team,manufacturer";
            filename = "mau_import_san_pham_ton_kho.csv";
            sampleData = "SP001,BÃ”NG Cá»’N ALKOCIDE,L202501,100,31/12/2025,Há»™p,100 miáº¿ng/há»™p,Nhiá»‡t Ä‘á»™ phÃ²ng,MED,DentaLife\nSP002,GÄ‚NG TAY Y Táº¾,GT001,50,,Há»™p,50 Ä‘Ã´i/há»™p,,MED,";
        }
        
        const csvContent = "data:text/csv;charset=utf-8,\uFEFF" + headers + "\n" + sampleData;
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", filename);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <div className="data-import-page">
            <div className="page-header">
                <h1>Import Dá»¯ Liá»‡u HÃ ng Loáº¡t</h1>
            </div>

            <div className="import-container">
                <div className="import-controls">
                    <h3>1. Chá»n loáº¡i dá»¯ liá»‡u</h3>
                    <div className="import-type-selector">
                        {/* <-- THAY Äá»”I: Gá»™p Sáº£n pháº©m vÃ  Tá»“n kho lÃ m má»™t --> */}
                        <button onClick={() => setImportType('inventory')} className={importType === 'inventory' ? 'active' : ''}>Sáº£n pháº©m & Tá»“n kho</button>
                        <button onClick={() => setImportType('partners')} className={importType === 'partners' ? 'active' : ''}>Äá»‘i tÃ¡c</button>
                    </div>

                    <h3>2. Chuáº©n bá»‹ dá»¯ liá»‡u</h3>
                    <p>Dá»¯ liá»‡u cáº§n á»Ÿ Ä‘á»‹nh dáº¡ng CSV (UTF-8). Báº¡n cÃ³ thá»ƒ dÃ¹ng file máº«u dÆ°á»›i Ä‘Ã¢y Ä‘á»ƒ Ä‘áº£m báº£o Ä‘Ãºng cáº¥u trÃºc cá»™t.</p>
                    <button onClick={downloadTemplate} className="btn-secondary" style={{ width: '100%' }}>
                        <FiDownload /> Táº£i File Máº«u
                    </button>
                    
                    <div className="import-instructions">
                         <FiInfo /> 
                         <div>
                            <strong>LÆ°u Ã½ quan trá»ng:</strong>
                            <ul>
                                <li>Cá»™t tiÃªu Ä‘á» (cÃ³ dáº¥u `*`) lÃ  báº¯t buá»™c pháº£i cÃ³ dá»¯ liá»‡u.</li>
                                {/* <-- THAY Äá»”I: Giáº£i thÃ­ch logic má»›i --> */}
                                <li>Náº¿u `productId` chÆ°a cÃ³, má»™t sáº£n pháº©m má»›i sáº½ Ä‘Æ°á»£c tá»± Ä‘á»™ng táº¡o.</li>
                                <li>Má»—i dÃ²ng trong file sáº½ táº¡o ra má»™t lÃ´ hÃ ng tá»“n kho má»›i.</li>
                                <li>Náº¿u `partnerId` Ä‘Ã£ tá»“n táº¡i, dá»¯ liá»‡u cÅ© sáº½ bá»‹ **ghi Ä‘Ã¨**.</li>
                            </ul>
                         </div>
                    </div>
                </div>

                <div className="import-actions">
                    <h3>3. Táº£i lÃªn vÃ  thá»±c hiá»‡n</h3>
                     {/* ... Giao diá»‡n táº£i lÃªn vÃ  nháº­t kÃ½ giá»¯ nguyÃªn ... */}
                     <div className="import-method">
                        <h4>CÃ¡ch 1: Táº£i lÃªn file .csv</h4>
                        <input type="file" accept=".csv" onChange={handleFileImport} disabled={isImporting} />
                    </div>
                     <div className="import-method">
                        <h4>CÃ¡ch 2: DÃ¡n dá»¯ liá»‡u tá»« Excel/Google Sheets</h4>
                        <textarea 
                            rows="8" 
                            placeholder="DÃ¡n dá»¯ liá»‡u cá»§a báº¡n vÃ o Ä‘Ã¢y (bao gá»“m cáº£ dÃ²ng tiÃªu Ä‘á»)"
                            value={pastedData}
                            onChange={(e) => setPastedData(e.target.value)}
                            disabled={isImporting}
                        ></textarea>
                        <button onClick={handlePasteImport} className="btn-primary" disabled={isImporting} style={{marginTop: '10px'}}>
                            <FiUpload /> {isImporting ? 'Äang import...' : 'Import tá»« dá»¯ liá»‡u Ä‘Ã£ dÃ¡n'}
                        </button>
                    </div>
                    <div className="import-log-container">
                        <h4>Nháº­t kÃ½ Import</h4>
                        <div className="import-log">
                            {importLog.length === 0 && <p>ChÆ°a cÃ³ hoáº¡t Ä‘á»™ng nÃ o.</p>}
                            {importLog.map((log, index) => (
                                <p key={index} className={`log-item log-${log.type}`}>
                                    <span>[{log.time}]</span> {log.message}
                                </p>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default DataImportPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\ExportListPage.jsx ---


// src/pages/ExportListPage.jsx
import React, { useState, useMemo } from 'react';
import { db } from '../firebaseConfig';
import { doc, updateDoc, getDoc, collection, query, orderBy } from 'firebase/firestore';
import { FiCheckCircle, FiXCircle, FiEdit, FiEye, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import ViewExportSlipModal from '../components/ViewExportSlipModal';
import EditExportSlipModal from '../components/EditExportSlipModal';
import ConfirmationModal from '../components/ConfirmationModal';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';

const ExportListPage = () => {
  const [selectedSlip, setSelectedSlip] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, data: null, title: '', message: '', onConfirm: null, confirmText: 'XÃ¡c nháº­n' });

  // <-- THAY Äá»”I: Sá»­ dá»¥ng hook phÃ¢n trang
  const baseQuery = useMemo(() => query(collection(db, 'export_tickets'), orderBy("createdAt", "desc")), []);
  const {
    documents: exportSlips,
    loading,
    isLastPage,
    page,
    nextPage,
    prevPage,
    reset
  } = useFirestorePagination(baseQuery, PAGE_SIZE);

  const handleConfirmExport = async (slip) => {
    try {
      for (const item of slip.items) {
        const lotRef = doc(db, 'inventory_lots', item.lotId);
        const lotSnap = await getDoc(lotRef);
        if (lotSnap.exists()) {
          const currentQuantity = lotSnap.data().quantityRemaining;
          const newQuantityRemaining = currentQuantity - (item.quantityToExport || item.quantityExported);
          if (newQuantityRemaining < 0) {
            toast.error(`Lá»—i: Tá»“n kho cá»§a lÃ´ ${item.lotNumber} khÃ´ng Ä‘á»§ Ä‘á»ƒ xuáº¥t.`);
            return;
          }
          await updateDoc(lotRef, { quantityRemaining: newQuantityRemaining });
        }
      }
      const slipRef = doc(db, 'export_tickets', slip.id);
      await updateDoc(slipRef, { status: 'completed' });
      toast.success('XÃ¡c nháº­n xuáº¥t kho thÃ nh cÃ´ng!');
      reset();
    } catch (error) {
      console.error("Lá»—i khi xÃ¡c nháº­n xuáº¥t kho: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ¡c nháº­n.');
    } finally {
        setConfirmModal({ isOpen: false });
    }
  };

  const handleCancelSlip = async (slip) => {
    try {
      const slipRef = doc(db, 'export_tickets', slip.id);
      await updateDoc(slipRef, { status: 'cancelled' });
      toast.success('Há»§y phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
      reset();
    } catch (error) {
      console.error("Lá»—i khi há»§y phiáº¿u: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi há»§y phiáº¿u.');
    } finally {
        setConfirmModal({ isOpen: false });
    }
  };

  const handleSaveSlipChanges = async (updatedSlip) => {
    try {
      const slipDocRef = doc(db, "export_tickets", updatedSlip.id);
      await updateDoc(slipDocRef, { 
          items: updatedSlip.items,
          customer: updatedSlip.customer,
          description: updatedSlip.description
      });
      setIsEditModalOpen(false);
      reset();
      toast.success('Cáº­p nháº­t phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t phiáº¿u xuáº¥t: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
    }
  };

  const promptAction = (action, slip) => {
    if (action === 'confirm') {
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xuáº¥t kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n xuáº¥t kho cho phiáº¿u cá»§a khÃ¡ch hÃ ng "${slip.customer}" khÃ´ng?`,
            onConfirm: () => handleConfirmExport(slip),
            confirmText: "XÃ¡c nháº­n"
        });
    } else if (action === 'cancel') {
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n há»§y phiáº¿u?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n Há»¦Y phiáº¿u xuáº¥t cá»§a khÃ¡ch hÃ ng "${slip.customer}" khÃ´ng? Thao tÃ¡c nÃ y sáº½ khÃ´ng trá»« tá»“n kho.`,
            onConfirm: () => handleCancelSlip(slip),
            confirmText: "Äá»“ng Ã½ há»§y"
        });
    }
  };

  const openViewModal = (slip) => { setSelectedSlip(slip); setIsViewModalOpen(true); };
  
  const openEditModal = async (slip) => {
    const slipWithDetails = JSON.parse(JSON.stringify(slip));
    try {
      toast.info("Äang láº¥y dá»¯ liá»‡u tá»“n kho má»›i nháº¥t...");
      for (const item of slipWithDetails.items) {
        if (item.lotId) {
          const lotRef = doc(db, 'inventory_lots', item.lotId);
          const lotSnap = await getDoc(lotRef);
          if (lotSnap.exists()) {
            item.quantityRemaining = lotSnap.data().quantityRemaining;
          } else {
            item.quantityRemaining = 0;
            toast.warn(`LÃ´ ${item.lotNumber} khÃ´ng cÃ²n tá»“n táº¡i trong kho.`);
          }
        }
      }
      setSelectedSlip(slipWithDetails);
      setIsEditModalOpen(true);
    } catch (error) {
      console.error("Lá»—i khi láº¥y chi tiáº¿t lÃ´ Ä‘á»ƒ chá»‰nh sá»­a:", error);
      toast.error("KhÃ´ng thá»ƒ láº¥y dá»¯ liá»‡u tá»“n kho má»›i nháº¥t.");
    }
  };
  
  return (
    <div>
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={confirmModal.onConfirm}
        onCancel={() => setConfirmModal({ isOpen: false })}
        confirmText={confirmModal.confirmText}
      />
      {isEditModalOpen && ( <EditExportSlipModal slip={selectedSlip} onClose={() => setIsEditModalOpen(false)} onSave={handleSaveSlipChanges} /> )}
      {isViewModalOpen && ( <ViewExportSlipModal slip={selectedSlip} onClose={() => setIsViewModalOpen(false)} /> )}
     
      <div className="page-header">
        <h1>Danh sÃ¡ch Phiáº¿u Xuáº¥t Kho</h1>
      </div>

      {loading ? <Spinner /> : (
        <>
            <table className="products-table">
                <thead>
                <tr>
                    <th>NgÃ y táº¡o</th>
                    <th>KhÃ¡ch hÃ ng / NÆ¡i nháº­n</th>
                    <th>Diá»…n giáº£i</th>
                    <th>Tráº¡ng thÃ¡i</th>
                    <th>Thao tÃ¡c</th>
                </tr>
                </thead>
                <tbody>
                {exportSlips.length > 0 ? (
                    exportSlips.map(slip => (
                    <tr key={slip.id}>
                        <td>{slip.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
                        <td>{slip.customer}</td>
                        <td>{slip.description}</td>
                        <td><StatusBadge status={slip.status} /></td>
                        <td>
                        <div className="action-buttons">
                            <button className="btn-icon btn-view" title="Xem chi tiáº¿t" onClick={() => openViewModal(slip)}>
                                <FiEye />
                            </button>
                            {slip.status === 'pending' && (
                            <>
                                <button className="btn-icon btn-confirm" title="XÃ¡c nháº­n xuáº¥t kho" onClick={() => promptAction('confirm', slip)}>
                                    <FiCheckCircle />
                                </button>
                                <button className="btn-icon btn-edit" title="Sá»­a phiáº¿u" onClick={() => openEditModal(slip)}>
                                    <FiEdit />
                                </button>
                                <button className="btn-icon btn-delete" title="Há»§y phiáº¿u" onClick={() => promptAction('cancel', slip)}>
                                    <FiXCircle />
                                </button>
                            </>
                            )}
                        </div>
                        </td>
                    </tr>
                    ))
                ) : (
                    <tr>
                    <td colSpan="5" style={{ textAlign: 'center' }}>ChÆ°a cÃ³ phiáº¿u xuáº¥t kho nÃ o.</td>
                    </tr>
                )}
                </tbody>
            </table>

            <div className="pagination-controls">
                <button onClick={prevPage} disabled={page <= 1 || loading}>
                    <FiChevronLeft /> Trang TrÆ°á»›c
                </button>
                <span>Trang {page}</span>
                <button onClick={nextPage} disabled={isLastPage || loading}>
                    Trang Tiáº¿p <FiChevronRight />
                </button>
            </div>
        </>
      )}
    </div>
  );
};

export default ExportListPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\ImportListPage.jsx ---


// src/pages/ImportListPage.jsx
import React, { useState, useMemo } from 'react';
import { doc, updateDoc, addDoc, Timestamp, collection, query, orderBy } from 'firebase/firestore';
import { FiEdit, FiEye, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { db } from '../firebaseConfig';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import EditImportSlipModal from '../components/EditImportSlipModal';
import ViewImportSlipModal from '../components/ViewImportSlipModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { parseDateString } from '../utils/dateUtils';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';

const ImportListPage = () => {
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedSlip, setSelectedSlip] = useState(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });
  
  // <-- THAY Äá»”I: Sá»­ dá»¥ng hook phÃ¢n trang
  const baseQuery = useMemo(() => query(collection(db, 'import_tickets'), orderBy("createdAt", "desc")), []);
  const { 
    documents: importSlips, 
    loading, 
    isLastPage, 
    page, 
    nextPage, 
    prevPage,
    reset
  } = useFirestorePagination(baseQuery, PAGE_SIZE);

  const handleConfirmImport = async () => {
    const slip = confirmModal.item;
    if (!slip) return;
    try {
      for (const item of slip.items) {
        const expiryDateObject = parseDateString(item.expiryDate);
        if (!expiryDateObject) {
            toast.error(`HSD cá»§a máº·t hÃ ng ${item.productName} (${item.lotNumber}) cÃ³ Ä‘á»‹nh dáº¡ng sai. Vui lÃ²ng sá»­a láº¡i.`);
            setConfirmModal({ isOpen: false, item: null });
            return;
        }
        const expiryTimestamp = Timestamp.fromDate(expiryDateObject);
        const newLotData = {
          importDate: Timestamp.now(),
          productId: item.productId,
          productName: item.productName,
          lotNumber: item.lotNumber,
          expiryDate: expiryTimestamp,
          unit: item.unit,
          packaging: item.packaging,
          storageTemp: item.storageTemp,
          team: item.team,
          manufacturer: item.manufacturer,
          quantityImported: Number(item.quantity),
          quantityRemaining: Number(item.quantity),
          notes: item.notes,
          supplier: slip.supplier,
        };
        await addDoc(collection(db, "inventory_lots"), newLotData);
      }
      const slipDocRef = doc(db, "import_tickets", slip.id);
      await updateDoc(slipDocRef, { status: "completed" });
      toast.success('XÃ¡c nháº­n nháº­p kho thÃ nh cÃ´ng!');
      reset();
    } catch (error) {
      console.error("Lá»—i khi xÃ¡c nháº­n nháº­p kho: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ¡c nháº­n nháº­p kho.');
    } finally {
        setConfirmModal({ isOpen: false, item: null });
    }
  };

  const handleSaveSlipChanges = async (updatedSlip) => {
    try {
      const slipDocRef = doc(db, "import_tickets", updatedSlip.id);
      await updateDoc(slipDocRef, { items: updatedSlip.items });
      setIsEditModalOpen(false);
      reset();
      toast.success('Cáº­p nháº­t phiáº¿u nháº­p thÃ nh cÃ´ng!');
    } catch (error) {
      console.error("Lá»—i khi cáº­p nháº­t phiáº¿u nháº­p: ", error);
      toast.error('ÄÃ£ xáº£y ra lá»—i khi cáº­p nháº­t.');
    }
  };

  const promptForConfirm = (slip) => {
    setConfirmModal({
        isOpen: true,
        item: slip,
        title: "XÃ¡c nháº­n nháº­p kho?",
        message: `Báº¡n cÃ³ cháº¯c muá»‘n xÃ¡c nháº­n vÃ  Ä‘Æ°a hÃ ng trong phiáº¿u cá»§a NCC "${slip.supplier}" vÃ o kho khÃ´ng? Thao tÃ¡c nÃ y sáº½ cáº­p nháº­t tá»“n kho.`,
    });
  };

  const openEditModal = (slip) => { setSelectedSlip(slip); setIsEditModalOpen(true); };
  const openViewModal = (slip) => { setSelectedSlip(slip); setIsViewModalOpen(true); };
  
  return (
    <div>
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={handleConfirmImport}
        onCancel={() => setConfirmModal({ isOpen: false, item: null })}
        confirmText="XÃ¡c nháº­n"
      />
      {isViewModalOpen && ( <ViewImportSlipModal slip={selectedSlip} onClose={() => setIsViewModalOpen(false)} /> )}
      {isEditModalOpen && ( <EditImportSlipModal slip={selectedSlip} onClose={() => setIsEditModalOpen(false)} onSave={handleSaveSlipChanges} /> )}
      
      <div className="page-header">
        <h1>Danh sÃ¡ch Phiáº¿u Nháº­p Kho</h1>
      </div>

      {loading ? <Spinner /> : (
        <>
            <table className="products-table">
                <thead>
                <tr>
                    <th>NgÃ y táº¡o</th>
                    <th>NhÃ  cung cáº¥p</th>
                    <th>Diá»…n giáº£i</th>
                    <th>Tráº¡ng thÃ¡i</th>
                    <th>Thao tÃ¡c</th>
                </tr>
                </thead>
                <tbody>
                {importSlips.map(slip => (
                    <tr key={slip.id}>
                    <td>{slip.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
                    <td>{slip.supplier}</td>
                    <td>{slip.description}</td>
                    <td><StatusBadge status={slip.status} /></td>
                    <td>
                        <div className="action-buttons">
                        <button className="btn-icon btn-view" title="Xem chi tiáº¿t" onClick={() => openViewModal(slip)}>
                            <FiEye />
                        </button>
                        {slip.status === 'pending' && (
                            <>
                            <button className="btn-icon btn-edit" title="Sá»­a phiáº¿u" onClick={() => openEditModal(slip)}>
                                <FiEdit />
                            </button>
                            <button className="btn-primary" onClick={() => promptForConfirm(slip)}>
                                XÃ¡c nháº­n
                            </button>
                            </>
                        )}
                        </div>
                    </td>
                    </tr>
                ))}
                </tbody>
            </table>

            <div className="pagination-controls">
                <button onClick={prevPage} disabled={page <= 1 || loading}>
                    <FiChevronLeft /> Trang TrÆ°á»›c
                </button>
                <span>Trang {page}</span>
                <button onClick={nextPage} disabled={isLastPage || loading}>
                    Trang Tiáº¿p <FiChevronRight />
                </button>
            </div>
        </>
      )}
    </div>
  );
};

export default ImportListPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\InventoryPage.jsx ---


// src/pages/InventoryPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, getDocs, where, orderBy, limit, startAfter, Timestamp } from 'firebase/firestore';
import { toast } from 'react-toastify';
import InventoryFilters from '../components/InventoryFilters';
import TeamBadge from '../components/TeamBadge';
import TempBadge from '../components/TempBadge';
import { formatDate } from '../utils/dateUtils';
import { useAuth } from '../context/UserContext';
import Spinner from '../components/Spinner';
import { FiChevronLeft, FiChevronRight, FiPrinter } from 'react-icons/fi'; // <-- NÃ‚NG Cáº¤P: ThÃªm icon FiPrinter

const PAGE_SIZE = 20;

const getRowColorByExpiry = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'expired-black';
    if (diffDays <= 60) return 'near-expiry-red';
    if (diffDays <= 90) return 'near-expiry-orange';
    if (diffDays <= 120) return 'near-expiry-yellow';
    return '';
};

const InventoryPage = () => {
    const { userRole } = useAuth();

    const [inventory, setInventory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({ team: 'all', dateStatus: 'all' });
    const [searchTerm, setSearchTerm] = useState('');
    const [lastVisible, setLastVisible] = useState(null);
    const [page, setPage] = useState(1);
    const [isLastPage, setIsLastPage] = useState(false);
    const [selectedRowId, setSelectedRowId] = useState(null);

    const buildQuery = () => {
        let q = query(
            collection(db, "inventory_lots"),
            orderBy("productId", "asc"),
            orderBy("importDate", "asc")
        );

        if (userRole === 'med') {
            q = query(q, where("team", "==", "MED"));
        } else if (userRole === 'bio') {
            q = query(q, where("team", "in", ["BIO", "Spare Part"]));
        }

        if (filters.team !== 'all') {
            q = query(q, where("team", "==", filters.team));
        }

        if (filters.dateStatus === 'expired') {
            const today = Timestamp.now();
            q = query(q, where("expiryDate", "<", today));
        } else if (filters.dateStatus === 'near_expiry') {
            const today = Timestamp.now();
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 120);
            const futureTimestamp = Timestamp.fromDate(futureDate);
            q = query(q, where("expiryDate", ">=", today), where("expiryDate", "<=", futureTimestamp));
        }
        
        if (searchTerm) {
            const upperSearchTerm = searchTerm.toUpperCase();
            q = query(q, where("productId", ">=", upperSearchTerm), where("productId", "<=", upperSearchTerm + '\uf8ff'));
        }
        return q;
    };

    const fetchFirstPage = useCallback(async () => {
        setLoading(true);
        try {
            const q = buildQuery();
            const firstPageQuery = query(q, limit(PAGE_SIZE));
            const docSnapshots = await getDocs(firstPageQuery);
            
            const inventoryList = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setInventory(inventoryList);

            setLastVisible(docSnapshots.docs[docSnapshots.docs.length - 1]);
            setIsLastPage(docSnapshots.docs.length < PAGE_SIZE);
            setPage(1);
        } catch (error) {
            console.error("Lá»—i khi táº£i dá»¯ liá»‡u tá»“n kho: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u. Vui lÃ²ng kiá»ƒm tra Console (F12) Ä‘á»ƒ táº¡o Index náº¿u Ä‘Æ°á»£c yÃªu cáº§u.");
        } finally {
            setLoading(false);
        }
    }, [userRole, filters, searchTerm]);

    const fetchNextPage = useCallback(async () => {
        if (!lastVisible) return;
        setLoading(true);
        try {
            const q = buildQuery();
            const nextPageQuery = query(q, startAfter(lastVisible), limit(PAGE_SIZE));
            const docSnapshots = await getDocs(nextPageQuery);

            const inventoryList = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setInventory(inventoryList);

            setLastVisible(docSnapshots.docs[docSnapshots.docs.length - 1]);
            setIsLastPage(docSnapshots.docs.length < PAGE_SIZE);
            setPage(p => p + 1);
        } catch (error) {
            console.error("Lá»—i khi táº£i dá»¯ liá»‡u tá»“n kho: ", error);
        } finally {
            setLoading(false);
        }
    }, [lastVisible, userRole, filters, searchTerm]);

    useEffect(() => {
        const debounce = setTimeout(() => {
            fetchFirstPage();
        }, 500);
        return () => clearTimeout(debounce);
    }, [fetchFirstPage]);
    
    const handleFilterChange = (filterName, value) => {
        setFilters(prev => ({ ...prev, [filterName]: value }));
    };

    const handleRowClick = (lotId) => {
        setSelectedRowId(prevId => (prevId === lotId ? null : lotId));
    };

    // <-- NÃ‚NG Cáº¤P: HÃ m xá»­ lÃ½ viá»‡c in -->
    const handlePrint = () => {
        const originalTitle = document.title;
        document.title = `BaoCao_TonKho_ChiTiet_${new Date().toLocaleDateString('vi-VN')}`;
        window.print();
        document.title = originalTitle; // KhÃ´i phá»¥c tiÃªu Ä‘á» cÅ© sau khi in
    };
    
    return (
        // <-- NÃ‚NG Cáº¤P: Bá»c toÃ n bá»™ ná»™i dung trong div Ä‘á»ƒ cÃ³ thá»ƒ in -->
        <div className="printable-inventory-area">
            <div className="page-header">
                <h1>Tá»“n Kho Chi Tiáº¿t</h1>
                {/* <-- NÃ‚NG Cáº¤P: ThÃªm nÃºt In vÃ  kiá»ƒm tra quyá»n --> */}
                {(userRole === 'owner' || userRole === 'admin') && (
                    <button onClick={handlePrint} className="btn-secondary" style={{width: 'auto'}}>
                        <FiPrinter style={{marginRight: '5px'}} />
                        In BÃ¡o CÃ¡o
                    </button>
                )}
            </div>
            
            <div className="controls-container">
                <InventoryFilters 
                    userRole={userRole} 
                    onFilterChange={handleFilterChange} 
                    activeFilters={filters}
                />
                <div className="search-container">
                    <input
                        type="text"
                        placeholder="TÃ¬m theo MÃ£ hÃ ng..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
            </div>

            {loading ? <Spinner /> : (
                <>
                    <div className="table-container">
                        <table className="inventory-table">
                            <thead>
                                <tr>
                                    <th>NgÃ y nháº­p</th>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>Sá»‘ lÃ´</th>
                                    <th>HSD</th>
                                    <th>ÄVT</th>
                                    <th>Quy cÃ¡ch</th>
                                    <th>SL Nháº­p</th>
                                    <th>SL CÃ²n láº¡i</th>
                                    <th>Ghi chÃº</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    <th>Team</th>
                                </tr>
                            </thead>
                            <tbody className="inventory-table-body">
                                {inventory.map(lot => (
                                    <tr 
                                        key={lot.id} 
                                        onClick={() => handleRowClick(lot.id)}
                                        className={`${selectedRowId === lot.id ? 'selected-row' : ''} ${getRowColorByExpiry(lot.expiryDate)}`}
                                    >
                                        <td data-label="NgÃ y nháº­p">{formatDate(lot.importDate)}</td>
                                        <td data-label="MÃ£ hÃ ng">{lot.productId}</td>
                                        <td data-label="TÃªn hÃ ng">{lot.productName}</td>
                                        <td data-label="Sá»‘ lÃ´">{lot.lotNumber}</td>
                                        <td data-label="HSD">{formatDate(lot.expiryDate)}</td>
                                        <td data-label="ÄVT">{lot.unit}</td>
                                        <td data-label="Quy cÃ¡ch">{lot.packaging}</td>
                                        <td data-label="SL Nháº­p">{lot.quantityImported}</td>
                                        <td data-label="SL CÃ²n láº¡i">{lot.quantityRemaining}</td>
                                        <td data-label="Ghi chÃº">{lot.notes}</td>
                                        <td data-label="Nhiá»‡t Ä‘á»™ BQ"><TempBadge temperature={lot.storageTemp} /></td>
                                        <td data-label="Team"><TeamBadge team={lot.team} /></td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    
                    {!searchTerm && (
                        <div className="pagination-controls">
                            <button onClick={() => { setLastVisible(null); fetchFirstPage(); }} disabled={page <= 1}>
                                <FiChevronLeft /> Trang TrÆ°á»›c
                            </button>
                            <span>Trang {page}</span>
                            <button onClick={fetchNextPage} disabled={isLastPage}>
                                Trang Tiáº¿p <FiChevronRight />
                            </button>
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default InventoryPage;




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\InventorySummaryPage.jsx ---


// src/pages/InventorySummaryPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, getDocs, where, orderBy, documentId, limit, startAfter, Timestamp } from 'firebase/firestore';
import { formatDate } from '../utils/dateUtils';
import TeamBadge from '../components/TeamBadge';
import TempBadge from '../components/TempBadge';
import { FiChevronDown, FiChevronRight, FiChevronLeft, FiPrinter } from 'react-icons/fi';
import { useAuth } from '../context/UserContext';
import Spinner from '../components/Spinner';
import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import { toast } from 'react-toastify';

const PAGE_SIZE = 15;

const getRowColorByExpiry = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    expDate.setHours(0, 0, 0, 0);
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'expired-black';
    if (diffDays <= 60) return 'near-expiry-red';
    if (diffDays <= 90) return 'near-expiry-orange';
    if (diffDays <= 120) return 'near-expiry-yellow';
    return '';
};

const getLotItemColorClass = (expiryDate) => {
    if (!expiryDate || !expiryDate.toDate) return '';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const expDate = expiryDate.toDate();
    expDate.setHours(0, 0, 0, 0);
    const diffTime = expDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'lot-item-expired';
    if (diffDays <= 60) return 'lot-item-red';
    if (diffDays <= 90) return 'lot-item-orange';
    if (diffDays <= 120) return 'lot-item-yellow';
    return '';
};

const InventorySummaryPage = () => {
    const { userRole } = useAuth();
    const [summaries, setSummaries] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [expandedRows, setExpandedRows] = useState({});
    const [lotDetails, setLotDetails] = useState({});
    const [loadingLots, setLoadingLots] = useState({});
    
    const [lastVisible, setLastVisible] = useState(null);
    const [page, setPage] = useState(1);
    const [isLastPage, setIsLastPage] = useState(false);
    const [activeFilter, setActiveFilter] = useState({ type: 'none', value: '' });

    const fetchData = useCallback(async (direction = 'next', cursor = null) => {
        setLoading(true);
        try {
            // <-- NÃ‚NG Cáº¤P: Thay Ä‘á»•i logic sáº¯p xáº¿p máº·c Ä‘á»‹nh -->
            // Sáº¯p xáº¿p theo MÃ£ hÃ ng (productId) tÄƒng dáº§n lÃ m Æ°u tiÃªn chÃ­nh.
            let q = query(collection(db, "product_summaries"), orderBy(documentId(), "asc"));

            if (activeFilter.type === 'team') {
                q = query(q, where("team", "==", activeFilter.value));
            } else if (activeFilter.type === 'near_expiry') {
                const today = Timestamp.now();
                const futureDate = new Date();
                futureDate.setDate(futureDate.getDate() + 120);
                const futureTimestamp = Timestamp.fromDate(futureDate);
                // Khi lá»c, ta sáº½ sáº¯p xáº¿p theo HSD Ä‘á»ƒ Ä‘Æ°a cÃ¡c mÃ£ cáº­n date lÃªn Ä‘áº§u
                q = query(q, where("nearestExpiryDate", ">=", today), where("nearestExpiryDate", "<=", futureTimestamp), orderBy("nearestExpiryDate", "asc"));
            } else if (activeFilter.type === 'expired') {
                const today = Timestamp.now();
                // TÆ°Æ¡ng tá»±, sáº¯p xáº¿p theo HSD
                q = query(q, where("nearestExpiryDate", "<", today), orderBy("nearestExpiryDate", "asc"));
            }

            if (direction === 'next' && cursor) {
                q = query(q, startAfter(cursor), limit(PAGE_SIZE));
            } else {
                q = query(q, limit(PAGE_SIZE));
                if (direction === 'first') setPage(1);
            }

            const docSnapshots = await getDocs(q);
            const summaryList = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));

            setLastVisible(docSnapshots.docs[docSnapshots.docs.length - 1] || null);
            setIsLastPage(docSnapshots.docs.length < PAGE_SIZE);
            setSummaries(summaryList);
        } catch (error) {
            console.error("Lá»—i khi táº£i dá»¯ liá»‡u tá»•ng há»£p: ", error);
        } finally {
            setLoading(false);
        }
    }, [activeFilter]);

    const performSearch = useCallback(async (term) => {
        if (!term) return;
        setLoading(true);
        try {
            const upperTerm = term.toUpperCase();
            const productSearchQuery = query(
                collection(db, "product_summaries"),
                where(documentId(), ">=", upperTerm),
                where(documentId(), "<=", upperTerm + '\uf8ff')
            );
            const lotSearchQuery = query(
                collection(db, "inventory_lots"),
                where("lotNumber", "==", term)
            );
            const [productSnap, lotSnap] = await Promise.all([
                getDocs(productSearchQuery),
                getDocs(lotSearchQuery)
            ]);
            const foundProductIds = new Set(productSnap.docs.map(doc => doc.id));
            lotSnap.docs.forEach(doc => foundProductIds.add(doc.data().productId));
            
            if (foundProductIds.size === 0) {
                setSummaries([]);
                setIsLastPage(true);
            } else {
                const finalQuery = query(
                    collection(db, "product_summaries"),
                    where(documentId(), 'in', Array.from(foundProductIds).slice(0, 30))
                );
                const finalSnap = await getDocs(finalQuery);
                setSummaries(finalSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })));
                setIsLastPage(true);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m kiáº¿m:", error);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        const debounce = setTimeout(() => {
            setLastVisible(null);
            setPage(1);
            if (searchTerm) {
                performSearch(searchTerm);
            } else {
                fetchData('first');
            }
        }, 500);
        return () => clearTimeout(debounce);
    }, [searchTerm, activeFilter, fetchData, performSearch]);


    const toggleRow = async (productId) => {
        const isCurrentlyExpanded = !!expandedRows[productId];
        if (!lotDetails[productId]) {
            setLoadingLots(prev => ({ ...prev, [productId]: true }));
            try {
                const lotsQuery = query(
                    collection(db, "inventory_lots"),
                    where("productId", "==", productId),
                    where("quantityRemaining", ">", 0),
                    orderBy("expiryDate", "asc")
                );
                const lotsSnapshot = await getDocs(lotsQuery);
                const lots = lotsSnapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));
                setLotDetails(prev => ({ ...prev, [productId]: lots }));
            } catch (error) {
                console.error("Lá»—i khi táº£i chi tiáº¿t lÃ´:", error);
                setLotDetails(prev => ({ ...prev, [productId]: [] }));
            } finally {
                setLoadingLots(prev => ({ ...prev, [productId]: false }));
            }
        }
        setExpandedRows(prev => ({ ...prev, [productId]: !isCurrentlyExpanded }));
    };

    const handleNextPage = () => {
        if (!isLastPage) {
            setPage(p => p + 1);
            fetchData('next', lastVisible);
        }
    };

    const handlePrevPage = () => {
        setLastVisible(null);
        fetchData('first');
    };

    const handleFilterChange = (type, value = '') => {
        if (activeFilter.type === type && activeFilter.value === value) {
            setActiveFilter({ type: 'none', value: '' });
        } else {
            setActiveFilter({ type, value });
        }
    };
    
    const handlePrint = async () => {
        const originalTitle = document.title;
        document.title = `BaoCao_TonKho_TongHop_${new Date().toLocaleDateString('vi-VN')}`;

        const allProductIds = summaries.map(s => s.id);
        const fetchPromises = allProductIds.map(id => {
            if (!lotDetails[id]) return toggleRow(id);
            return Promise.resolve();
        });
        
        toast.info("Äang chuáº©n bá»‹ dá»¯ liá»‡u Ä‘á»ƒ in, vui lÃ²ng chá»...");
        await Promise.all(fetchPromises);
        
        const allExpanded = allProductIds.reduce((acc, id) => {
            acc[id] = true;
            return acc;
        }, {});
        setExpandedRows(allExpanded);
        
        setTimeout(() => {
            window.print();
            document.title = originalTitle;
            setExpandedRows({});
        }, 500);
    };
    
    return (
        <div className="printable-inventory-area">
            <div className="page-header">
                <h1>Tá»“n Kho Tá»•ng Há»£p</h1>
                {(userRole === 'owner' || userRole === 'admin') && (
                    <button onClick={handlePrint} className="btn-secondary" style={{width: 'auto'}}>
                        <FiPrinter style={{marginRight: '5px'}} />
                        In BÃ¡o CÃ¡o
                    </button>
                )}
            </div>
            
            <div className="controls-container" style={{justifyContent: 'flex-start', flexWrap: 'wrap'}}>
                 <div className="filter-group">
                    <button className={activeFilter.value === 'MED' ? 'active' : ''} onClick={() => handleFilterChange('team', 'MED')}>Lá»c hÃ ng MED</button>
                    <button className={activeFilter.value === 'BIO' ? 'active' : ''} onClick={() => handleFilterChange('team', 'BIO')}>Lá»c hÃ ng BIO</button>
                    <button className={activeFilter.value === 'Spare Part' ? 'active' : ''} onClick={() => handleFilterChange('team', 'Spare Part')}>Lá»c hÃ ng Spare Part</button>
                </div>
                <div className="filter-group">
                    <button className={activeFilter.type === 'near_expiry' ? 'active' : ''} onClick={() => handleFilterChange('near_expiry')}>Lá»c hÃ ng cáº­n date</button>
                    <button className={activeFilter.type === 'expired' ? 'active' : ''} onClick={() => handleFilterChange('expired')}>Lá»c hÃ ng háº¿t date</button>
                </div>
                <div className="search-container" style={{ flexGrow: 1, maxWidth: '400px' }}>
                    <input
                        type="text"
                        placeholder="TÃ¬m theo MÃ£ hÃ ng hoáº·c Sá»‘ lÃ´..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
            </div>

            {loading ? <Spinner /> : (
                <>
                    <div className="table-container">
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th style={{width: '50px'}}></th>
                                    <th>MÃ£ hÃ ng</th>
                                    <th>TÃªn hÃ ng</th>
                                    <th>HSD Gáº§n Nháº¥t</th>
                                    <th>Tá»•ng Tá»“n</th>
                                    <th>ÄVT</th>
                                    <th>Nhiá»‡t Ä‘á»™ BQ</th>
                                    <th>Team</th>
                                </tr>
                            </thead>
                            <tbody>
                                {summaries.map(product => (
                                    <React.Fragment key={product.id}>
                                        <tr 
                                            onClick={() => toggleRow(product.id)} 
                                            style={{cursor: 'pointer'}}
                                            className={getRowColorByExpiry(product.nearestExpiryDate)}
                                        >
                                            <td>{expandedRows[product.id] ? <FiChevronDown /> : <FiChevronRight />}</td>
                                            <td data-label="MÃ£ hÃ ng"><strong>{product.id}</strong></td>
                                            <td data-label="TÃªn hÃ ng" style={{textAlign: 'left'}}>{product.productName}</td>
                                            <td data-label="HSD Gáº§n Nháº¥t">{formatDate(product.nearestExpiryDate)}</td>
                                            <td data-label="Tá»•ng Tá»“n"><strong>{product.totalRemaining}</strong></td>
                                            <td data-label="ÄVT">{product.unit}</td>
                                            <td data-label="Nhiá»‡t Ä‘á»™ BQ"><TempBadge temperature={product.storageTemp} /></td>
                                            <td data-label="Team"><TeamBadge team={product.team} /></td>
                                        </tr>
                                        {expandedRows[product.id] && (
                                            <tr className="lot-details-row">
                                                <td colSpan="8">
                                                    <div className="lot-details-container">
                                                        {loadingLots[product.id] ? (
                                                            <SkeletonTheme baseColor="#e9ecef" highlightColor="#f8f9fa">
                                                                <h4><Skeleton width={200} /></h4>
                                                                <ul>
                                                                    <li><Skeleton height={35} count={3} style={{ marginBottom: '8px' }}/></li>
                                                                </ul>
                                                            </SkeletonTheme>
                                                        ) : (
                                                            (lotDetails[product.id] && lotDetails[product.id].length > 0) ? (
                                                                <>
                                                                    <h4>Chi tiáº¿t cÃ¡c lÃ´ hÃ ng (FEFO):</h4>
                                                                    <ul>
                                                                        {lotDetails[product.id].map(lot => (
                                                                            <li key={lot.id} className={`lot-item ${getLotItemColorClass(lot.expiryDate)}`}>
                                                                                <span>LÃ´: <strong>{lot.lotNumber}</strong></span>
                                                                                <span>HSD: <strong>{formatDate(lot.expiryDate)}</strong></span>
                                                                                <span>Tá»“n: <strong>{lot.quantityRemaining}</strong></span>
                                                                            </li>
                                                                        ))}
                                                                    </ul>
                                                                </>
                                                            ) : <p>KhÃ´ng cÃ³ lÃ´ nÃ o cÃ²n tá»“n kho cho sáº£n pháº©m nÃ y.</p>
                                                        )}
                                                    </div>
                                                </td>
                                            </tr>
                                        )}
                                    </React.Fragment>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    {!searchTerm && (
                        <div className="pagination-controls">
                            <button onClick={handlePrevPage} disabled={page <= 1}>
                                <FiChevronLeft /> Trang TrÆ°á»›c
                            </button>
                            <span>Trang {page}</span>
                            <button onClick={handleNextPage} disabled={isLastPage}>
                                Trang Tiáº¿p <FiChevronRight />
                            </button>
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default InventorySummaryPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\LotTracePage.jsx ---


// src/pages/LotTracePage.jsx
import React, { useState } from 'react';
import { db } from '../firebaseConfig';
import {
  collection,
  query,
  where,
  getDocs,
  orderBy,
} from 'firebase/firestore';
import LotJourneyExplorer from '../components/LotJourneyExplorer';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import Spinner from '../components/Spinner'; // <-- ÄÃƒ THÃŠM

const LotTracePage = () => {
  const [lotNumber, setLotNumber] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [importRecords, setImportRecords] = useState([]);
  const [exportHistory, setExportHistory] = useState([]);
  const [searchAttempted, setSearchAttempted] = useState(false);
  const [selectedNode, setSelectedNode] = useState(null);

  const handleTrace = async () => {
    if (!lotNumber) {
      toast.warn('Vui lÃ²ng nháº­p sá»‘ lÃ´ cáº§n truy váº¿t.');
      return;
    }
    setIsLoading(true);
    setImportRecords([]);
    setExportHistory([]);
    setSearchAttempted(true);
    setSelectedNode(null);
    try {
      const lotQuery = query(
        collection(db, 'inventory_lots'),
        where('lotNumber', '==', lotNumber.trim()),
        orderBy('importDate', 'asc'),
      );
      const lotSnapshot = await getDocs(lotQuery);

      if (lotSnapshot.empty) {
        setIsLoading(false);
        return;
      }

      const foundImports = lotSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setImportRecords(foundImports);

      const history = [];
      const exportsQuery = query(
        collection(db, 'export_tickets'),
        orderBy('createdAt', 'asc'),
      );
      const exportsSnapshot = await getDocs(exportsQuery);

      exportsSnapshot.forEach((doc) => {
        const ticket = doc.data();
        const exportedItem = ticket.items.find(
          (item) => item.lotNumber === lotNumber.trim(),
        );
        if (exportedItem) {
          history.push({
            ticketId: doc.id,
            exportDate: ticket.createdAt,
            customer: ticket.customer,
            quantityExported: exportedItem.quantityToExport || exportedItem.quantityExported || 0,
          });
        }
      });
      setExportHistory(history);
    } catch (error) {
      console.error('Lá»—i khi truy váº¿t lÃ´ hÃ ng: ', error);
      toast.error('ÄÃ£ cÃ³ lá»—i xáº£y ra khi truy váº¿t.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleNodeClick = (event, node) => {
    setSelectedNode(node.data);
  };

  const handlePaneClick = () => {
    setSelectedNode(null);
  };

  const filteredExportHistory = selectedNode && selectedNode.type === 'customer'
    ? exportHistory.filter(item => item.customer === selectedNode.name)
    : exportHistory;

  const masterInfo = importRecords.length > 0 ? importRecords[0] : null;
  const totalImported = importRecords.reduce(
    (sum, record) => sum + record.quantityImported,
    0,
  );
  const totalRemaining = importRecords.reduce(
    (sum, record) => sum + record.quantityRemaining,
    0,
  );

  return (
    <div>
      <div className="page-header">
        <h1>Truy Váº¿t LÃ´ HÃ ng</h1>
      </div>

      <div className="form-section">
        <div className="form-group">
          <label>Nháº­p Sá»‘ LÃ´ Cáº§n Truy Váº¿t</label>
          <div style={{ display: 'flex', gap: '10px' }}>
            <input
              type="text"
              value={lotNumber}
              onChange={(e) => setLotNumber(e.target.value)}
              placeholder="VÃ­ dá»¥: 4523468"
              onKeyDown={(e) => e.key === 'Enter' && handleTrace()}
              style={{ flexGrow: 1 }}
            />
            <button
              onClick={handleTrace}
              className="btn-primary"
              disabled={isLoading}
              style={{ width: 'auto' }}
            >
              {isLoading ? 'Äang tÃ¬m...' : 'Truy váº¿t'}
            </button>
          </div>
        </div>
      </div>

      {isLoading && <Spinner />}

      {!isLoading && searchAttempted && importRecords.length === 0 && (
        <div className="form-section">
          <h4>KhÃ´ng tÃ¬m tháº¥y thÃ´ng tin cho sá»‘ lÃ´ "{lotNumber}"</h4>
        </div>
      )}

      {!isLoading && importRecords.length > 0 && (
        <div>
          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>HÃ nh TrÃ¬nh LÃ´ HÃ ng: {masterInfo.lotNumber}</h3>
            <LotJourneyExplorer
              importRecords={importRecords}
              exportHistory={exportHistory}
              onNodeClick={handleNodeClick}
              onPaneClick={handlePaneClick}
            />
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>ThÃ´ng Tin Chung & TÃ³m Táº¯t</h3>
            <div className="compact-info-grid" style={{ gridTemplateColumns: '1fr 1fr 1fr' }}>
              <div><label>MÃ£ hÃ ng</label><p><strong>{masterInfo.productId}</strong></p></div>
              <div><label>TÃªn hÃ ng</label><p>{masterInfo.productName}</p></div>
              <div><label>NhÃ  cung cáº¥p (láº§n nháº­p Ä‘áº§u)</label><p>{masterInfo.supplier || '(khÃ´ng cÃ³)'}</p></div>
              <div><label>ÄVT</label><p>{masterInfo.unit}</p></div>
              <div><label>Quy cÃ¡ch</label><p>{masterInfo.packaging}</p></div>
              <div><label>Sá»‘ lÃ´</label><p><strong>{masterInfo.lotNumber}</strong></p></div>
              <div><label>HSD</label><p><strong>{formatDate(masterInfo.expiryDate)}</strong></p></div>
              <div><label>Tá»•ng Ä‘Ã£ nháº­p</label><p style={{color: 'blue', fontSize: '18px'}}><strong>{totalImported}</strong></p></div>
              <div><label>Tá»•ng cÃ²n láº¡i</label><p style={{color: 'green', fontSize: '18px'}}><strong>{totalRemaining}</strong></p></div>
            </div>
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>Chi Tiáº¿t CÃ¡c Láº§n Nháº­p Kho</h3>
            <table className="products-table">
              <thead>
                <tr>
                  <th>NgÃ y nháº­p</th>
                  <th>NhÃ  cung cáº¥p</th>
                  <th>Sá»‘ lÆ°á»£ng nháº­p</th>
                  <th>SL cÃ²n láº¡i cá»§a láº§n nháº­p</th>
                </tr>
              </thead>
              <tbody>
                {importRecords.map((record) => (
                  <tr key={record.id}>
                    <td>{formatDate(record.importDate)}</td>
                    <td>{record.supplier || '(khÃ´ng cÃ³)'}</td>
                    <td>{record.quantityImported}</td>
                    <td>{record.quantityRemaining}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="form-section">
            <h3 style={{ marginTop: 0 }}>
              {selectedNode && selectedNode.type === 'customer' 
                ? `Lá»‹ch Sá»­ Xuáº¥t Kho cho: ${selectedNode.name}`
                : 'ToÃ n Bá»™ Lá»‹ch Sá»­ Xuáº¥t Kho'
              }
            </h3>
            {filteredExportHistory.length > 0 ? (
              <table className="products-table">
                <thead>
                  <tr>
                    <th>NgÃ y xuáº¥t</th>
                    <th>ID Phiáº¿u xuáº¥t</th>
                    <th>KhÃ¡ch hÃ ng</th>
                    <th>Sá»‘ lÆ°á»£ng Ä‘Ã£ xuáº¥t</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredExportHistory.map((item) => (
                    <tr key={item.ticketId}>
                      <td>{formatDate(item.exportDate)}</td>
                      <td>{item.ticketId}</td>
                      <td>{item.customer}</td>
                      <td>{item.quantityExported}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (<p>LÃ´ hÃ ng nÃ y chÆ°a Ä‘Æ°á»£c xuáº¥t kho láº§n nÃ o.</p>)}
          </div>
        </div>
      )}
    </div>
  );
};

export default LotTracePage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\NewExportPage.jsx ---


// src/pages/NewExportPage.jsx
import React, { useState, useRef, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, doc, getDoc, updateDoc, addDoc, serverTimestamp } from 'firebase/firestore';
import { FiXCircle, FiChevronDown } from 'react-icons/fi';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';

const NewExportPage = () => {
    const today = new Date();
    const formattedDate = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;
    const [exportDate, setExportDate] = useState(formattedDate);
    const [customerId, setCustomerId] = useState('');
    const [customerName, setCustomerName] = useState('');
    const [description, setDescription] = useState('');
    const [items, setItems] = useState([{ 
        id: Date.now(), 
        productId: '', productName: '', unit: '', packaging: '', storageTemp: '',
        availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '',
        expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '' 
    }]);
    const [isProcessing, setIsProcessing] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const lotSelectRefs = useRef([]);
    const quantityInputRefs = useRef([]);
    const [allCustomers, setAllCustomers] = useState([]);

    useEffect(() => {
        const fetchCustomers = async () => {
            const q = query(collection(db, "partners"), where("partnerType", "==", "customer"));
            const querySnapshot = await getDocs(q);
            const customerList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAllCustomers(customerList);
        };
        fetchCustomers();
    }, []);

    const handleCustomerSearch = async () => {
        if (!customerId) {
            setCustomerName('');
            return;
        }
        try {
            const partnerRef = doc(db, 'partners', customerId.toUpperCase());
            const partnerSnap = await getDoc(partnerRef);
            if (partnerSnap.exists() && partnerSnap.data().partnerType === 'customer') {
                setCustomerName(partnerSnap.data().partnerName);
            } else {
                setCustomerName('');
                toast.error(`KhÃ´ng tÃ¬m tháº¥y KhÃ¡ch hÃ ng vá»›i mÃ£ "${customerId}"`);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m khÃ¡ch hÃ ng:", error);
            setCustomerName('');
        }
    };

    const getValidSlipData = () => {
        if (!customerId || !customerName) {
            toast.warn('Vui lÃ²ng nháº­p MÃ£ KhÃ¡ch hÃ ng há»£p lá»‡.');
            return null;
        }
        const validItems = items.filter(item => item.selectedLotId && Number(item.quantityToExport) > 0);
        if (validItems.length === 0) {
            toast.warn('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t máº·t hÃ ng vÃ  nháº­p sá»‘ lÆ°á»£ng xuáº¥t.');
            return null;
        }
        return {
            exportDate, customerId: customerId.toUpperCase(), customer: customerName,
            description, items: validItems.map(item => ({
                productId: item.productId, productName: item.productName, lotId: item.selectedLotId,
                lotNumber: item.lotNumber, expiryDate: item.expiryDate, unit: item.unit,
                packaging: item.packaging, storageTemp: item.storageTemp,
                quantityToExport: Number(item.quantityToExport), notes: item.notes
            })), createdAt: serverTimestamp()
        };
    };

    const resetForm = () => {
        setCustomerId(''); setCustomerName(''); setDescription('');
        setItems([{ 
            id: Date.now(), productId: '', productName: '', unit: '', packaging: '', storageTemp: '', 
            availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', 
            quantityRemaining: 0, quantityToExport: '', notes: '' 
        }]);
    };

    const handleSaveDraft = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;
        setIsProcessing(true);
        try {
            await addDoc(collection(db, 'export_tickets'), { ...slipData, status: 'pending' });
            toast.success('LÆ°u nhÃ¡p phiáº¿u xuáº¥t thÃ nh cÃ´ng!');
            resetForm();
        } catch (error) {
            console.error("Lá»—i khi lÆ°u nhÃ¡p phiáº¿u xuáº¥t: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi lÆ°u nhÃ¡p.');
        } finally {
            setIsProcessing(false);
        }
    };

    const handleDirectExport = async () => {
        const slipData = getValidSlipData();
        if (!slipData) return;
        setConfirmModal({isOpen: false});
        setIsProcessing(true);
        try {
            for (const item of slipData.items) {
                const lotRef = doc(db, 'inventory_lots', item.lotId);
                const lotSnap = await getDoc(lotRef);
                if(lotSnap.exists()){
                    const currentQuantity = lotSnap.data().quantityRemaining;
                    const newQuantityRemaining = currentQuantity - item.quantityToExport;
                    await updateDoc(lotRef, { quantityRemaining: newQuantityRemaining });
                }
            }
            await addDoc(collection(db, 'export_tickets'), { ...slipData, status: 'completed' });
            toast.success('Xuáº¥t kho trá»±c tiáº¿p thÃ nh cÃ´ng!');
            resetForm();
        } catch (error) {
            console.error("Lá»—i khi xuáº¥t kho trá»±c tiáº¿p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i trong quÃ¡ trÃ¬nh xuáº¥t kho.');
        } finally {
            setIsProcessing(false);
        }
    };

    const promptForDirectExport = () => {
        if (!getValidSlipData()) return;
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xuáº¥t kho?",
            message: "HÃ nh Ä‘á»™ng nÃ y sáº½ trá»« tá»“n kho ngay láº­p tá»©c. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n tiáº¿p tá»¥c?",
            onConfirm: handleDirectExport
        });
    };

    const handleProductSearch = async (index, productId) => {
        if (!productId) return;
        const newItems = [...items];
        const currentItem = newItems[index];
        Object.assign(currentItem, { productName: '', unit: '', packaging: '', storageTemp: '', availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', quantityRemaining: 0 });
        setItems(newItems);
        try {
          const productRef = doc(db, 'products', productId);
          const productSnap = await getDoc(productRef);
          if (!productSnap.exists()) {
            toast.warn(`KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m vá»›i mÃ£: ${productId}`);
            return;
          }
          const productData = productSnap.data();
          currentItem.productName = productData.productName;
          currentItem.unit = productData.unit;
          currentItem.packaging = productData.packaging;
          currentItem.storageTemp = productData.storageTemp;
          const lotsQuery = query(collection(db, 'inventory_lots'), where("productId", "==", productId), where("quantityRemaining", ">", 0));
          const lotsSnapshot = await getDocs(lotsQuery);
          if (lotsSnapshot.empty) {
            toast.warn(`Cáº£nh bÃ¡o: Sáº£n pháº©m mÃ£ '${productId}' Ä‘Ã£ háº¿t hÃ ng tá»“n kho.`);
            currentItem.availableLots = [];
          } else {
            let foundLots = lotsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            foundLots.sort((a, b) => (a.expiryDate.toDate()) - (b.expiryDate.toDate()));
            currentItem.availableLots = foundLots;
            setTimeout(() => lotSelectRefs.current[index]?.focus(), 0);
          }
        } catch (error) {
          console.error("Lá»—i khi tÃ¬m kiáº¿m:", error);
          toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi tÃ¬m kiáº¿m.");
        } finally {
          setItems([...newItems]);
        }
    };
    
    const handleLotSelection = (index, selectedLotId) => {
        const newItems = [...items];
        const currentItem = newItems[index];
        currentItem.selectedLotId = selectedLotId;
        const selectedLot = currentItem.availableLots.find(lot => lot.id === selectedLotId);
        if (selectedLot) {
          currentItem.lotNumber = selectedLot.lotNumber;
          currentItem.expiryDate = formatDate(selectedLot.expiryDate);
          currentItem.quantityRemaining = selectedLot.quantityRemaining;
          currentItem.displayLotText = selectedLot.lotNumber;
          setTimeout(() => quantityInputRefs.current[index]?.focus(), 0);
        } else {
            Object.assign(currentItem, { lotNumber: '', expiryDate: '', quantityRemaining: 0, displayLotText: '' });
        }
        setItems(newItems);
    };
      
    const handleItemChange = (index, field, value) => {
        const newItems = [...items];
        if (field === 'quantityToExport') {
          const val = Number(value);
          if (val < 0) return;
          if (val > newItems[index].quantityRemaining) {
            toast.warn('Cáº£nh bÃ¡o: Sá»‘ lÆ°á»£ng xuáº¥t vÆ°á»£t quÃ¡ sá»‘ lÆ°á»£ng tá»“n!');
            newItems[index][field] = newItems[index].quantityRemaining;
          } else {
            newItems[index][field] = val;
          }
        } else {
          newItems[index][field] = value;
        }
        setItems(newItems);
    };
    
    const addNewRow = () => {
        setItems([...items, { id: Date.now(), productId: '', productName: '', unit: '', packaging: '', storageTemp: '', availableLots: [], selectedLotId: '', lotNumber: '', displayLotText: '', expiryDate: '', quantityRemaining: 0, quantityToExport: '', notes: '' }]);
    };
    
    const handleRemoveRow = (indexToRemove) => {
        if (items.length <= 1) return;
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n xÃ³a dÃ²ng?",
            message: "Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a dÃ²ng hÃ ng nÃ y khá»i phiáº¿u xuáº¥t?",
            onConfirm: () => {
                setItems(prevItems => prevItems.filter((_, index) => index !== indexToRemove));
                setConfirmModal({ isOpen: false });
            }
        });
    };

    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText="XÃ¡c nháº­n"
            />
            <h1>Táº¡o Phiáº¿u Xuáº¥t Kho</h1>
            <div className="form-section">
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y xuáº¥t</label>
                        <input type="text" value={exportDate} onChange={(e) => setExportDate(e.target.value)} />
                    </div>
                    <div className="form-group">
                        <label>MÃ£ KhÃ¡ch HÃ ng</label>
                        <input
                            list="customers-list"
                            type="text"
                            placeholder="Nháº­p hoáº·c chá»n mÃ£ KH..."
                            value={customerId}
                            onChange={e => setCustomerId(e.target.value)}
                            onBlur={handleCustomerSearch}
                        />
                        <datalist id="customers-list">
                            {allCustomers.map(cus => (
                                <option key={cus.id} value={cus.id}>
                                    {cus.partnerName}
                                </option>
                            ))}
                        </datalist>
                    </div>
                    <div className="form-group">
                        <label>TÃªn KhÃ¡ch HÃ ng / NÆ¡i nháº­n</label>
                        <input
                            type="text"
                            value={customerName}
                            readOnly
                            style={{ backgroundColor: '#f0f0f0', cursor: 'not-allowed' }}
                        />
                    </div>
                </div>
                <div className="form-group">
                    <label>Diá»…n giáº£i</label>
                    <textarea rows="2" placeholder="Ghi chÃº cho phiáº¿u xuáº¥t..." value={description} onChange={e => setDescription(e.target.value)}></textarea>
                </div>
            </div>

            <h2>Chi Tiáº¿t HÃ ng HÃ³a Xuáº¥t Kho</h2>
            <div className="item-details-grid" style={{ gridTemplateColumns: '1.5fr 2.5fr 2fr 0.8fr 1.5fr 1fr 1.5fr 0.5fr' }}>
                <div className="grid-header">MÃ£ hÃ ng</div>
                <div className="grid-header">TÃªn hÃ ng</div>
                <div className="grid-header">Sá»‘ lÃ´</div>
                <div className="grid-header">ÄVT</div>
                <div className="grid-header">Quy cÃ¡ch</div>
                <div className="grid-header">SL Xuáº¥t</div>
                <div className="grid-header">Ghi chÃº</div>
                <div className="grid-header">XÃ³a</div>
                {items.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <div className="grid-cell">
                            <input type="text" placeholder="Nháº­p mÃ£ hÃ ng..." value={item.productId}
                                onChange={e => handleItemChange(index, 'productId', e.target.value.toUpperCase())}
                                onBlur={e => handleProductSearch(index, e.target.value)} />
                        </div>
                        <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                        <div className="grid-cell">
                            {item.selectedLotId ? (
                                <div className="selected-lot-view">
                                    <input type="text" value={item.displayLotText} readOnly className="selected-lot-input" />
                                    <button type="button" onClick={() => handleLotSelection(index, '')} className="change-lot-btn">
                                        <FiChevronDown />
                                    </button>
                                </div>
                            ) : (
                                <select
                                    ref={el => lotSelectRefs.current[index] = el}
                                    value={item.selectedLotId}
                                    onChange={e => handleLotSelection(index, e.target.value)}
                                    disabled={item.availableLots.length === 0}
                                    style={{width: '100%'}}
                                >
                                    <option value="">-- Chá»n lÃ´ tá»“n kho --</option>
                                    {item.availableLots.map(lot => (
                                        <option key={lot.id} value={lot.id}>
                                        {`LÃ´: ${lot.lotNumber} | HSD: ${formatDate(lot.expiryDate)} | Tá»“n: ${lot.quantityRemaining}`}
                                        </option>
                                    ))}
                                </select>
                            )}
                        </div>
                        <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                        <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                        <div className="grid-cell">
                            <input type="number" value={item.quantityToExport}
                                ref={el => quantityInputRefs.current[index] = el}
                                onChange={e => handleItemChange(index, 'quantityToExport', e.target.value)} />
                        </div>
                        <div className="grid-cell"><textarea value={item.notes || ''} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
                        <div className="grid-cell">
                            <button type="button" className="btn-icon btn-delete" onClick={() => handleRemoveRow(index)}><FiXCircle /></button>
                        </div>
                    </React.Fragment>
                ))}
            </div>
            <button onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>+ ThÃªm dÃ²ng</button>
            <div className="page-actions">
                <button onClick={handleSaveDraft} className="btn-secondary" disabled={isProcessing}>
                    {isProcessing ? 'Äang xá»­ lÃ½...' : 'LÆ°u NhÃ¡p'}
                </button>
                <button onClick={promptForDirectExport} className="btn-primary" disabled={isProcessing}>
                    {isProcessing ? 'Äang xá»­ lÃ½...' : 'Xuáº¥t Kho Trá»±c Tiáº¿p'}
                </button>
            </div>
        </div>
    );
};

export default NewExportPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\NewImportPage.jsx ---


// src/pages/NewImportPage.jsx
import React, { useState, useRef, useEffect } from 'react';
import { db } from '../firebaseConfig';
import { doc, getDoc, collection, addDoc, serverTimestamp, Timestamp, query, where, getDocs } from 'firebase/firestore';
import AddNewProductAndLotModal from '../components/AddNewProductAndLotModal';
import AddNewLotModal from '../components/AddNewLotModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { parseDateString, formatExpiryDate, formatDate } from '../utils/dateUtils';
import { FiInfo } from 'react-icons/fi';
import { toast } from 'react-toastify';

const NewImportPage = () => {
    const today = new Date();
    const formattedDate = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;

    const [importDate, setImportDate] = useState(formattedDate);
    const [supplierId, setSupplierId] = useState('');
    const [supplierName, setSupplierName] = useState('');
    const [description, setDescription] = useState('');
    const [items, setItems] = useState([
        { id: 1, productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }
    ]);
    const [isSaving, setIsSaving] = useState(false);
    const [newProductModal, setNewProductModal] = useState({ isOpen: false, productId: '', index: -1 });
    const [newLotModal, setNewLotModal] = useState({ isOpen: false, index: -1 });
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });
    const inputRefs = useRef([]);
    const [allSuppliers, setAllSuppliers] = useState([]);

    useEffect(() => {
        const fetchSuppliers = async () => {
            const q = query(collection(db, "partners"), where("partnerType", "==", "supplier"));
            const querySnapshot = await getDocs(q);
            const supplierList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAllSuppliers(supplierList);
        };
        fetchSuppliers();
    }, []);

    const handleSupplierSearch = async () => {
        if (!supplierId) {
            setSupplierName('');
            return;
        }
        try {
            const partnerRef = doc(db, 'partners', supplierId.toUpperCase());
            const partnerSnap = await getDoc(partnerRef);
            if (partnerSnap.exists() && partnerSnap.data().partnerType === 'supplier') {
                setSupplierName(partnerSnap.data().partnerName);
            } else {
                setSupplierName('');
                // --- THAY THáº¾ ALERT Báº°NG TOAST ---
                toast.error(`KhÃ´ng tÃ¬m tháº¥y NhÃ  cung cáº¥p vá»›i mÃ£ "${supplierId}" hoáº·c Ä‘á»‘i tÃ¡c khÃ´ng pháº£i lÃ  NhÃ  cung cáº¥p.`);
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m nhÃ  cung cáº¥p:", error);
            setSupplierName('');
        }
    };
    
    const handleExpiryDateBlur = (index, value) => {
        const newItems = [...items];
        newItems[index].expiryDate = formatExpiryDate(value);
        setItems(newItems);
    };

    const handleItemChange = (index, field, value) => {
        const newItems = [...items];
        newItems[index][field] = value;
        
        if (field === 'productId' || field === 'lotNumber') {
            newItems[index].lotStatus = 'unchecked';
            newItems[index].expiryDate = '';
            newItems[index].existingLotInfo = null;
        }
        
        setItems(newItems);
    };

    const checkExistingLot = async (index) => {
        const currentItem = items[index];
        if (!currentItem.productId || !currentItem.lotNumber) return;

        try {
            const q = query(
                collection(db, "inventory_lots"),
                where("productId", "==", currentItem.productId.trim()),
                where("lotNumber", "==", currentItem.lotNumber.trim())
            );
            const querySnapshot = await getDocs(q);
            
            const newItems = [...items];
            if (!querySnapshot.empty) {
                const existingLotData = querySnapshot.docs[0].data();
                newItems[index].lotStatus = 'exists';
                newItems[index].expiryDate = formatDate(existingLotData.expiryDate);
                newItems[index].existingLotInfo = {
                    quantityRemaining: existingLotData.quantityRemaining,
                    expiryDate: formatDate(existingLotData.expiryDate)
                };
            } else {
                newItems[index].lotStatus = 'new';
                newItems[index].existingLotInfo = null;
            }
            setItems(newItems);
        } catch (error) {
            console.error("Lá»—i khi kiá»ƒm tra lÃ´ tá»“n táº¡i: ", error);
        }
    };

    const handleNewLotDeclared = (index, declaredExpiryDate) => {
        const newItems = [...items];
        newItems[index].expiryDate = declaredExpiryDate;
        newItems[index].lotStatus = 'declared';
        setItems(newItems);
        setNewLotModal({ isOpen: false, index: -1 });
    };

    const handleProductSearch = async (index, productId) => {
        if (!productId) return;
        const newItems = [...items];
        try {
            const productRef = doc(db, 'products', productId);
            const productSnap = await getDoc(productRef);
            if (productSnap.exists()) {
                const productData = productSnap.data();
                newItems[index] = {
                    ...newItems[index],
                    productName: productData.productName || '',
                    unit: productData.unit || '',
                    packaging: productData.packaging || '',
                    storageTemp: productData.storageTemp || '',
                    team: productData.team || '',
                    manufacturer: productData.manufacturer || '',
                    productNotFound: false,
                };
            } else {
                newItems[index].productName = '';
                newItems[index].productNotFound = true;
            }
        } catch (error) {
            console.error("Lá»—i khi tÃ¬m kiáº¿m sáº£n pháº©m:", error);
            newItems[index].productName = 'Lá»—i khi tÃ¬m kiáº¿m!';
            newItems[index].productNotFound = false;
        } finally {
            setItems(newItems);
        }
    };
    
    const handleNewProductCreated = (newData) => {
        const newItems = [...items];
        const { index } = newProductModal;
        newItems[index] = {
            ...newItems[index], 
            ...newData,
            productNotFound: false,
        };
        setItems(newItems);
        setNewProductModal({ isOpen: false, productId: '', index: -1 });
        setTimeout(() => {
            inputRefs.current[index * 3 + 2]?.focus();
        }, 100);
    };

    const handleKeyDown = (e, rowIndex, inputIndex) => {
        if (e.key === 'Tab' && !e.shiftKey) {
            e.preventDefault();
            const nextInputIndex = (rowIndex * 3) + inputIndex + 1;
            const nextInput = inputRefs.current[nextInputIndex];
            if (nextInput) {
                nextInput.focus();
            }
        }
    };

    const addNewRow = () => {
        setItems([
            ...items,
            { id: Date.now(), productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }
        ]);
    };

    const handleSaveSlip = async () => {
        if (!supplierId || !supplierName) {
            toast.warn('Vui lÃ²ng nháº­p MÃ£ NhÃ  cung cáº¥p há»£p lá»‡.');
            return;
        }
        const validItems = items.filter(item => item.productId && item.quantity > 0);
        if (validItems.length === 0) {
            toast.warn('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡ vÃ o phiáº¿u.');
            return;
        }
        setIsSaving(true);
        try {
            const slipData = {
                importDate: formattedDate,
                supplierId: supplierId.toUpperCase(),
                supplier: supplierName,
                description,
                items: validItems,
                status: 'pending',
                createdAt: serverTimestamp()
            };
            const docRef = await addDoc(collection(db, 'import_tickets'), slipData);
            toast.success(`LÆ°u táº¡m phiáº¿u nháº­p thÃ nh cÃ´ng! ID phiáº¿u: ${docRef.id}`);
            setSupplierId('');
            setSupplierName('');
            setDescription('');
            setItems([{ id: 1, productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }]);
        } catch (error) {
            console.error("Lá»—i khi lÆ°u phiáº¿u nháº­p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi lÆ°u phiáº¿u.');
        } finally {
            setIsSaving(false);
        }
    };

    const handleDirectImport = async () => {
        setConfirmModal({ isOpen: false });
        setIsSaving(true);
        try {
            const validItems = items.filter(item => item.productId && item.quantity > 0);
            for (const item of validItems) {
                const expiryDateObject = parseDateString(item.expiryDate);
                if (!expiryDateObject) {
                    toast.error(`HSD cá»§a máº·t hÃ ng ${item.productName} (${item.lotNumber}) cÃ³ Ä‘á»‹nh dáº¡ng sai.`);
                    setIsSaving(false);
                    return;
                }
                const expiryTimestamp = Timestamp.fromDate(expiryDateObject);
                const newLotData = {
                    importDate: Timestamp.now(),
                    productId: item.productId,
                    productName: item.productName,
                    lotNumber: item.lotNumber,
                    expiryDate: expiryTimestamp,
                    unit: item.unit,
                    packaging: item.packaging,
                    storageTemp: item.storageTemp,
                    team: item.team,
                    manufacturer: item.manufacturer,
                    quantityImported: Number(item.quantity),
                    quantityRemaining: Number(item.quantity),
                    notes: item.notes,
                    supplier: supplierName,
                };
                await addDoc(collection(db, "inventory_lots"), newLotData);
            }
            const slipData = {
                importDate: formattedDate,
                supplierId: supplierId.toUpperCase(),
                supplier: supplierName,
                description,
                items: validItems,
                status: 'completed',
                createdAt: serverTimestamp()
            };
            await addDoc(collection(db, 'import_tickets'), slipData);
            toast.success('Nháº­p kho trá»±c tiáº¿p thÃ nh cÃ´ng!');
            setSupplierId('');
            setSupplierName('');
            setDescription('');
            setItems([{ id: 1, productId: '', productName: '', lotNumber: '', expiryDate: '', unit: '', packaging: '', quantity: '', notes: '', storageTemp: '', team: '', manufacturer: '', productNotFound: false, lotStatus: 'unchecked', existingLotInfo: null }]);
        } catch (error) {
            console.error("Lá»—i khi nháº­p kho trá»±c tiáº¿p: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi nháº­p kho trá»±c tiáº¿p.');
        } finally {
            setIsSaving(false);
        }
    };
    
    const promptForDirectImport = () => {
        if (!supplierId || !supplierName) {
            toast.warn('Vui lÃ²ng nháº­p MÃ£ NhÃ  cung cáº¥p há»£p lá»‡.');
            return;
        }
        if (items.filter(item => item.productId && item.quantity > 0).length === 0) {
            toast.warn('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t máº·t hÃ ng há»£p lá»‡.');
            return;
        }
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n nháº­p kho trá»±c tiáº¿p?",
            message: "Thao tÃ¡c nÃ y sáº½ cáº­p nháº­t tá»“n kho ngay láº­p tá»©c vÃ  khÃ´ng thá»ƒ hoÃ n tÃ¡c. Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n tiáº¿p tá»¥c?",
            onConfirm: handleDirectImport
        });
    };

    return (
        <div>
            <ConfirmationModal 
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={confirmModal.onConfirm}
                onCancel={() => setConfirmModal({ isOpen: false })}
                confirmText="XÃ¡c nháº­n"
            />
            {newProductModal.isOpen && (
                <AddNewProductAndLotModal
                    productId={newProductModal.productId}
                    onClose={() => setNewProductModal({ isOpen: false, productId: '', index: -1 })}
                    onSave={handleNewProductCreated}
                />
            )}
            {newLotModal.isOpen && (
                <AddNewLotModal
                    productId={items[newLotModal.index].productId}
                    productName={items[newLotModal.index].productName}
                    lotNumber={items[newLotModal.index].lotNumber}
                    onClose={() => setNewLotModal({ isOpen: false, index: -1 })}
                    onSave={(expiry) => handleNewLotDeclared(newLotModal.index, expiry)}
                />
            )}

            <h1>Táº¡o Phiáº¿u Nháº­p Kho</h1>
            <div className="form-section">
                <div className="form-row">
                    <div className="form-group">
                        <label>NgÃ y nháº­p</label>
                        <input type="text" value={importDate} onChange={(e) => setImportDate(e.target.value)} />
                    </div>
                    <div className="form-group">
                        <label>MÃ£ NhÃ  Cung Cáº¥p</label>
                        <input 
                            list="suppliers-list"
                            type="text" 
                            placeholder="Nháº­p hoáº·c chá»n mÃ£ NCC..." 
                            value={supplierId} 
                            onChange={e => setSupplierId(e.target.value)}
                            onBlur={handleSupplierSearch}
                        />
                        <datalist id="suppliers-list">
                            {allSuppliers.map(sup => (
                                <option key={sup.id} value={sup.id}>
                                    {sup.partnerName}
                                </option>
                            ))}
                        </datalist>
                    </div>
                    <div className="form-group">
                        <label>TÃªn NhÃ  Cung Cáº¥p</label>
                        <input 
                            type="text" 
                            value={supplierName} 
                            readOnly 
                            style={{ backgroundColor: '#f0f0f0', cursor: 'not-allowed' }}
                        />
                    </div>
                </div>
                <div className="form-group">
                    <label>Diá»…n giáº£i</label>
                    <textarea rows="2" placeholder="Ghi chÃº cho phiáº¿u nháº­p..." value={description} onChange={e => setDescription(e.target.value)}></textarea>
                </div>
            </div>

            <h2>Chi tiáº¿t hÃ ng hÃ³a</h2>
            <div className="item-details-grid">
                <div className="grid-header">MÃ£ hÃ ng</div>
                <div className="grid-header">TÃªn hÃ ng</div>
                <div className="grid-header">Sá»‘ lÃ´</div>
                <div className="grid-header">HSD</div>
                <div className="grid-header">ÄVT</div>
                <div className="grid-header">Quy cÃ¡ch</div>
                <div className="grid-header">Sá»‘ lÆ°á»£ng</div>
                <div className="grid-header">Ghi chÃº</div>
                <div className="grid-header">Nhiá»‡t Ä‘á»™ BQ</div>
                <div className="grid-header">Team</div>

                {items.map((item, index) => (
                    <React.Fragment key={item.id}>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            <input
                                ref={el => inputRefs.current[index * 3] = el}
                                onKeyDown={(e) => handleKeyDown(e, index, 0)}
                                type="text"
                                value={item.productId}
                                onChange={e => handleItemChange(index, 'productId', e.target.value.toUpperCase())}
                                onBlur={e => handleProductSearch(index, e.target.value)}
                            />
                            {item.productNotFound && (
                                <button
                                    onClick={() => setNewProductModal({ isOpen: true, productId: item.productId, index: index })}
                                    className="btn-link"
                                    style={{ marginTop: '5px', color: '#007bff', cursor: 'pointer', background: 'none', border: 'none', padding: '0', textAlign: 'left', fontSize: '13px' }}
                                >
                                    MÃ£ nÃ y khÃ´ng tá»“n táº¡i. Táº¡o má»›i...
                                </button>
                            )}
                        </div>
                        <div className="grid-cell"><input type="text" value={item.productName} readOnly /></div>
                        <div className="grid-cell" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>
                            <input
                                ref={el => inputRefs.current[index * 3 + 1] = el}
                                onKeyDown={(e) => handleKeyDown(e, index, 1)}
                                type="text"
                                value={item.lotNumber}
                                onChange={e => handleItemChange(index, 'lotNumber', e.target.value)}
                                onBlur={() => checkExistingLot(index)}
                            />
                            {item.lotStatus === 'exists' && item.existingLotInfo && (
                                <div className="existing-lot-info">
                                    <FiInfo />
                                    <span>LÃ´ Ä‘Ã£ cÃ³ | Tá»“n: {item.existingLotInfo.quantityRemaining} | HSD: {item.existingLotInfo.expiryDate}</span>
                                </div>
                            )}
                            {item.lotStatus === 'new' && (
                                <button onClick={() => setNewLotModal({ isOpen: true, index: index })} className="btn-link" style={{marginTop: '5px'}}>
                                    [+] Khai bÃ¡o lÃ´ má»›i...
                                </button>
                            )}
                        </div>
                        <div className="grid-cell">
                            <input 
                                type="text" 
                                placeholder="dd/mm/yyyy" 
                                value={item.expiryDate} 
                                onChange={e => handleItemChange(index, 'expiryDate', e.target.value)} 
                                onBlur={e => handleExpiryDateBlur(index, e.target.value)}
                                readOnly={item.lotStatus === 'exists'}
                                style={{backgroundColor: item.lotStatus === 'exists' ? '#f0f0f0' : '#fff', cursor: item.lotStatus === 'exists' ? 'not-allowed' : 'text'}}
                            />
                        </div>
                        <div className="grid-cell"><input type="text" value={item.unit} readOnly /></div>
                        <div className="grid-cell"><textarea value={item.packaging} readOnly /></div>
                        <div className="grid-cell">
                            <input
                                ref={el => inputRefs.current[index * 3 + 2] = el}
                                type="number"
                                value={item.quantity}
                                onChange={e => handleItemChange(index, 'quantity', e.target.value)}
                            />
                        </div>
                        <div className="grid-cell"><textarea value={item.notes} onChange={e => handleItemChange(index, 'notes', e.target.value)} /></div>
                        <div className="grid-cell"><textarea value={item.storageTemp} readOnly /></div>
                        <div className="grid-cell"><input type="text" value={item.team} readOnly /></div>
                    </React.Fragment>
                ))}
            </div>
            
            <button onClick={addNewRow} className="btn-secondary" style={{ marginTop: '10px' }}>+ ThÃªm dÃ²ng</button>
            <div className="page-actions">
                <button onClick={handleSaveSlip} className="btn-secondary" disabled={isSaving}>
                    {isSaving ? 'Äang lÆ°u...' : 'LÆ°u Táº¡m'}
                </button>
                <button onClick={promptForDirectImport} className="btn-primary" disabled={isSaving}>
                    {isSaving ? 'Äang xá»­ lÃ½...' : 'Nháº­p Kho Trá»±c Tiáº¿p'}
                </button>
            </div>
        </div>
    );
};

export default NewImportPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\PartnersPage.jsx ---


// src/pages/PartnersPage.jsx
import React, { useState, useMemo } from 'react';
import { collection, query, orderBy, documentId } from 'firebase/firestore';
import { FiEdit, FiTrash2, FiPlus, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { db } from '../firebaseConfig';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import { deletePartnerById } from '../services/partnerService';
import AddPartnerModal from '../components/AddPartnerModal';
import EditPartnerModal from '../components/EditPartnerModal';
import ConfirmationModal from '../components/ConfirmationModal';
import Spinner from '../components/Spinner';

const PartnersPage = () => {
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [currentPartner, setCurrentPartner] = useState(null);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });

    // <-- THAY Äá»”I: Sá»­ dá»¥ng hook phÃ¢n trang
    const baseQuery = useMemo(() => query(collection(db, 'partners'), orderBy(documentId())), []);
    const { 
        documents: partners, 
        loading, 
        isLastPage, 
        page, 
        nextPage, 
        prevPage,
        reset
    } = useFirestorePagination(baseQuery, PAGE_SIZE);

    const handlePartnerAdded = () => {
        setIsAddModalOpen(false);
        reset();
    };

    const handlePartnerUpdated = () => {
        setIsEditModalOpen(false);
        reset();
    };

    const promptForDelete = (partner) => {
        setConfirmModal({
            isOpen: true,
            item: partner,
            title: "XÃ¡c nháº­n xÃ³a Ä‘á»‘i tÃ¡c?",
            message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a "${partner.partnerName}" (ID: ${partner.id}) khÃ´ng?`
        });
    };

    const handleDelete = async () => {
        const { item } = confirmModal;
        if (!item) return;
        try {
            await deletePartnerById(item.id);
            toast.success('XÃ³a Ä‘á»‘i tÃ¡c thÃ nh cÃ´ng!');
            reset();
        } catch (error) {
            console.error("Lá»—i khi xÃ³a Ä‘á»‘i tÃ¡c: ", error);
            toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ³a Ä‘á»‘i tÃ¡c.');
        } finally {
            setConfirmModal({ isOpen: false, item: null });
        }
    };

    const openEditModal = (partner) => {
        setCurrentPartner(partner);
        setIsEditModalOpen(true);
    };

    return (
        <div>
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={handleDelete}
                onCancel={() => setConfirmModal({ isOpen: false, item: null })}
                confirmText="Váº«n xÃ³a"
            />
            {isAddModalOpen && <AddPartnerModal onClose={() => setIsAddModalOpen(false)} onPartnerAdded={handlePartnerAdded} />}
            {isEditModalOpen && <EditPartnerModal onClose={() => setIsEditModalOpen(false)} onPartnerUpdated={handlePartnerUpdated} partnerToEdit={currentPartner} />}

            <div className="page-header">
                <h1>Quáº£n LÃ½ Äá»‘i TÃ¡c</h1>
                <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">
                    <FiPlus style={{ marginRight: '5px' }} />
                    ThÃªm Äá»‘i TÃ¡c
                </button>
            </div>
            
            {loading ? <Spinner /> : (
                <>
                    <table className="products-table">
                        <thead>
                            <tr>
                                <th>MÃ£ Äá»‘i TÃ¡c</th>
                                <th>TÃªn Äá»‘i TÃ¡c</th>
                                <th>PhÃ¢n Loáº¡i</th>
                                <th>Thao tÃ¡c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {partners.map(partner => (
                                <tr key={partner.id}>
                                    <td><strong>{partner.id}</strong></td>
                                    <td>{partner.partnerName}</td>
                                    <td>{partner.partnerType === 'supplier' ? 'NhÃ  Cung Cáº¥p' : 'KhÃ¡ch HÃ ng'}</td>
                                    <td>
                                        <div className="action-buttons">
                                            <button className="btn-icon btn-edit" onClick={() => openEditModal(partner)}>
                                                <FiEdit />
                                            </button>
                                            <button className="btn-icon btn-delete" onClick={() => promptForDelete(partner)}>
                                                <FiTrash2 />
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    <div className="pagination-controls">
                        <button onClick={prevPage} disabled={page <= 1 || loading}>
                            <FiChevronLeft /> Trang TrÆ°á»›c
                        </button>
                        <span>Trang {page}</span>
                        <button onClick={nextPage} disabled={isLastPage || loading}>
                            Trang Tiáº¿p <FiChevronRight />
                        </button>
                    </div>
                </>
            )}
        </div>
    );
};

export default PartnersPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\ProductsPage.jsx ---


// src/pages/ProductsPage.jsx
import React, { useState, useMemo } from 'react'; // <-- THAY Äá»”I: Bá» cÃ¡c import khÃ´ng cáº§n thiáº¿t, thÃªm useMemo
import { collection, query, orderBy, where, documentId } from 'firebase/firestore'; // <-- THAY Äá»”I: Import cÃ¡c hÃ m cá»§a firestore
import { FiEdit, FiTrash2, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { db } from '../firebaseConfig'; // <-- THAY Äá»”I: Import db
import { PAGE_SIZE } from '../constants'; // <-- THAY Äá»”I: Import PAGE_SIZE
import { useFirestorePagination } from '../hooks/useFirestorePagination'; // <-- THAY Äá»”I: Import custom hook
import { deleteProductById } from '../services/productService';
import AddProductModal from '../components/AddProductModal';
import EditProductModal from '../components/EditProductModal';
import ConfirmationModal from '../components/ConfirmationModal';
import Spinner from '../components/Spinner';

const ProductsPage = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [currentProduct, setCurrentProduct] = useState(null);
  const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null });

  // <-- THAY Äá»”I: Logic phÃ¢n trang Ä‘Æ°á»£c chuyá»ƒn vÃ o custom hook
  const baseQuery = useMemo(() => {
    let q = query(collection(db, 'products'), orderBy(documentId()));
    if (searchTerm) {
        const upperSearchTerm = searchTerm.toUpperCase();
        q = query(q, where(documentId(), '>=', upperSearchTerm), where(documentId(), '<=', upperSearchTerm + '\uf8ff'));
    }
    return q;
  }, [searchTerm]);

  const {
    documents: products,
    loading,
    isLastPage,
    page,
    nextPage,
    prevPage,
    reset, // Sá»­ dá»¥ng hÃ m reset tá»« hook
  } = useFirestorePagination(baseQuery, PAGE_SIZE);

  const handleProductAdded = () => {
    setIsAddModalOpen(false);
    if (searchTerm) setSearchTerm(''); // Náº¿u Ä‘ang tÃ¬m kiáº¿m, xÃ³a bá»™ lá»c Ä‘á»ƒ tháº¥y sáº£n pháº©m má»›i
    else reset(); // Táº£i láº¡i trang Ä‘áº§u
  };

  const handleProductUpdated = () => {
    setIsEditModalOpen(false);
    reset(); // Táº£i láº¡i trang hiá»‡n táº¡i Ä‘á»ƒ cáº­p nháº­t
  };
  
  const promptForDelete = (product) => {
    setConfirmModal({
        isOpen: true,
        item: product,
        title: "XÃ¡c nháº­n xÃ³a sáº£n pháº©m?",
        message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a "${product.productName}" (ID: ${product.id}) khÃ´ng?`
    });
  };

  const handleDelete = async () => {
    const { item } = confirmModal;
    if (!item) return;
    try {
        await deleteProductById(item.id);
        toast.success('XÃ³a sáº£n pháº©m thÃ nh cÃ´ng!');
        if (searchTerm) setSearchTerm('');
        else reset();
    } catch (error) {
        console.error("Lá»—i khi xÃ³a sáº£n pháº©m: ", error);
        toast.error('ÄÃ£ xáº£y ra lá»—i khi xÃ³a sáº£n pháº©m.');
    } finally {
        setConfirmModal({ isOpen: false, item: null });
    }
  };

  const openEditModal = (product) => {
    setCurrentProduct(product);
    setIsEditModalOpen(true);
  };
  
  return (
    <div className="products-page-container">
      <ConfirmationModal
        isOpen={confirmModal.isOpen}
        title={confirmModal.title}
        message={confirmModal.message}
        onConfirm={handleDelete}
        onCancel={() => setConfirmModal({ isOpen: false, item: null })}
        confirmText="Váº«n xÃ³a"
      />

      <div className="page-header">
        <h1>Quáº£n LÃ½ HÃ ng HÃ³a</h1>
        <button onClick={() => setIsAddModalOpen(true)} className="btn-primary">ThÃªm sáº£n pháº©m</button>
      </div>

      <div className="controls-container" style={{justifyContent: 'flex-start'}}>
        <div className="search-container" style={{maxWidth: '400px'}}>
            <input
                type="text"
                placeholder="TÃ¬m theo MÃ£ hÃ ng..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
            />
        </div>
      </div>
      
      {isAddModalOpen && <AddProductModal onClose={() => setIsAddModalOpen(false)} onProductAdded={handleProductAdded} />}
      {isEditModalOpen && <EditProductModal onClose={() => setIsEditModalOpen(false)} onProductUpdated={handleProductUpdated} productToEdit={currentProduct} />}
      
      {loading ? (
        <Spinner />
      ) : (
        <>
          <table className="products-table">
            <thead>
              <tr>
                <th>MÃ£ hÃ ng</th>
                <th>TÃªn hÃ ng</th>
                <th>ÄÆ¡n vá»‹ tÃ­nh</th>
                <th>Quy cÃ¡ch Ä‘Ã³ng gÃ³i</th>
                <th>Nhiá»‡t Ä‘á»™ BQ</th>
                <th>HÃ£ng sáº£n xuáº¥t</th>
                <th>Team</th>
                <th>Thao tÃ¡c</th>
              </tr>
            </thead>
            <tbody>
              {products.length > 0 ? (
                  products.map(product => (
                  <tr key={product.id}>
                    <td>{product.id}</td>
                    <td>{product.productName}</td>
                    <td>{product.unit}</td>
                    <td>{product.packaging}</td>
                    <td>{product.storageTemp}</td>
                    <td>{product.manufacturer}</td>
                    <td>{product.team}</td>
                    <td>
                      <div className="action-buttons">
                        <button className="btn-icon btn-edit" onClick={() => openEditModal(product)}>
                          <FiEdit />
                        </button>
                        <button className="btn-icon btn-delete" onClick={() => promptForDelete(product)}>
                          <FiTrash2 />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                  <tr>
                      <td colSpan="8" style={{textAlign: 'center'}}>
                        KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m nÃ o.
                      </td>
                  </tr>
              )}
            </tbody>
          </table>

          <div className="pagination-controls">
              <button onClick={prevPage} disabled={page <= 1 || loading}>
                 <FiChevronLeft /> Trang TrÆ°á»›c
              </button>
              <span>Trang {page}</span>
              <button onClick={nextPage} disabled={isLastPage || loading}>
                  Trang Tiáº¿p <FiChevronRight />
              </button>
          </div>
        </>
      )}
    </div>
  );
};

export default ProductsPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\StocktakeListPage.jsx ---


// src/pages/StocktakeListPage.jsx
import React, { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { collection, query, where, getDocs, serverTimestamp, orderBy, doc, setDoc, writeBatch } from 'firebase/firestore';
import { PAGE_SIZE } from '../constants';
import { useFirestorePagination } from '../hooks/useFirestorePagination';
import CreateStocktakeModal from '../components/CreateStocktakeModal';
import ConfirmationModal from '../components/ConfirmationModal'; // <-- NÃ‚NG Cáº¤P: Import component xÃ¡c nháº­n
import { deleteStocktakeSession } from '../services/stocktakeService'; // <-- NÃ‚NG Cáº¤P: Import hÃ m xÃ³a má»›i
import { toast } from 'react-toastify';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';
import { FiChevronLeft, FiChevronRight, FiTrash2 } from 'react-icons/fi'; // <-- NÃ‚NG Cáº¤P: Import icon thÃ¹ng rÃ¡c

const StocktakeListPage = () => {
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
    const [isCreating, setIsCreating] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false, item: null }); // <-- NÃ‚NG Cáº¤P: ThÃªm state cho modal xÃ¡c nháº­n
    const navigate = useNavigate();
    
    const baseQuery = useMemo(() => query(collection(db, "stocktakes"), orderBy("createdAt", "desc")), []);
    const {
        documents: stocktakeSessions,
        loading,
        isLastPage,
        page,
        nextPage,
        prevPage,
        reset // <-- NÃ‚NG Cáº¤P: Sá»­ dá»¥ng hÃ m reset tá»« hook
    } = useFirestorePagination(baseQuery, PAGE_SIZE);

    const handleCreateStocktake = async (sessionData) => {
        setIsCreating(true);
        toast.info("Äang láº¥y dá»¯ liá»‡u tá»“n kho, vui lÃ²ng chá»...");
        try {
            let inventoryQuery;
            if (sessionData.scope === 'all') {
                inventoryQuery = query(collection(db, "inventory_lots"), where("quantityRemaining", ">", 0));
            } else {
                inventoryQuery = query(collection(db, "inventory_lots"), where("team", "==", sessionData.scope), where("quantityRemaining", ">", 0));
            }
            const querySnapshot = await getDocs(inventoryQuery);
            const inventorySnapshotItems = querySnapshot.docs.map(doc => ({
                lotId: doc.id, ...doc.data(), systemQty: doc.data().quantityRemaining, countedQty: null, isNew: false, 
            }));

            const newStocktakeSessionRef = doc(collection(db, 'stocktakes'));
            await setDoc(newStocktakeSessionRef, {
                name: sessionData.sessionName, scope: sessionData.scope, status: 'in_progress', createdAt: serverTimestamp(),
            });

            toast.info(`ÄÃ£ láº¥y ${inventorySnapshotItems.length} má»¥c. Báº¯t Ä‘áº§u ghi dá»¯ liá»‡u...`);
            const itemsCollectionRef = collection(db, 'stocktakes', newStocktakeSessionRef.id, 'items');
            const MAX_BATCH_SIZE = 500;
            for (let i = 0; i < inventorySnapshotItems.length; i += MAX_BATCH_SIZE) {
                const batch = writeBatch(db);
                const chunk = inventorySnapshotItems.slice(i, i + MAX_BATCH_SIZE);
                chunk.forEach(item => {
                    const newItemRef = doc(itemsCollectionRef, item.lotId);
                    batch.set(newItemRef, item);
                });
                await batch.commit();
            }
            
            toast.success("Táº¡o phiÃªn kiá»ƒm kÃª má»›i thÃ nh cÃ´ng!");
            setIsCreateModalOpen(false);
            navigate(`/stocktakes/${newStocktakeSessionRef.id}`);
        } catch (error) {
            console.error("Lá»—i khi táº¡o phiÃªn kiá»ƒm kÃª: ", error);
            toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi táº¡o phiÃªn kiá»ƒm kÃª.");
        } finally {
            setIsCreating(false);
        }
    };

    // <-- NÃ‚NG Cáº¤P: HÃ m Ä‘á»ƒ má»Ÿ há»™p thoáº¡i xÃ¡c nháº­n xÃ³a -->
    const promptForDelete = (session) => {
        setConfirmModal({
            isOpen: true,
            item: session,
            title: "XÃ¡c nháº­n xÃ³a phiÃªn kiá»ƒm kÃª?",
            message: `Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n xÃ³a phiÃªn "${session.name}" khÃ´ng? ToÃ n bá»™ dá»¯ liá»‡u Ä‘áº¿m cá»§a phiÃªn nÃ y sáº½ bá»‹ máº¥t vÄ©nh viá»…n vÃ  khÃ´ng thá»ƒ khÃ´i phá»¥c.`,
            onConfirm: handleDeleteSession,
            confirmText: "Váº«n xÃ³a"
        });
    };

    // <-- NÃ‚NG Cáº¤P: HÃ m thá»±c hiá»‡n viá»‡c xÃ³a sau khi xÃ¡c nháº­n -->
    const handleDeleteSession = async () => {
        const sessionToDelete = confirmModal.item;
        if (!sessionToDelete) return;

        try {
            toast.info(`Äang xÃ³a phiÃªn "${sessionToDelete.name}"...`);
            await deleteStocktakeSession(sessionToDelete.id);
            toast.success(`ÄÃ£ xÃ³a thÃ nh cÃ´ng phiÃªn kiá»ƒm kÃª.`);
            reset(); // Táº£i láº¡i danh sÃ¡ch
        } catch (error) {
            console.error("Lá»—i khi xÃ³a phiÃªn kiá»ƒm kÃª: ", error);
            toast.error("ÄÃ£ xáº£y ra lá»—i khi xÃ³a phiÃªn kiá»ƒm kÃª.");
        } finally {
            setConfirmModal({ isOpen: false, item: null });
        }
    };

    return (
        <div className="stocktake-list-page-container">
            {/* <-- NÃ‚NG Cáº¤P: ThÃªm component Modal vÃ o giao diá»‡n --> */}
            <ConfirmationModal
                isOpen={confirmModal.isOpen}
                title={confirmModal.title}
                message={confirmModal.message}
                onConfirm={handleDeleteSession}
                onCancel={() => setConfirmModal({ isOpen: false, item: null })}
                confirmText={confirmModal.confirmText}
            />

            {isCreateModalOpen && (
                <CreateStocktakeModal onClose={() => setIsCreateModalOpen(false)} onCreate={handleCreateStocktake} isCreating={isCreating} />
            )}
            <div className="page-header">
                <h1>Danh sÃ¡ch PhiÃªn Kiá»ƒm KÃª Kho</h1>
                <button onClick={() => setIsCreateModalOpen(true)} className="btn-primary">Táº¡o PhiÃªn Má»›i</button>
            </div>
      
            {loading ? <Spinner /> : (
                <>
                    <table className="products-table">
                        <thead>
                            <tr>
                                <th>TÃªn PhiÃªn Kiá»ƒm KÃª</th>
                                <th>NgÃ y Táº¡o</th>
                                <th>Pháº¡m Vi</th>
                                <th>Tráº¡ng ThÃ¡i</th>
                                <th>Thao TÃ¡c</th>
                            </tr>
                        </thead>
                        <tbody>
                            {stocktakeSessions.length > 0 ? (
                                stocktakeSessions.map(session => (
                                    <tr key={session.id}>
                                        <td>{session.name}</td>
                                        <td>{session.createdAt?.toDate().toLocaleDateString('vi-VN')}</td>
                                        <td>{session.scope === 'all' ? 'ToÃ n bá»™ kho' : session.scope}</td>
                                        <td><StatusBadge status={session.status} /></td>
                                        <td>
                                            {/* <-- NÃ‚NG Cáº¤P: Bá»c cÃ¡c nÃºt trong div Ä‘á»ƒ dá»… sáº¯p xáº¿p --> */}
                                            <div className="action-buttons">
                                                <button 
                                                    className="btn-secondary" 
                                                    style={{padding: '5px 10px', width: 'auto'}}
                                                    onClick={() => navigate(`/stocktakes/${session.id}`)}
                                                >
                                                    Xem/Thá»±c hiá»‡n
                                                </button>
                                                
                                                {/* <-- NÃ‚NG Cáº¤P: Hiá»ƒn thá»‹ nÃºt xÃ³a cÃ³ Ä‘iá»u kiá»‡n --> */}
                                                {session.status === 'in_progress' && (
                                                    <button
                                                        className="btn-icon btn-delete"
                                                        title="XÃ³a phiÃªn kiá»ƒm kÃª"
                                                        onClick={() => promptForDelete(session)}
                                                    >
                                                        <FiTrash2 />
                                                    </button>
                                                )}
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr><td colSpan="5" style={{textAlign: 'center'}}>ChÆ°a cÃ³ phiÃªn kiá»ƒm kÃª nÃ o.</td></tr>
                            )}
                        </tbody>
                    </table>

                    <div className="pagination-controls">
                        <button onClick={prevPage} disabled={page <= 1 || loading}>
                            <FiChevronLeft /> Trang TrÆ°á»›c
                        </button>
                        <span>Trang {page}</span>
                        <button onClick={nextPage} disabled={isLastPage || loading}>
                            Trang Tiáº¿p <FiChevronRight />
                        </button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StocktakeListPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\StocktakeSessionPage.jsx ---


// src/pages/StocktakeSessionPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { db } from '../firebaseConfig';
import { doc, getDoc, updateDoc, writeBatch, collection, addDoc, serverTimestamp, query, orderBy, limit, startAfter, getDocs, where, getCountFromServer, setDoc } from 'firebase/firestore';
import '../styles/StocktakePage.css';
import AddUnlistedItemModal from '../components/AddUnlistedItemModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { formatDate } from '../utils/dateUtils';
import { toast } from 'react-toastify';
import StatusBadge from '../components/StatusBadge';
import Spinner from '../components/Spinner';
import { FiChevronLeft, FiChevronRight } from 'react-icons/fi';

const PAGE_SIZE = 50;

const StocktakeSessionPage = () => {
    const { sessionId } = useParams();
    const navigate = useNavigate();
    const [loadingSession, setLoadingSession] = useState(true);
    const [loadingItems, setLoadingItems] = useState(true);
    const [sessionData, setSessionData] = useState(null);
    const [items, setItems] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [discrepancyItems, setDiscrepancyItems] = useState([]);
    const [checkedItems, setCheckedItems] = useState({});
    const [summaryStats, setSummaryStats] = useState({ totalItems: 0, countedItems: 0, discrepancies: 0 });
    const [lastVisible, setLastVisible] = useState(null);
    const [page, setPage] = useState(1);
    const [isLastPage, setIsLastPage] = useState(false);
    const [isAddItemModalOpen, setIsAddItemModalOpen] = useState(false);
    const [confirmModal, setConfirmModal] = useState({ isOpen: false });

    const fetchSessionData = useCallback(async () => {
        setLoadingSession(true);
        const docRef = doc(db, 'stocktakes', sessionId);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
            setSessionData({ id: docSnap.id, ...docSnap.data() });
        } else {
            toast.error("KhÃ´ng tÃ¬m tháº¥y phiÃªn kiá»ƒm kÃª!");
            navigate('/stocktakes');
        }
        setLoadingSession(false);
    }, [sessionId, navigate]);

    const buildItemsQuery = useCallback(() => {
        const itemsCollectionRef = collection(db, 'stocktakes', sessionId, 'items');
        let q = query(itemsCollectionRef, orderBy('productId'));
        if (searchTerm) {
            const upperSearchTerm = searchTerm.toUpperCase();
            q = query(q, where('productId', '>=', upperSearchTerm), where('productId', '<=', upperSearchTerm + '\uf8ff'));
        }
        return q;
    }, [sessionId, searchTerm]);

    const fetchFirstPage = useCallback(async () => {
        if (!sessionId) return;
        setLoadingItems(true);
        try {
            const q = buildItemsQuery();
            const firstPageQuery = query(q, limit(PAGE_SIZE));
            const docSnapshots = await getDocs(firstPageQuery);
            const itemsList = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setLastVisible(docSnapshots.docs[docSnapshots.docs.length - 1]);
            setIsLastPage(docSnapshots.docs.length < PAGE_SIZE);
            setItems(itemsList);
            setPage(1);
        } catch (error) {
            console.error("Lá»—i khi táº£i váº­t tÆ° kiá»ƒm kÃª: ", error);
            toast.error("KhÃ´ng thá»ƒ táº£i danh sÃ¡ch váº­t tÆ°. Vui lÃ²ng kiá»ƒm tra Console (F12) Ä‘á»ƒ táº¡o Index náº¿u Ä‘Æ°á»£c yÃªu cáº§u.");
        } finally {
            setLoadingItems(false);
        }
    }, [sessionId, buildItemsQuery]);

    const fetchNextPage = async () => {
        if (!sessionId || !lastVisible) return;
        setLoadingItems(true);
        try {
            const q = buildItemsQuery();
            const nextPageQuery = query(q, startAfter(lastVisible), limit(PAGE_SIZE));
            const docSnapshots = await getDocs(nextPageQuery);
            const itemsList = docSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setLastVisible(docSnapshots.docs[docSnapshots.docs.length - 1]);
            setIsLastPage(docSnapshots.docs.length < PAGE_SIZE);
            setItems(itemsList);
            setPage(p => p + 1);
        } catch (error) {
            console.error("Lá»—i khi táº£i váº­t tÆ° kiá»ƒm kÃª: ", error);
        } finally {
            setLoadingItems(false);
        }
    };

    const fetchStatsAndDiscrepancies = useCallback(async () => {
        if (!sessionId || !sessionData) return;
        const itemsRef = collection(db, 'stocktakes', sessionId, 'items');
        const totalQuery = query(itemsRef, where('isNew', '==', false));
        const countedQuery = query(itemsRef, where('countedQty', '!=', null));
        
        const [totalSnap, countedDocsSnap] = await Promise.all([
             getCountFromServer(totalQuery),
             getDocs(countedQuery)
        ]);
        
        const discrepancies = [];
        countedDocsSnap.forEach(doc => {
            const data = doc.data();
            if (data.systemQty !== data.countedQty) {
                discrepancies.push({ id: doc.id, ...data });
            }
        });

        setSummaryStats({
            totalItems: totalSnap.data().count,
            countedItems: countedDocsSnap.size,
            discrepancies: discrepancies.length
        });
        setDiscrepancyItems(discrepancies.sort((a, b) => a.productId.localeCompare(b.productId)));
    }, [sessionId, sessionData]);

    useEffect(() => { fetchSessionData(); }, [fetchSessionData]);
    
    useEffect(() => {
        const debounce = setTimeout(() => {
            fetchFirstPage();
        }, 500);
        return () => clearTimeout(debounce);
    }, [searchTerm, fetchFirstPage]);

    useEffect(() => {
        if (sessionData?.status) {
            fetchStatsAndDiscrepancies();
        }
    }, [sessionData, fetchStatsAndDiscrepancies]);

    const performCountUpdate = async (itemId, finalCount) => {
        const itemRef = doc(db, 'stocktakes', sessionId, 'items', itemId);
        try {
            await updateDoc(itemRef, { countedQty: finalCount });
            setItems(currentItems => 
                currentItems.map(item => item.id === itemId ? { ...item, countedQty: finalCount } : item)
            );
            fetchStatsAndDiscrepancies();
        } catch (error) {
            toast.error("Lá»—i: KhÃ´ng thá»ƒ lÆ°u sá»‘ lÆ°á»£ng.");
        } finally {
            setConfirmModal({isOpen: false});
        }
    };
    
    const handleCountChange = (itemId, countedQty, newCountValue) => {
        const newCount = newCountValue === '' ? null : Number(newCountValue);
        if ((countedQty || 0) > 0 && newCount !== null) {
            const cumulativeTotal = (countedQty || 0) + newCount;
            setConfirmModal({
                isOpen: true,
                title: "Cá»™ng Dá»“n hay Ghi ÄÃ¨?",
                message: `ÄÃ£ Ä‘áº¿m ${countedQty}. Báº¡n muá»‘n cá»™ng dá»“n thÃªm ${newCount} (tá»•ng: ${cumulativeTotal}) hay ghi Ä‘Ã¨ báº±ng giÃ¡ trá»‹ má»›i lÃ  ${newCount}?`,
                onConfirm: () => performCountUpdate(itemId, cumulativeTotal),
                onCancel: () => performCountUpdate(itemId, newCount),
                confirmText: "Cá»™ng Dá»“n",
                cancelText: "Ghi ÄÃ¨"
            });
        } else {
            performCountUpdate(itemId, newCount);
        }
    };

    const handleFinalizeCount = async () => {
        setConfirmModal({isOpen: false});
        try {
            const sessionRef = doc(db, 'stocktakes', sessionId);
            await updateDoc(sessionRef, { status: 'completed' });
            toast.success("ÄÃ£ hoÃ n táº¥t phiÃªn kiá»ƒm kÃª!");
            fetchSessionData();
        } catch (error) {
            toast.error("ÄÃ£ cÃ³ lá»—i xáº£y ra khi hoÃ n táº¥t.");
        }
    };

    const promptForFinalize = () => {
        const uncountedItems = summaryStats.totalItems - summaryStats.countedItems;
        let message = "Báº¡n cÃ³ cháº¯c cháº¯n muá»‘n hoÃ n táº¥t vÃ  khÃ³a phiÃªn kiá»ƒm kÃª nÃ y? Sau khi hoÃ n táº¥t, báº¡n cÃ³ thá»ƒ xá»­ lÃ½ chÃªnh lá»‡ch.";
        
        if (uncountedItems > 0) {
            message = `Cáº¢NH BÃO: Váº«n cÃ²n ${uncountedItems} mÃ£ hÃ ng chÆ°a Ä‘Æ°á»£c Ä‘áº¿m. Náº¿u báº¡n hoÃ n táº¥t, sá»‘ lÆ°á»£ng cá»§a chÃºng sáº½ Ä‘Æ°á»£c coi lÃ  0. ` + message;
        }

        setConfirmModal({
            isOpen: true,
            title: "HoÃ n táº¥t phiÃªn kiá»ƒm kÃª?",
            message: message,
            onConfirm: handleFinalizeCount,
            confirmText: "Váº«n hoÃ n táº¥t"
        });
    };

    const handleAddUnlistedItem = async (newItem) => {
        const itemsRef = collection(db, 'stocktakes', sessionId, 'items');
        try {
            const docRef = doc(itemsRef, newItem.lotId);
            await setDoc(docRef, newItem);
            toast.success("ÄÃ£ thÃªm máº·t hÃ ng má»›i vÃ o phiÃªn kiá»ƒm kÃª.");
            fetchFirstPage();
            setIsAddItemModalOpen(false);
        } catch (error) {
            toast.error("CÃ³ lá»—i khi lÆ°u máº·t hÃ ng má»›i, vui lÃ²ng thá»­ láº¡i.");
        }
    };

    const handleAdjustInventory = async () => {
        setConfirmModal({isOpen: false});
        const itemsToAdjust = discrepancyItems.filter(item => checkedItems[item.id]);
        if (itemsToAdjust.length === 0) {
            toast.warn("Vui lÃ²ng chá»n má»¥c Ä‘á»ƒ Ä‘iá»u chá»‰nh.");
            return;
        }
        try {
            const batch = writeBatch(db);
            const adjustmentsCollectionRef = collection(db, 'inventory_adjustments');
            for (const item of itemsToAdjust) {
                const finalCountedQty = item.countedQty ?? 0;
                if (!item.isNew) {
                    const inventoryLotRef = doc(db, 'inventory_lots', item.lotId);
                    batch.update(inventoryLotRef, { quantityRemaining: finalCountedQty });
                }
                const newAdjustmentRef = doc(adjustmentsCollectionRef);
                batch.set(newAdjustmentRef, {
                    createdAt: serverTimestamp(), stocktakeId: sessionId, productId: item.productId,
                    productName: item.productName, lotNumber: item.lotNumber, quantityBefore: item.systemQty,
                    quantityAfter: finalCountedQty, variance: finalCountedQty - item.systemQty,
                    reason: `Äiá»u chá»‰nh sau kiá»ƒm kÃª phiÃªn: ${sessionData.name}`
                });
            }
            const sessionRef = doc(db, 'stocktakes', sessionId);
            batch.update(sessionRef, { status: 'adjusted' });
            await batch.commit();
            toast.success("ÄÃ£ Ä‘iá»u chá»‰nh tá»“n kho thÃ nh cÃ´ng!");
            fetchSessionData();
        } catch (error) {
            toast.error("ÄÃ£ xáº£y ra lá»—i khi Ä‘iá»u chá»‰nh tá»“n kho.");
        }
    };

    const promptForAdjust = () => {
        const itemsToAdjust = discrepancyItems.filter(item => checkedItems[item.id]);
        if (itemsToAdjust.length === 0) {
            toast.warn("Vui lÃ²ng chá»n Ã­t nháº¥t má»™t máº·t hÃ ng Ä‘á»ƒ Ä‘iá»u chá»‰nh.");
            return;
        }
        setConfirmModal({
            isOpen: true,
            title: "XÃ¡c nháº­n Ä‘iá»u chá»‰nh tá»“n kho?",
            message: `Báº¡n cÃ³ cháº¯c muá»‘n Ä‘iá»u chá»‰nh tá»“n kho cho ${itemsToAdjust.length} máº·t hÃ ng Ä‘Ã£ chá»n khÃ´ng? Thao tÃ¡c nÃ y khÃ´ng thá»ƒ hoÃ n tÃ¡c.`,
            onConfirm: handleAdjustInventory,
            confirmText: "Äá»“ng Ã½ Ä‘iá»u chá»‰nh"
        });
    };
    
    const handleCheckboxChange = (itemId) => { setCheckedItems(prev => ({ ...prev, [itemId]: !prev[itemId] })); };

    if (loadingSession) return <Spinner />;
    if (!sessionData) return <div>KhÃ´ng tÃ¬m tháº¥y dá»¯ liá»‡u cho phiÃªn kiá»ƒm kÃª nÃ y.</div>;

    const isSessionInProgress = sessionData.status === 'in_progress';

    const CountInput = ({ item }) => {
        const [currentValue, setCurrentValue] = useState(item.countedQty ?? '');
        const handleKeyDown = (e) => { if (e.key === 'Enter') e.target.blur(); };
        useEffect(() => { setCurrentValue(item.countedQty ?? ''); }, [item.countedQty]);
        return (
            <input type="number" placeholder="Nháº­p sá»‘ Ä‘áº¿m" value={currentValue}
                onChange={e => setCurrentValue(e.target.value)}
                onBlur={() => handleCountChange(item.id, item.countedQty, currentValue)}
                onKeyDown={handleKeyDown} disabled={!isSessionInProgress}
                style={{ backgroundColor: item.isNew ? '#fff9e6' : ((item.countedQty !== null && item.countedQty !== '') ? '#e6fffa' : '#fff') }}
            />
        );
    };

    return (
        <div className="stocktake-session-page-container">
            <ConfirmationModal isOpen={confirmModal.isOpen} {...confirmModal} onCancel={() => setConfirmModal({ isOpen: false })} />
            {isAddItemModalOpen && (<AddUnlistedItemModal onClose={() => setIsAddItemModalOpen(false)} onAddItem={handleAddUnlistedItem} />)}

            <div className="page-header">
                <h1>{sessionData.name} <StatusBadge status={sessionData.status} /></h1>
                <div>
                    {isSessionInProgress && (<button onClick={promptForFinalize} className="btn-primary">HoÃ n táº¥t Ä‘áº¿m</button>)}
                </div>
            </div>

            {(sessionData.status === 'completed' || sessionData.status === 'adjusted') && (
                 <div className="form-section">
                    <div className="compact-info-grid" style={{gridTemplateColumns: '1fr 1fr 1fr'}}>
                        <div><label>Tá»•ng sá»‘ mÃ£ cáº§n Ä‘áº¿m</label><p><strong>{summaryStats.totalItems}</strong></p></div>
                        <div><label>Sá»‘ mÃ£ Ä‘Ã£ Ä‘áº¿m</label><p style={{color: 'green'}}><strong>{summaryStats.countedItems}</strong></p></div>
                        <div><label>Sá»‘ mÃ£ cÃ³ chÃªnh lá»‡ch</label><p style={{color: 'red'}}><strong>{summaryStats.discrepancies}</strong></p></div>
                    </div>
                </div>
            )}

            <div className="controls-container">
                <div className="search-container">
                    <input type="text" placeholder="TÃ¬m theo MÃ£ hÃ ng..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="search-input" />
                </div>
                {isSessionInProgress && (
                    <button onClick={() => setIsAddItemModalOpen(true)} className="btn-secondary" style={{whiteSpace: 'nowrap'}}>+ ThÃªm HÃ ng NgoÃ i DS</button>
                )}
            </div>

            {loadingItems ? <Spinner /> : (
                <>
                    <div className="table-container">
                        <table className="products-table">
                            <thead>
                                <tr>
                                    <th>MÃ£ hÃ ng</th><th>TÃªn hÃ ng</th><th>Sá»‘ lÃ´</th>
                                    <th>HSD</th><th>Tá»“n há»‡ thá»‘ng</th><th>Tá»“n thá»±c táº¿</th>
                                </tr>
                            </thead>
                            <tbody>
                                {items.map((item) => (
                                    <tr key={item.id}>
                                        <td>{item.productId}</td><td>{item.productName}</td><td>{item.lotNumber}</td>
                                        <td>{formatDate(item.expiryDate)}</td><td>{item.systemQty}</td>
                                        <td><CountInput item={item} /></td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    {!searchTerm && (
                        <div className="pagination-controls">
                            <button onClick={fetchFirstPage} disabled={page <= 1}>
                                <FiChevronLeft /> Trang TrÆ°á»›c
                            </button>
                            <span>Trang {page}</span>
                            <button onClick={fetchNextPage} disabled={isLastPage}>
                                Trang Tiáº¿p <FiChevronRight />
                            </button>
                        </div>
                    )}
                </>
            )}

            {(sessionData.status === 'completed' || sessionData.status === 'adjusted') && (
                <div className="form-section" style={{marginTop: '20px'}}>
                    <h3 style={{color: '#dc3545'}}>Xá»­ LÃ½ ChÃªnh Lá»‡ch</h3>
                    {discrepancyItems.length > 0 ? (
                        <>
                            <table className="products-table discrepancy-table">
                                <thead>
                                    <tr>
                                        <th><input type="checkbox" onChange={(e) => setCheckedItems(e.target.checked ? Object.fromEntries(discrepancyItems.map(i => [i.id, true])) : {})} disabled={sessionData.status === 'adjusted'} /></th>
                                        <th>MÃ£ hÃ ng</th><th>TÃªn hÃ ng</th><th>Sá»‘ lÃ´</th>
                                        <th>Tá»“n há»‡ thá»‘ng</th><th>Tá»“n thá»±c táº¿</th><th>ChÃªnh lá»‡ch</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {discrepancyItems.map(item => (
                                        <tr key={item.id}>
                                            <td><input type="checkbox" checked={!!checkedItems[item.id]} onChange={() => handleCheckboxChange(item.id)} disabled={sessionData.status === 'adjusted'} /></td>
                                            <td>{item.productId}</td><td>{item.productName}</td><td>{item.lotNumber}</td>
                                            <td>{item.systemQty}</td><td><strong>{item.countedQty ?? 0}</strong></td>
                                            <td style={{color: (item.countedQty ?? 0) > item.systemQty ? 'green' : 'red', fontWeight: 'bold'}}>{(item.countedQty ?? 0) - item.systemQty}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                            {sessionData.status !== 'adjusted' && (
                                <div className="page-actions">
                                    <button onClick={promptForAdjust} className="btn-primary">XÃ¡c Nháº­n Äiá»u Chá»‰nh Tá»“n Kho</button>
                                </div>
                            )}
                        </>
                    ) : <p>KhÃ´ng cÃ³ chÃªnh lá»‡ch nÃ o Ä‘Æ°á»£c ghi nháº­n.</p>
                    }
                </div>
            )}
        </div>
    );
};

export default StocktakeSessionPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\pages\TestPage.jsx ---


// src/pages/TestPage.jsx
import React, { useState } from 'react';
// ChÃºng ta váº«n cáº§n hÃ m nÃ y Ä‘á»ƒ Ä‘á»‹nh dáº¡ng
import { formatExpiryDate } from '../utils/dateUtils';

const TestPage = () => {
  const [testDate, setTestDate] = useState('');

  // HÃ€M Má»šI: Chá»‰ Ä‘á»‹nh dáº¡ng khi ngÆ°á»i dÃ¹ng rá»i khá»i Ã´ input
  const handleBlurFormat = (e) => {
    const formattedValue = formatExpiryDate(e.target.value);
    setTestDate(formattedValue);
  };

  return (
    <div style={{ padding: '40px' }}>
      <h1>Trang Kiá»ƒm Tra Lá»—i HSD (Giáº£i PhÃ¡p Má»›i)</h1>
      <p>
        HÃ£y thá»­ gÃµ má»™t chuá»—i sá»‘ vÃ o Ã´ bÃªn dÆ°á»›i (vÃ­ dá»¥: 12122025), sau Ä‘Ã³ báº¥m phÃ­m Tab hoáº·c click chuá»™t ra ngoÃ i Ã´.
      </p>

      <div style={{ marginTop: '20px' }}>
        <label htmlFor="test-input" style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>
          Ã” Input Test HSD (dd/mm/yyyy)
        </label>
        <input
          id="test-input"
          type="text"
          value={testDate}
          // HÃ€M CÅ¨: Giá» chá»‰ cáº­p nháº­t giÃ¡ trá»‹ thÃ´, khÃ´ng Ä‘á»‹nh dáº¡ng
          onChange={(e) => setTestDate(e.target.value)}
          // HÃ€M Má»šI: KÃ­ch hoáº¡t Ä‘á»‹nh dáº¡ng khi rá»i Ä‘i
          onBlur={handleBlurFormat}
          placeholder="dd/mm/yyyy"
          style={{ padding: '10px', fontSize: '16px', width: '300px' }}
        />
      </div>

      <div style={{ marginTop: '20px' }}>
        <strong>GiÃ¡ trá»‹ hiá»‡n táº¡i cá»§a state:</strong> {testDate}
      </div>
    </div>
  );
};

export default TestPage;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\services\exportService.js ---


// src/services/exportService.js
import { db } from '../firebaseConfig';
import { collection, getDocs, query, orderBy, limit, startAfter, endBefore, limitToLast } from 'firebase/firestore';

const PAGE_SIZE = 15;
const exportTicketsCollection = collection(db, 'export_tickets');

/**
 * Láº¥y má»™t trang dá»¯ liá»‡u phiáº¿u xuáº¥t tá»« Firestore.
 * @param {string} direction - HÆ°á»›ng phÃ¢n trang ('next', 'prev', 'first').
 * @param {object | null} cursor - Con trá» tÃ i liá»‡u Firestore.
 * @returns {Promise<{list: Array, firstVisible: object, lastVisible: object}>}
 */
export const fetchExportSlipsPage = async (direction = 'first', cursor = null) => {
    let q;
    const baseQuery = query(exportTicketsCollection, orderBy("createdAt", "desc"));

    if (direction === 'next' && cursor) {
        q = query(baseQuery, startAfter(cursor), limit(PAGE_SIZE));
    } else if (direction === 'prev' && cursor) {
        q = query(baseQuery, endBefore(cursor), limitToLast(PAGE_SIZE));
    } else { // first
        q = query(baseQuery, limit(PAGE_SIZE));
    }

    const querySnapshot = await getDocs(q);
    const list = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

    return {
        list,
        firstVisible: querySnapshot.docs[0] || null,
        lastVisible: querySnapshot.docs[querySnapshot.docs.length - 1] || null,
    };
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\services\importService.js ---


// src/services/importService.js
import { db } from '../firebaseConfig';
import { collection, getDocs, query, orderBy, limit, startAfter, endBefore, limitToLast } from 'firebase/firestore';

const PAGE_SIZE = 15;
const importTicketsCollection = collection(db, 'import_tickets');

/**
 * Láº¥y má»™t trang dá»¯ liá»‡u phiáº¿u nháº­p tá»« Firestore.
 * @param {string} direction - HÆ°á»›ng phÃ¢n trang ('next', 'prev', 'first').
 * @param {object | null} cursor - Con trá» tÃ i liá»‡u Firestore.
 * @returns {Promise<{list: Array, firstVisible: object, lastVisible: object}>}
 */
export const fetchImportSlipsPage = async (direction = 'first', cursor = null) => {
    let q;
    const baseQuery = query(importTicketsCollection, orderBy("createdAt", "desc"));

    if (direction === 'next' && cursor) {
        q = query(baseQuery, startAfter(cursor), limit(PAGE_SIZE));
    } else if (direction === 'prev' && cursor) {
        q = query(baseQuery, endBefore(cursor), limitToLast(PAGE_SIZE));
    } else { // first
        q = query(baseQuery, limit(PAGE_SIZE));
    }

    const querySnapshot = await getDocs(q);
    const list = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

    return {
        list,
        firstVisible: querySnapshot.docs[0] || null,
        lastVisible: querySnapshot.docs[querySnapshot.docs.length - 1] || null,
    };
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\services\partnerService.js ---


// src/services/partnerService.js
import { db } from '../firebaseConfig';
import { collection, getDocs, doc, deleteDoc, query, orderBy, limit, startAfter, endBefore, limitToLast, documentId } from 'firebase/firestore';

const PAGE_SIZE = 15;
const partnersCollection = collection(db, 'partners');

/**
 * Láº¥y má»™t trang dá»¯ liá»‡u Ä‘á»‘i tÃ¡c tá»« Firestore.
 * @param {string} direction - HÆ°á»›ng phÃ¢n trang ('next', 'prev', 'first').
 * @param {object | null} cursor - Con trá» tÃ i liá»‡u Firestore Ä‘á»ƒ báº¯t Ä‘áº§u hoáº·c káº¿t thÃºc.
 * @returns {Promise<{list: Array, firstVisible: object, lastVisible: object}>} - Danh sÃ¡ch Ä‘á»‘i tÃ¡c vÃ  cÃ¡c con trá».
 */
export const fetchPartnersPage = async (direction = 'first', cursor = null) => {
    let q;
    const baseQuery = query(partnersCollection, orderBy(documentId()));

    if (direction === 'next' && cursor) {
        q = query(baseQuery, startAfter(cursor), limit(PAGE_SIZE));
    } else if (direction === 'prev' && cursor) {
        q = query(baseQuery, endBefore(cursor), limitToLast(PAGE_SIZE));
    } else { // first
        q = query(baseQuery, limit(PAGE_SIZE));
    }

    const querySnapshot = await getDocs(q);
    const list = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
    return {
        list,
        firstVisible: querySnapshot.docs[0] || null,
        lastVisible: querySnapshot.docs[querySnapshot.docs.length - 1] || null,
    };
};

/**
 * XÃ³a má»™t Ä‘á»‘i tÃ¡c khá»i Firestore.
 * @param {string} partnerId - ID cá»§a Ä‘á»‘i tÃ¡c cáº§n xÃ³a.
 * @returns {Promise<void>}
 */
export const deletePartnerById = async (partnerId) => {
    const partnerDocRef = doc(db, 'partners', partnerId);
    await deleteDoc(partnerDocRef);
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\services\productService.js ---


// src/services/productService.js
import { db } from '../firebaseConfig';
import { collection, getDocs, doc, deleteDoc, query, orderBy, where, limit, startAfter, endBefore, limitToLast, documentId } from 'firebase/firestore';

const PAGE_SIZE = 15;
const productsCollection = collection(db, 'products');

/**
 * Láº¥y má»™t trang dá»¯ liá»‡u sáº£n pháº©m tá»« Firestore, cÃ³ há»— trá»£ tÃ¬m kiáº¿m.
 * @param {string} searchTerm - Tá»« khÃ³a tÃ¬m kiáº¿m theo ID sáº£n pháº©m.
 * @param {string} direction - HÆ°á»›ng phÃ¢n trang ('next', 'prev', 'first').
 * @param {object | null} cursor - Con trá» tÃ i liá»‡u Firestore.
 * @returns {Promise<{list: Array, firstVisible: object, lastVisible: object}>}
 */
export const fetchProductsPage = async (searchTerm, direction = 'first', cursor = null) => {
    let q = query(productsCollection, orderBy(documentId()));

    // Ãp dá»¥ng bá»™ lá»c tÃ¬m kiáº¿m
    if (searchTerm) {
        const upperSearchTerm = searchTerm.toUpperCase();
        q = query(q, where(documentId(), '>=', upperSearchTerm), where(documentId(), '<=', upperSearchTerm + '\uf8ff'));
    }

    // Ãp dá»¥ng logic phÃ¢n trang
    if (direction === 'next' && cursor) {
        q = query(q, startAfter(cursor), limit(PAGE_SIZE));
    } else if (direction === 'prev' && cursor) {
        q = query(q, endBefore(cursor), limitToLast(PAGE_SIZE));
    } else { // first
        q = query(q, limit(PAGE_SIZE));
    }

    const querySnapshot = await getDocs(q);
    const list = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

    return {
        list,
        firstVisible: querySnapshot.docs[0] || null,
        lastVisible: querySnapshot.docs[querySnapshot.docs.length - 1] || null,
    };
};

/**
 * XÃ³a má»™t sáº£n pháº©m khá»i Firestore.
 * @param {string} productId - ID cá»§a sáº£n pháº©m cáº§n xÃ³a.
 * @returns {Promise<void>}
 */
export const deleteProductById = async (productId) => {
    const productDocRef = doc(db, 'products', productId);
    await deleteDoc(productDocRef);
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\services\stocktakeService.js ---


// src/services/stocktakeService.js
import { db } from '../firebaseConfig';
import { doc, deleteDoc, collection, getDocs, writeBatch } from 'firebase/firestore';
import { toast } from 'react-toastify';

/**
 * XÃ³a má»™t phiÃªn kiá»ƒm kÃª vÃ  táº¥t cáº£ cÃ¡c má»¥c váº­t tÆ° con bÃªn trong nÃ³.
 * Firestore khÃ´ng tá»± Ä‘á»™ng xÃ³a subcollection, nÃªn chÃºng ta pháº£i lÃ m viá»‡c nÃ y báº±ng tay.
 * @param {string} sessionId - ID cá»§a phiÃªn kiá»ƒm kÃª cáº§n xÃ³a.
 */
export const deleteStocktakeSession = async (sessionId) => {
    const sessionRef = doc(db, 'stocktakes', sessionId);
    const itemsRef = collection(db, 'stocktakes', sessionId, 'items');

    // BÆ°á»›c 1: Láº¥y táº¥t cáº£ cÃ¡c má»¥c váº­t tÆ° trong subcollection 'items'
    const itemsSnapshot = await getDocs(itemsRef);
    
    if (itemsSnapshot.empty) {
        // Náº¿u khÃ´ng cÃ³ má»¥c con nÃ o, chá»‰ cáº§n xÃ³a document cha
        await deleteDoc(sessionRef);
        return;
    }

    // BÆ°á»›c 2: XÃ³a táº¥t cáº£ cÃ¡c má»¥c váº­t tÆ° con theo tá»«ng lÃ´ (batch) Ä‘á»ƒ Ä‘áº£m báº£o hiá»‡u nÄƒng
    // Firestore giá»›i háº¡n 500 thao tÃ¡c/batch
    const MAX_BATCH_SIZE = 500;
    let batch = writeBatch(db);
    let count = 0;

    for (const itemDoc of itemsSnapshot.docs) {
        batch.delete(itemDoc.ref);
        count++;
        if (count === MAX_BATCH_SIZE) {
            // Khi Ä‘á»§ 500, thá»±c thi batch vÃ  táº¡o batch má»›i
            await batch.commit();
            batch = writeBatch(db);
            count = 0;
            toast.info("Äang xÃ³a dá»¯ liá»‡u kiá»ƒm kÃª...");
        }
    }

    // Thá»±c thi batch cuá»‘i cÃ¹ng náº¿u cÃ²n thao tÃ¡c
    if (count > 0) {
        await batch.commit();
    }

    // BÆ°á»›c 3: Sau khi Ä‘Ã£ xÃ³a háº¿t cÃ¡c má»¥c con, xÃ³a document cha (phiÃªn kiá»ƒm kÃª)
    await deleteDoc(sessionRef);
};



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\AdminLayout.css ---


:root {
  --header-height: 60px;
  --primary-color: #007bff;
  --text-color: #333;
  --bg-color: #f8f9fa;
  --border-color: #dee2e6;
  --transition-speed: 0.3s ease;
}

/* --- Bá» Cá»¤C LAYOUT NGANG Má»šI --- */
.admin-layout-horizontal {
  display: flex;
  flex-direction: column; /* Xáº¿p chá»“ng Navbar vÃ  Main Content */
  min-height: 100vh;
}

/* --- THANH NAVBAR TRÃŠN CÃ™NG --- */
.top-navbar {
  height: var(--header-height);
  width: 100%;
  background-color: #ffffff;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  padding: 0 20px;
  
  /* --- Quan trá»ng: Giá»¯ thanh menu cá»‘ Ä‘á»‹nh khi cuá»™n --- */
  position: sticky;
  top: 0;
  z-index: 1000;
}

.navbar-brand {
  color: var(--text-color);
  margin-right: auto; /* Äáº©y cÃ¡c icon menu vá» bÃªn pháº£i */
}

.nav-items {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  gap: 15px; /* Khoáº£ng cÃ¡ch giá»¯a cÃ¡c icon */
}

.nav-items li a {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px;
  text-decoration: none;
  color: #555;
  border-radius: 8px;
  transition: background-color var(--transition-speed);
}

.nav-items li a:hover {
  background-color: #f1f1f1;
}

/* ThÃªm style cho má»¥c menu Ä‘ang Ä‘Æ°á»£c chá»n (active) */
.nav-items li a.active {
  background-color: var(--primary-color);
  color: #ffffff;
}

.nav-icon {
  font-size: 24px; /* KÃ­ch thÆ°á»›c icon to, rÃµ rÃ ng */
}

/* --- Ná»˜I DUNG CHÃNH --- */
.main-content {
  flex-grow: 1;
  padding: 20px;
  background-color: var(--bg-color);
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

/* --- Báº¢NG products-table (ÄÆ¡n giáº£n) --- */
.products-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.products-table th,
.products-table td {
  border: 1px solid var(--border-color);
  padding: 12px 15px;
  text-align: left;
}

.products-table th {
  background-color: var(--bg-color);
  font-weight: bold;
}

.products-table tbody tr:nth-of-type(even) {
  background-color: #f8f9fa;
}

.products-table tbody tr:hover {
  background-color: #e9ecef;
}

/* src/styles/AdminLayout.css */

/* --- Báº¢NG inventory-table (PHIÃŠN Báº¢N HOÃ€N CHá»ˆNH Má»šI) --- */
.inventory-table {
  width: 100%;
  border-collapse: collapse;
}

.inventory-table th, .inventory-table td {
  padding: 12px 15px;
  border-bottom: 1px solid var(--border-color);
  border-right: 1px solid var(--border-color);
  white-space: nowrap; /* Giá»¯ ná»™i dung trÃªn má»™t dÃ²ng theo máº·c Ä‘á»‹nh */
  vertical-align: middle;
}

/* THAY Äá»”I: ThÃªm quy táº¯c má»›i Ä‘á»ƒ cho phÃ©p tiÃªu Ä‘á» cá»™t 1 xuá»‘ng dÃ²ng */
.inventory-table th:nth-child(1) {
  white-space: normal;
}

.inventory-table th {
  background-color: #f8f9fa;
  position: sticky;
  top: 0;
  z-index: 2;
}

.inventory-table td {
  background-color: #ffffff;
}
.inventory-table tbody tr:hover td {
  background-color: #e9ecef;
}
.inventory-table tbody tr.selected-row td {
  background-color: #d6eaff !important;
}

/* CÃ¡c cá»™t Ä‘Æ°á»£c ghim (sticky) */
.inventory-table th:nth-child(1), .inventory-table td:nth-child(1) { position: sticky; left: 0; z-index: 1; }
.inventory-table th:nth-child(2), .inventory-table td:nth-child(2) { position: sticky; left: 90px; z-index: 1; } /* THAY Äá»”I: Cáº­p nháº­t vá»‹ trÃ­ left */
.inventory-table th:nth-child(3), .inventory-table td:nth-child(3) { position: sticky; left: 240px; z-index: 1; } /* THAY Äá»”I: Cáº­p nháº­t vá»‹ trÃ­ left */

.inventory-table th:nth-child(1), .inventory-table th:nth-child(2), .inventory-table th:nth-child(3) { z-index: 3; }

.inventory-table td:nth-child(1), .inventory-table td:nth-child(2), .inventory-table td:nth-child(3) { background-color: #ffffff; }
.inventory-table tbody tr:hover td:nth-child(1), .inventory-table tbody tr:hover td:nth-child(2), .inventory-table tbody tr:hover td:nth-child(3) { background-color: #e9ecef; }
.inventory-table tbody tr.selected-row td:nth-child(1), .inventory-table tbody tr:selected-row td:nth-child(2), .inventory-table tbody tr.selected-row td:nth-child(3) { background-color: #d6eaff !important; }

/* --- ÄIá»€U CHá»ˆNH Láº I Äá»˜ Rá»˜NG CÃC Cá»˜T --- */
.inventory-table th:nth-child(1), .inventory-table td:nth-child(1) { min-width: 90px; } /* THAY Äá»”I: Giáº£m tá»« 110px -> NgÃ y nháº­p */
.inventory-table th:nth-child(2), .inventory-table td:nth-child(2) { min-width: 140px; } /* MÃ£ hÃ ng */
.inventory-table th:nth-child(3), .inventory-table td:nth-child(3) { min-width: 280px; white-space: normal; text-align: left;} /* TÃªn hÃ ng (xuá»‘ng dÃ²ng, cÄƒn trÃ¡i) */
.inventory-table th:nth-child(4), .inventory-table td:nth-child(4) { min-width: 150px; } /* Sá»‘ lÃ´ */
.inventory-table th:nth-child(5), .inventory-table td:nth-child(5) { min-width: 120px; } /* HSD */
.inventory-table th:nth-child(6), .inventory-table td:nth-child(6) { min-width: 80px; }  /* ÄVT */
.inventory-table th:nth-child(7), .inventory-table td:nth-child(7) { min-width: 150px; white-space: normal; } /* Quy cÃ¡ch (xuá»‘ng dÃ²ng) */
.inventory-table th:nth-child(8), .inventory-table td:nth-child(8) { min-width: 100px; } /* SL Nháº­p */
.inventory-table th:nth-child(9), .inventory-table td:nth-child(9) { min-width: 100px; font-weight: bold; } /* SL CÃ²n láº¡i */
.inventory-table th:nth-child(10),.inventory-table td:nth-child(10){ min-width: 200px; white-space: normal; } /* Ghi chÃº */
.inventory-table th:nth-child(11),.inventory-table td:nth-child(11){ min-width: 150px; } /* Nhiá»‡t Ä‘á»™ BQ */
.inventory-table th:nth-child(12),.inventory-table td:nth-child(12){ min-width: 180px; white-space: normal; } /* HÃ£ng SX */
.inventory-table th:nth-child(13),.inventory-table td:nth-child(13){ min-width: 120px; } /* Team */

/* --- MODAL (POPUP) --- */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1010; /* TÄƒng z-index Ä‘á»ƒ ná»•i trÃªn navbar */
}

.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  width: 500px;
  max-width: 90%;
  display: flex;
  flex-direction: column;
  max-height: 90vh;
}

.modal-content h2 {
  margin-top: 0;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.modal-body {
  flex-grow: 1;
  overflow-y: auto;
  padding: 10px 0;
}

/* --- BUTTONS & FORMS --- */
.btn-primary {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}
.btn-primary:hover {
  opacity: 0.9;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 5px;
  cursor: pointer;
}
.btn-secondary:hover {
  opacity: 0.9;
}

.action-buttons {
  display: flex;
  gap: 10px;
}

.btn-icon {
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  font-size: 18px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.btn-edit { color: #007bff; }
.btn-edit:hover { background-color: #e7f3ff; }

.btn-delete { color: #dc3545; }
.btn-delete:hover { background-color: #fbebee; }

.btn-confirm { color: #28a745; }
.btn-confirm:hover { background-color: #eaf6ec; }

.btn-view { color: #17a2b8; }
.btn-view:hover { background-color: #e8f6f8; }

.form-section {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form-row {
  display: flex;
  gap: 20px;
}

.form-row .form-group {
  flex: 1;
}

.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 14px;
}
.form-group select {
  background-color: white;
}

.page-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
  gap: 10px;
}

/* --- GRID NHáº¬P LIá»†U --- */
.item-details-grid, .item-details-grid-edit {
  display: grid;
  gap: 10px;
  background-color: #fff;
  padding: 10px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
}

.item-details-grid {
  grid-template-columns: 1fr 2fr 1.1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr 1.5fr 1fr;
}

.item-details-grid-edit {
  grid-template-columns: 1fr 2fr 1fr 1.2fr 0.8fr 1.5fr 1fr 1.5fr auto;
}

.grid-header {
  font-weight: bold;
  padding-bottom: 10px;
  border-bottom: 2px solid var(--border-color);
}

.grid-cell {
  padding: 5px 0;
  display: flex;
  align-items: center;
}

.grid-cell input,
.grid-cell textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.grid-cell textarea {
  resize: vertical;
  min-height: 38px;
}

.grid-cell input[readOnly],
.grid-cell textarea[readOnly] {
  background-color: #f0f0f0;
  cursor: not-allowed;
}

/* --- Bá»˜ Lá»ŒC & TRáº NG THÃI --- */
.status-badge {
  padding: 5px 10px;
  border-radius: 15px;
  font-size: 12px;
  color: white;
  font-weight: bold;
}

.status-pending {
  background-color: #ffc107;
  color: #333;
}

.status-completed {
  background-color: #28a745;
}

.status-cancelled {
  background-color: #6c757d;
}

/* --- THÃŠM CLASS Má»šI NÃ€Y --- */
.status-adjusted {
  background-color: #6f42c1;
}

.filters-container {
  background-color: #fff;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

.filter-group {
  display: flex;
  gap: 10px;
  align-items: center;
}

.filter-group button {
  background-color: #ffffff;
  border: 1px solid #adb5bd;
  color: #495057;
  padding: 8px 15px;
  border-radius: 20px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
}

.filter-group button:hover {
  background-color: #e9ecef;
  border-color: #495057;
}

.filter-group button.active {
  background-color: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.inventory-table td {
  text-align: center;
}

.inventory-table td:nth-child(3) {
  text-align: left;
}

/* --- CSS Má»šI: CHO Cáº¢NH BÃO Háº N Sá»¬ Dá»¤NG (DÃ¹ng chung, bá» gáº¡ch ngang) --- */

/* Ãp dá»¥ng mÃ u cho cÃ¡c Ã´ cá»§a dÃ²ng cÃ³ class tÆ°Æ¡ng á»©ng */
tr.near-expiry-yellow td { background-color: #fff3cd !important; color: #5a5a5a !important; }
tr.near-expiry-orange td { background-color: #ffe8cc !important; color: #5a5a5a !important; }
tr.near-expiry-red td { background-color: #f8d7da !important; color: #5a5a5a !important; }
tr.expired-black td { background-color: #212529 !important; color: #fff !important; }

/* In Ä‘áº­m chá»¯ cho cÃ¡c dÃ²ng cáº£nh bÃ¡o */
tr.near-expiry-yellow td,
tr.near-expiry-orange td,
tr.near-expiry-red td {
    font-weight: 500;
}

tr.expired-black td {
    font-weight: bold;
}

/* Äáº£m báº£o mÃ u hover váº«n hoáº¡t Ä‘á»™ng */
tbody tr:hover td {
  background-color: #d6eaff !important;
  color: #000 !important; /* Äáº£m báº£o chá»¯ luÃ´n Ä‘á»c Ä‘Æ°á»£c khi hover */
}

/* DÃ²ng Ä‘Æ°á»£c chá»n cÃ³ mÃ u Æ°u tiÃªn cao nháº¥t */
tbody tr.selected-row td {
  background-color: #cce5ff !important;
  color: #000 !important;
}

/* --- BADGES (TEAM & TEMP) --- */
.team-badge {
  display: inline-flex; /* Chuyá»ƒn sang inline-flex Ä‘á»ƒ cÄƒn giá»¯a ná»™i dung */
  align-items: center; /* CÄƒn giá»¯a theo chiá»u dá»c */
  justify-content: center; /* CÄƒn giá»¯a theo chiá»u ngang */
  padding: 5px 10px;
  border-radius: 15px; /* Bo trÃ²n hÆ¡n má»™t chÃºt */
  font-size: 12px;
  font-weight: 500;
  color: #fff;
  line-height: 1.2; /* TÄƒng khoáº£ng cÃ¡ch dÃ²ng cho dá»… Ä‘á»c khi xuá»‘ng dÃ²ng */
  min-height: 38px; /* Äáº·t chiá»u cao tá»‘i thiá»ƒu Ä‘á»ƒ chá»©a Ä‘Æ°á»£c 2 dÃ²ng */
  box-sizing: border-box; /* Äáº£m báº£o padding khÃ´ng lÃ m tÄƒng kÃ­ch thÆ°á»›c */
}
.team-badge.team-med { background-color: #007bff; }
.team-badge.team-bio { background-color: #28a745; }
.team-badge.team-sparepart { background-color: #6c757d; }

.temp-badge {
  padding: 4px 10px;
  border-radius: 4px;
  font-size: 13px;
  font-weight: 500;
  display: inline-block;
}
.temp-badge.temp-cool { background-color: #a7d9f2; color: #0056b3; }
.temp-badge.temp-frozen { background-color: #c9b6e7; color: #4a148c; }
.temp-badge.temp-room { background-color: #b3e6b3; color: #28a745; }
.temp-badge.temp-other { background-color: #ced4da; color: #343a40; border: 1px solid #adb5bd; }

/* --- TÃŒM KIáº¾M & Bá»˜ Lá»ŒC --- */
.controls-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 20px;
}

.search-container {
  flex-grow: 1;
  max-width: 400px;
}

.search-input {
  width: 100%;
  padding: 10px 15px;
  font-size: 14px;
  border-radius: 20px;
  border: 1px solid #dee2e6;
  outline: none;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.search-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

.filters-container {
  margin-bottom: 0;
  box-shadow: none;
  padding: 0;
  background-color: transparent;
}

/* --- DROPDOWN Sá» LÃ” (FEFO) --- */
.lot-option-near-expiry { background-color: #ffe08a; color: #333; }
.lot-option-expired { background-color: #ef9a9a; color: #fff; font-weight: bold; text-decoration: line-through; }

/* --- HIá»‚N THá»Š LÃ” ÄÃƒ CHá»ŒN --- */
.selected-lot-view {
  display: flex;
  align-items: center;
  width: 100%;
  height: 38px;
}

.selected-lot-input {
  width: calc(100% - 38px); 
  height: 100%;
  border-right: none !important;
  border-radius: 4px 0 0 4px !important;
  background-color: #e9ecef !important;
  margin: 0 !important;
  box-sizing: border-box;
}

.change-lot-btn {
  width: 38px;
  height: 100%;
  border: 1px solid #ced4da;
  border-left: none;
  border-radius: 0 4px 4px 0;
  background: #f8f9fa;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 !important;
  margin: 0 !important;
  box-sizing: border-box;
}

.change-lot-btn svg {
  width: 16px;
  height: 16px;
  color: #495057;
}

.change-lot-btn:hover {
  background-color: #e2e6ea;
}

/* --- GIAO DIá»†N XEM CHI TIáº¾T NHá»Ž Gá»ŒN --- */
.compact-info-grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 0px 20px;
  border: 1px solid var(--border-color);
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 10px;
}

.compact-info-grid div {
  margin-bottom: 5px;
}

.compact-info-grid label {
  font-size: 13px;
  color: #6c757d;
  margin: 0;
}

.compact-info-grid p {
  margin: 0;
  font-size: 15px;
}

.compact-info-grid .info-description {
  grid-column: 1 / -1;
  margin-top: 5px;
}

/* CSS Má»šI: Cho há»™p thÃ´ng tin lÃ´ hÃ ng Ä‘Ã£ tá»“n táº¡i */
.existing-lot-info {
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 12px;
  color: #004085; /* MÃ u chá»¯ xanh Ä‘áº­m */
  background-color: #cce5ff; /* MÃ u ná»n xanh nháº¡t */
  padding: 5px 8px;
  border-radius: 4px;
  margin-top: 5px;
  width: 100%;
  border: 1px solid #b8daff;
}

/* CSS CHO GIAO DIá»†N Tá»’N KHO Tá»”NG Há»¢P */
.lot-details-row td {
    padding: 0 !important;
    background-color: #fff !important;
    border-top: none !important;
}

.lot-details-container {
    padding: 15px 20px 15px 50px; /* Thá»¥t vÃ o Ä‘á»ƒ táº¡o cáº¥p báº­c */
    background-color: #fdfdfe;
}

.lot-details-container h4 {
    margin: 0 0 10px 0;
    font-weight: 500;
}

.lot-details-container ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.lot-details-container li {
    display: flex;
    gap: 20px;
    padding: 8px;
    border-radius: 4px;
    background-color: #e9ecef;
    font-size: 14px;
}

/* ========================================================================= */
/* === TÃ™Y CHá»ˆNH RIÃŠNG CHO TRANG QUáº¢N LÃ HÃ€NG HÃ“A (ProductsPage) === */
/* ========================================================================= */
.products-page-container .products-table {
    table-layout: fixed;
}
/* Cá»™t 2 (TÃªn hÃ ng) -> Rá»˜NG RA */
.products-page-container .products-table th:nth-child(2),
.products-page-container .products-table td:nth-child(2) {
    width: 40%;
    text-align: left;
    white-space: normal;
    word-break: break-word;
}
/* Cá»™t 3 (ÄVT) -> Háº¸P Láº I */
.products-page-container .products-table th:nth-child(3),
.products-page-container .products-table td:nth-child(3) {
    width: 120px;
    text-align: center;
}

/* ========================================================================= */
/* === TÃ™Y CHá»ˆNH RIÃŠNG CHO TRANG CHI TIáº¾T KIá»‚M KÃŠ (StocktakeSessionPage) === */
/* ========================================================================= */
.stocktake-session-page-container .products-table {
    table-layout: fixed;
}
/* Cá»™t 2 (TÃªn hÃ ng) -> Rá»˜NG RA */
.stocktake-session-page-container .products-table th:nth-child(2),
.stocktake-session-page-container .products-table td:nth-child(2) {
    width: 40%;
    text-align: left;
    white-space: normal;
    word-break: break-word;
}
/* Cá»™t 3 (Sá»‘ lÃ´) -> Háº¸P Láº I */
.stocktake-session-page-container .products-table th:nth-child(3),
.stocktake-session-page-container .products-table td:nth-child(3) {
    width: 150px;
    text-align: center;
}

/* CSS Má»šI: Cho mÃ u ná»n cá»§a tá»«ng lÃ´ hÃ ng con */
.lot-item {
    transition: background-color 0.2s; /* Hiá»‡u á»©ng chuyá»ƒn mÃ u mÆ°á»£t mÃ  */
}

/* LÃ´ bÃ¬nh thÆ°á»ng cÃ³ mÃ u ná»n máº·c Ä‘á»‹nh */
.lot-item {
    background-color: #e9ecef;
}

/* CÃ¡c lÃ´ cÃ³ cáº£nh bÃ¡o sáº½ cÃ³ mÃ u riÃªng */
.lot-item.lot-item-yellow {
    background-color: #fff3cd;
    border-left: 3px solid #ffeeba;
}
.lot-item.lot-item-orange {
    background-color: #ffe8cc;
    border-left: 3px solid #ffd8b8;
}
.lot-item.lot-item-red {
    background-color: #f8d7da;
    border-left: 3px solid #f5c6cb;
}
.lot-item.lot-item-expired {
    background-color: #d6d8db;
    border-left: 3px solid #c6c8ca;
    font-weight: bold;
}

/* --- CSS CHO GIAO DIá»†N RESPONSIVE TRÃŠN DI Äá»˜NG --- */
@media (max-width: 768px) {
    /* Pháº§n nÃ y Ã¡p dá»¥ng cho cáº£ 2 báº£ng:
      - Báº£ng tá»“n kho chi tiáº¿t (inventory-table)
      - Báº£ng tá»“n kho tá»•ng há»£p (products-table)
    */

    /* BÆ°á»›c 1: áº¨n Ä‘i pháº§n tiÃªu Ä‘á» (thead) cá»§a báº£ng gá»‘c */
    .inventory-table thead,
    .products-table thead {
        display: none;
    }

    /* BÆ°á»›c 2: Biáº¿n báº£ng vÃ  cÃ¡c dÃ²ng thÃ nh cÃ¡c khá»‘i card riÃªng biá»‡t */
    .inventory-table, 
    .inventory-table tbody, 
    .inventory-table tr,
    .products-table,
    .products-table tbody,
    .products-table tr {
        display: block;
        width: 100%;
    }

    .inventory-table tr,
    .products-table tr {
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        padding: 10px;
    }

    /* BÆ°á»›c 3: Biáº¿n cÃ¡c Ã´ (td) thÃ nh cÃ¡c hÃ ng dá»c vÃ  thÃªm nhÃ£n cho chÃºng */
    .inventory-table td,
    .products-table td {
        display: flex;
        justify-content: space-between; /* Äáº©y nhÃ£n vÃ  giÃ¡ trá»‹ vá» 2 phÃ­a */
        align-items: center;
        padding: 8px 5px;
        border: none;
        border-bottom: 1px solid #eee;
        text-align: right; /* CÄƒn pháº£i cho giÃ¡ trá»‹ */
        white-space: normal; /* Cho phÃ©p giÃ¡ trá»‹ dÃ i tá»± xuá»‘ng dÃ²ng */
    }

    .inventory-table td:last-child,
    .products-table td:last-child {
        border-bottom: none;
    }
    
    /* ÄÃ¢y lÃ  pháº§n quan trá»ng nháº¥t: Láº¥y ná»™i dung tá»« attribute 'data-label' lÃ m nhÃ£n */
    .inventory-table td::before,
    .products-table td::before {
        content: attr(data-label);
        font-weight: bold;
        text-align: left; /* CÄƒn trÃ¡i cho nhÃ£n */
        padding-right: 10px;
        color: #333;
    }
    
    /* Loáº¡i bá» cÃ¡c style khÃ´ng cáº§n thiáº¿t trÃªn di Ä‘á»™ng */
    .inventory-table td,
    .inventory-table th {
        position: static !important; /* Bá» Ä‘Ã³ng bÄƒng cá»™t */
        min-width: auto !important;
    }

    /* Äiá»u chá»‰nh láº¡i cho cÃ¡c Ã´ chá»©a badge Ä‘á»ƒ hiá»ƒn thá»‹ Ä‘áº¹p hÆ¡n */
    .inventory-table td .team-badge,
    .inventory-table td .temp-badge {
       font-size: 13px;
    }

    /* ThÃªm vÃ o cuá»‘i file src/styles/AdminLayout.css */

/* --- CSS CHO CÃC NÃšT PHÃ‚N TRANG --- */
.pagination-controls {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 15px;
  margin-top: 20px;
}

.pagination-controls button {
  background-color: #fff;
  border: 1px solid #dee2e6;
  color: var(--primary-color);
  padding: 8px 15px;
  border-radius: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 5px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.pagination-controls button:hover:not(:disabled) {
  background-color: #f8f9fa;
}

.pagination-controls button:disabled {
  color: #adb5bd;
  cursor: not-allowed;
}

.pagination-controls span {
  font-weight: 500;
  color: #495057;
}

/* --- TÃ™Y CHá»ˆNH KÃCH THÆ¯á»šC & CÄ‚N Lá»€ Báº¢NG QUáº¢N LÃ HÃ€NG HÃ“A --- */
/* ÄOáº N CODE NÃ€Y PHáº¢I Náº°M BÃŠN NGOÃ€I Báº¤T Ká»² KHá»I @media NÃ€O */

/* Thiáº¿t láº­p cho cá»™t 'TÃªn hÃ ng' (cá»™t thá»© 2) Rá»˜NG RA vÃ  cÄƒn lá» TRÃI */
.products-page-container .products-table th:nth-child(2),
.products-page-container .products-table td:nth-child(2) {
Â  Â  width: 40%;
Â  Â  text-align: left;
Â  Â  white-space: normal;
Â  Â  word-break: break-word;
}

/* Thiáº¿t láº­p cho cá»™t 'ÄÆ¡n vá»‹ tÃ­nh' (cá»™t thá»© 3) Háº¸P Láº I vÃ  cÄƒn GIá»®A */
.products-page-container .products-table th:nth-child(3),
.products-page-container .products-table td:nth-child(3) {
Â  Â  width: 120px;
Â  Â  text-align: center;
}

/* --- Báº®T BUá»˜C Báº¢NG PHáº¢I TUÃ‚N THEO KÃCH THÆ¯á»šC ÄÃƒ Äá»ŠNH --- */
.products-page-container .products-table {
    table-layout: fixed;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\DashboardPage.css ---


/* src/styles/DashboardPage.css */

.dashboard-container {
  padding: 20px;
}

.cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.dashboard-card {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  padding: 20px;
  border-left: 5px solid;
}

.card-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 24px;
  margin-right: 20px;
}

.card-info {
  display: flex;
  flex-direction: column;
}

.card-title {
  color: #6c757d;
  font-size: 14px;
  margin-bottom: 5px;
}

.card-value {
  color: #343a40;
  font-size: 28px;
  font-weight: bold;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\DataImportPage.css ---


/* src/styles/DataImportPage.css */

.data-import-page {
    padding: 20px;
}

.import-container {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: 30px;
    margin-top: 20px;
}

.import-controls, .import-actions {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.import-controls h3, .import-actions h3 {
    margin-top: 0;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 15px;
}

.import-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.import-type-selector button {
    flex-grow: 1;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    color: #495057;
    transition: all 0.2s ease;
}

.import-type-selector button.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.import-instructions {
    margin-top: 20px;
    padding: 15px;
    background-color: #e7f3ff;
    border-left: 4px solid #007bff;
    display: flex;
    gap: 10px;
    align-items: flex-start;
}
.import-instructions svg {
    font-size: 20px;
    color: #007bff;
    flex-shrink: 0;
    margin-top: 3px;
}
.import-instructions ul {
    margin: 0;
    padding-left: 20px;
    font-size: 14px;
    color: #333;
}
.import-instructions li {
    margin-bottom: 5px;
}

.import-method {
    margin-bottom: 25px;
}
.import-method h4 {
    margin-top: 0;
    margin-bottom: 10px;
}
.import-method input[type="file"] {
    width: 100%;
}
.import-method textarea {
    width: 100%;
    font-family: monospace;
    font-size: 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
}

.import-log-container {
    margin-top: 20px;
}
.import-log {
    background-color: #2d333b;
    color: #cdd9e5;
    font-family: monospace;
    font-size: 13px;
    padding: 15px;
    border-radius: 6px;
    height: 200px;
    overflow-y: auto;
}
.import-log p {
    margin: 0 0 5px 0;
    white-space: pre-wrap;
    word-break: break-all;
}
.log-item.log-info { color: #cdd9e5; }
.log-item.log-success { color: #56d364; }
.log-item.log-warn { color: #e3b341; }
.log-item.log-error { color: #f85149; font-weight: bold; }

@media (max-width: 992px) {
    .import-container {
        grid-template-columns: 1fr;
    }
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\print.css ---


/* src/styles/print.css (PhiÃªn báº£n Sá»­a Lá»—i Giao Diá»‡n In) */

@media print {
  /* --- CÃ€I Äáº¶T TRANG IN CHUNG --- */
  @page {
    size: landscape; /* In khá»• ngang */
    margin: 5mm;     /* Lá» 5mm cho táº¥t cáº£ cÃ¡c cáº¡nh */
  }

  body {
    -webkit-print-color-adjust: exact !important;
    color-adjust: exact !important;
    font-size: 9pt; 
  }

  /* --- QUY Táº®C CHUNG CHO CÃC KHU Vá»°C IN --- */
  body * { visibility: hidden; }
  .printable-area, .printable-area *, 
  .printable-inventory-area, .printable-inventory-area * {
    visibility: visible;
  }

  .printable-area, .printable-inventory-area {
    position: absolute; left: 0; top: 0; width: 100%;
  }

  /* --- QUY Táº®C IN PHIáº¾U (NHáº¬P/XUáº¤T) --- */
  .printable-area {
    max-width: none !important; border: none !important; box-shadow: none !important;
  }
  .printable-area .modal-actions { display: none; }
  .printable-area h2 { font-size: 20pt; text-align: center; margin-bottom: 25px; }
  .printable-area .compact-info-grid { border: none; padding: 0; font-size: 11pt; margin-bottom: 25px; }
  .printable-area .products-table { table-layout: fixed; width: 100%; font-size: 10pt; border-collapse: collapse; margin-top: 20px; }
  .printable-area .products-table th, .printable-area .products-table td { border: 1px solid #333; padding: 8px; word-wrap: break-word; vertical-align: middle; text-align: center; }
  .printable-area .products-table th { background-color: #f2f2f2 !important; font-weight: bold; }
  .printable-area .products-table td:nth-child(2) { text-align: left; }

  /* --- QUY Táº®C IN BÃO CÃO Tá»’N KHO --- */
  .printable-inventory-area .page-header,
  .printable-inventory-area .controls-container,
  .printable-inventory-area .pagination-controls,
  .printable-inventory-area .view-toggle,
  .printable-inventory-area th:first-child, /* áº¨n cá»™t mÅ©i tÃªn expand */
  .printable-inventory-area td:first-child {
    display: none;
  }

  /* *** NÃ‚NG Cáº¤P QUAN TRá»ŒNG: VÃ” HIá»†U HÃ“A GIAO DIá»†N THáºº KHI IN *** */
  .printable-inventory-area table, .printable-inventory-area tbody, .printable-inventory-area thead, 
  .printable-inventory-area tr, .printable-inventory-area th, .printable-inventory-area td {
      display: revert !important; /* Tráº£ vá» giÃ¡ trá»‹ máº·c Ä‘á»‹nh cá»§a CSS cho báº£ng */
      position: static !important;
      width: auto !important; /* Äá»ƒ trÃ¬nh duyá»‡t tá»± tÃ­nh toÃ¡n Ä‘á»™ rá»™ng */
      min-width: 0 !important; /* Bá» min-width Ä‘á»ƒ trÃ¡nh co cá»™t */
  }
  .printable-inventory-area td::before { content: "" !important; display: none !important; }

  /* Äá»‹nh dáº¡ng láº¡i báº£ng Ä‘á»ƒ in */
  .printable-inventory-area table {
    width: 100% !important; border-collapse: collapse; box-shadow: none; table-layout: auto;
  }
  .printable-inventory-area th, .printable-inventory-area td {
    border: 1px solid #666; padding: 5px; text-align: left; white-space: normal;
  }
  .printable-inventory-area th { background-color: #f2f2f2 !important; font-weight: bold; }
  
  /* CÄƒn giá»¯a cho cÃ¡c cá»™t sá»‘ lÆ°á»£ng vÃ  ÄVT */
  .printable-inventory-area th:nth-child(6), .printable-inventory-area td:nth-child(6), /* ÄVT */
  .printable-inventory-area th:nth-child(8), .printable-inventory-area td:nth-child(8), /* SL Nháº­p */
  .printable-inventory-area th:nth-child(9), .printable-inventory-area td:nth-child(9)  /* SL CÃ²n láº¡i */
  {
      text-align: center !important;
  }
  .printable-inventory-area .inventory-table td:nth-child(9) { font-weight: bold; } /* In Ä‘áº­m SL cÃ²n láº¡i */

  /* *** NÃ‚NG Cáº¤P QUAN TRá»ŒNG: LUÃ”N HIá»‚N THá»Š CHI TIáº¾T LÃ” KHI IN *** */
  .printable-inventory-area .lot-details-row {
    display: table-row !important;
  }
  .printable-inventory-area .lot-details-row td {
    background-color: #f8f9fa !important;
    padding-left: 20px !important;
  }
  .printable-inventory-area .lot-details-container ul {
      display: block !important; /* Hiá»ƒn thá»‹ cÃ¡c lÃ´ dÆ°á»›i dáº¡ng danh sÃ¡ch */
  }
  .printable-inventory-area .lot-details-container li {
      display: block !important; /* Má»—i lÃ´ trÃªn má»™t dÃ²ng */
      margin-bottom: 3px;
  }
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\styles\StocktakePage.css ---


/* src/styles/StocktakePage.css */

/* áº¨n khu vá»±c dÃ¹ng Ä‘á»ƒ in ra khá»i mÃ n hÃ¬nh hiá»ƒn thá»‹ thÃ´ng thÆ°á»ng */
.printable-stocktake-area {
    display: none;
}

/* Máº·c Ä‘á»‹nh, áº©n giao diá»‡n tháº» trÃªn mÃ n hÃ¬nh lá»›n */
.stocktake-card-container {
    display: none;
}

/* --- GIAO DIá»†N Dáº NG THáºº CHO ÄIá»†N THOáº I --- */
@media (max-width: 768px) {
    /* áº¨n giao diá»‡n báº£ng trÃªn mÃ n hÃ¬nh nhá» */
    .stocktake-table-container {
        display: none;
    }

    /* Hiá»ƒn thá»‹ giao diá»‡n tháº» */
    .stocktake-card-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .stocktake-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 15px;
        border-left: 5px solid var(--primary-color);
    }

    .stocktake-card .card-header {
        margin-bottom: 10px;
    }

    .stocktake-card .card-product-id {
        font-weight: bold;
        font-size: 16px;
        color: var(--text-color);
        display: block;
    }
    .stocktake-card .card-product-name {
        font-size: 14px;
        color: #555;
    }

    .stocktake-card .card-info-row {
        display: flex;
        justify-content: space-between;
        font-size: 13px;
        color: #666;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 10px;
    }

    .stocktake-card .card-count-area {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .stocktake-card .count-box {
        flex: 1;
    }

    .stocktake-card .count-box label {
        font-size: 12px;
        color: #555;
        margin-bottom: 4px;
        display: block;
    }
    
    .stocktake-card .system-count p {
        font-size: 20px;
        font-weight: bold;
        color: var(--text-color);
        margin: 0;
        padding: 8px;
    }

    .stocktake-card .actual-count input {
        width: 100%;
        padding: 8px;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
        border: 1px solid var(--border-color);
        border-radius: 5px;
    }

    .stocktake-card .card-footer-info {
        font-size: 12px;
        color: #666;
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid var(--border-color);
    }
}


/* <-- NÃ‚NG Cáº¤P Sá»¬A Lá»–I: TÄƒng Ä‘á»™ Æ°u tiÃªn cá»§a CSS --> */
.products-table.discrepancy-table {
    table-layout: fixed;
    width: 100%;
}

.products-table.discrepancy-table th:nth-child(1),
.products-table.discrepancy-table td:nth-child(1) {
    width: 5%;
}

.products-table.discrepancy-table th:nth-child(2),
.products-table.discrepancy-table td:nth-child(2) {
    width: 15%;
}

.products-table.discrepancy-table th:nth-child(3),
.products-table.discrepancy-table td:nth-child(3) {
    width: 35%; /* Cho cá»™t tÃªn hÃ ng rá»™ng nháº¥t */
    white-space: normal;
    word-break: break-word;
}

.products-table.discrepancy-table th:nth-child(4) { width: 15%; }
.products-table.discrepancy-table th:nth-child(5) { width: 10%; }
.products-table.discrepancy-table th:nth-child(6) { width: 10%; }
.products-table.discrepancy-table th:nth-child(7) { width: 10%; }



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\utils\dateUtils.js ---


// src/utils/dateUtils.js

/**
 * Chuyá»ƒn Ä‘á»•i má»™t Ä‘á»‘i tÆ°á»£ng Firebase Timestamp hoáº·c Date thÃ nh chuá»—i dd/mm/yyyy.
 * @param {object | Date} timestamp - Äá»‘i tÆ°á»£ng Timestamp cá»§a Firebase hoáº·c Ä‘á»‘i tÆ°á»£ng Date.
 * @returns {string} - Chuá»—i ngÃ y thÃ¡ng Ä‘Ã£ Ä‘á»‹nh dáº¡ng hoáº·c chuá»—i rá»—ng.
 */
export const formatDate = (timestamp) => {
  if (!timestamp) return '';
  const date = timestamp.toDate ? timestamp.toDate() : timestamp;
  
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

/**
 * Chuyá»ƒn Ä‘á»•i má»™t chuá»—i dd/mm/yyyy thÃ nh Ä‘á»‘i tÆ°á»£ng Date.
 * @param {string} dateString - Chuá»—i ngÃ y thÃ¡ng theo Ä‘á»‹nh dáº¡ng dd/mm/yyyy.
 * @returns {Date | null} - Äá»‘i tÆ°á»£ng Date hoáº·c null náº¿u Ä‘á»‹nh dáº¡ng sai.
 */
export const parseDateString = (dateString) => {
  if (!dateString) return null;
  try {
    const parts = dateString.split('/');
    if (parts.length !== 3) return null;
    const [day, month, year] = parts;
    return new Date(year, month - 1, day);
  } catch (error) {
    console.error("Lá»—i Ä‘á»‹nh dáº¡ng ngÃ y thÃ¡ng:", dateString, error);
    return null;
  }
};

/**
 * HÃ€M Má»šI: Äá»‹nh dáº¡ng má»™t chuá»—i sá»‘ thÃ nh Ä‘á»‹nh dáº¡ng ngÃ y dd/mm/yyyy khi ngÆ°á»i dÃ¹ng gÃµ.
 * @param {string} value - GiÃ¡ trá»‹ tá»« Ã´ input.
 * @returns {string} - Chuá»—i Ä‘Ã£ Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng.
 */
export const formatExpiryDate = (value) => {
    if (!value) return '';

    // 1. Chá»‰ giá»¯ láº¡i cÃ¡c kÃ½ tá»± sá»‘
    const digitsOnly = value.replace(/\D/g, '');

    // 2. Giá»›i háº¡n tá»‘i Ä‘a 8 kÃ½ tá»± (ddmmyyyy)
    const truncatedDigits = digitsOnly.slice(0, 8);
    const len = truncatedDigits.length;

    // 3. Ãp dá»¥ng Ä‘á»‹nh dáº¡ng dá»±a trÃªn Ä‘á»™ dÃ i
    if (len <= 2) {
        return truncatedDigits; // GÃµ tá»›i ngÃ y (dd)
    }
    if (len <= 4) {
        // GÃµ tá»›i thÃ¡ng (dd/mm)
        return `${truncatedDigits.slice(0, 2)}/${truncatedDigits.slice(2)}`;
    }
    // GÃµ tá»›i nÄƒm (dd/mm/yyyy)
    return `${truncatedDigits.slice(0, 2)}/${truncatedDigits.slice(2, 4)}/${truncatedDigits.slice(4)}`;
};




--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\App.css ---


/* src/App.css */

/* Class má»›i nÃ y chá»‰ dÃ¹ng Ä‘á»ƒ cÄƒn giá»¯a trang Ä‘Äƒng nháº­p */
.login-page-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

/* CÃ¡c style cho form Ä‘Äƒng nháº­p, giá»¯ nguyÃªn nhÆ° cÅ© */
.login-container {
  padding: 40px;
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 350px;
}

.login-container h2 {
  text-align: center;
  margin-bottom: 24px;
  color: #333;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: bold;
  color: #555;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

button {
  width: 100%;
  padding: 12px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  font-size: 16px;
  cursor: pointer;
  margin-top: 10px;
}

button:hover {
  background-color: #0056b3;
}

.logout-button {
  background-color: #dc3545;
  margin-top: 20px;
}

.logout-button:hover {
  background-color: #c82333;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\App.jsx ---


// src/App.jsx
import React from 'react';
import LoginPage from './components/LoginPage';
import AdminLayout from './components/AdminLayout';
import ViewerLayout from './components/ViewerLayout';
import './App.css';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { AuthProvider, useAuth } from './context/UserContext';

const AppRoutes = () => {
  const { user, userRole, loading } = useAuth();

  if (loading) {
    return null; 
  }

  return (
    <>
      {user ? (
        <Routes>
          {userRole === 'owner' ? (
            <Route path="/*" element={<AdminLayout />} />
          ) : (
            <Route path="/*" element={<Navigate to="/view" />} />
          )}
          <Route path="/view/*" element={<ViewerLayout />} />
        </Routes>
      ) : (
        <div className="login-page-wrapper">
          <LoginPage />
        </div>
      )}
    </>
  );
};

function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        {/* <-- NÃ‚NG Cáº¤P: ThÃªm thuá»™c tÃ­nh closeButton={false} vÃ o Ä‘Ã¢y --> */}
        <ToastContainer
          position="top-right"
          autoClose={3000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
          closeButton={false} 
        />
        <AppRoutes />
      </AuthProvider>
    </BrowserRouter>
  );
}

export default App;



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\constants.js ---


/// src/constants.js

// <-- THÃŠM Má»šI: Háº±ng sá»‘ dÃ¹ng chung cho viá»‡c phÃ¢n trang
export const PAGE_SIZE = 15;

export const TEMP_OPTIONS = ["Nhiá»‡t Ä‘á»™ phÃ²ng", "2 â†’ 8Â°C", "-25 â†’ -15Â°C"];

export const MANUFACTURER_OPTIONS = ["Becton Dickinson", "Smiths Medical", "DentaLife", "Schulke", "Intra", "Rovers", "Corning", "Thermo Fisher", "Cytiva"];

export const UNIT_OPTIONS = ["CÃ¡i", "Há»™p", "ThÃ¹ng", "Chai", "á»ng", "Lá»", "Sá»£i", "CÃ¢y", "Can", "TuÃ½p", "Bá»™", "MÃ¡ng", "GÃ³i", "Khay"];



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\firebaseConfig.js ---


// src/firebaseConfig.js

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

// == THÃ”NG TIN Cáº¤U HÃŒNH FIREBASE Cá»¦A Báº N ==
const firebaseConfig = {
  apiKey: "AIzaSyDLnv85ipAXZ4IXCIKMNFpQgZQCy_uF3PY",
  authDomain: "kho-ptbiomed.firebaseapp.com",
  projectId: "kho-ptbiomed",
  storageBucket: "kho-ptbiomed.appspot.com",
  messagingSenderId: "41298806902",
  appId: "1:41298806902:web:7adb67dd5ee55918887757"
};

// Khá»Ÿi táº¡o á»©ng dá»¥ng Firebase
const app = initializeApp(firebaseConfig);

// Xuáº¥t ra cÃ¡c dá»‹ch vá»¥ Ä‘á»ƒ sá»­ dá»¥ng trong toÃ n bá»™ á»©ng dá»¥ng
export const db = getFirestore(app);      // Dá»‹ch vá»¥ cÆ¡ sá»Ÿ dá»¯ liá»‡u Firestore
export const auth = getAuth(app);         // Dá»‹ch vá»¥ xÃ¡c thá»±c ngÆ°á»i dÃ¹ng



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\index.css ---


/* src/index.css */

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f0f2f5; /* ThÃªm má»™t mÃ u ná»n xÃ¡m nháº¡t cho toÃ n bá»™ trang */
}

* {
  box-sizing: border-box;
}



--- FILE: C:\Users\T14s Gen 3\quan-ly-kho\src\main.jsx ---


import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'
import './styles/print.css'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



